[{"title":"ReactNative开发-神器Reactoron","url":"/2019/05/23/ReactNative-reactoron/","content":"Reactoron能改善React Native开发体验。 \n<!--more--> \n \nReactoron这个开发工具，把我们输出的日志像twitter信息流一样保存起来，等我们需要的时候，可以回过头过滤找到日志，展开日志详情查看。提高ReactNative开发效率。 看日志会特别方便，体验也不错。\n\n![image](https://github.com/infinitered/reactotron/raw/master/docs/images/quick-start-react-native/react-demo-native-reactotron.jpg)\n\n项目地址： [GitHub - infinitered/reactotron: A desktop app for inspecting your React JS and React Native projects. macOS, Linux, and Windows.](https://github.com/infinitered/reactotron)\n\n下载最新的release包，本地安装。\n\n## 使用\n\n### 1. 集成在React Native项目中\n\n```sh\nnpm i --save-dev reactotron-react-native\n// or\nyarn add reactotron-react-native --dev\n```\n\n### 2. 配置文件\n\n创建`ReactotronConfig.js`\n\n基础用法：\n```js\nimport Reactotron from 'reactotron-react-native'\n\nReactotron\n  .configure() // controls connection & communication settings\n  .useReactNative() // add all built-in react native plugins\n  .connect() // let's connect!\n```\n高级配置: \n\n```js\nimport Reactotron from 'reactotron-react-native'\n\nReactotron\n  .configure({\n    name: \"React Native Demo\"\n  })\n  .useReactNative({     \n      asyncStorage: {ignore: []},\n      networking: {\n          ignoreUrls: new RegExp(`http://127.0.0.1:19000/logs`)\n      },\n      editor: false,\n      errors: {veto: (stackFrame) => false},\n      overlay: false,})\n  .connect();\n```\n\n#### asyncStorage \n\n参数类型：\n\n```js\nexport interface AsyncStorageOptions {\n    ignore?: string[];\n}\n```\n\n`ignore`的值，传入key数组，`reactotron`不会展示这些key的存储数据\n\n#### networking\n参数类型： \n```js\nexport interface NetworkingOptions {\n    ignoreContentTypes?: RegExp; // 如果response的Content-Type匹配上这个正则表达式，不展示response，\n    ignoreUrls?: RegExp; //  要忽略的urls\n}\n```\n例子：\n```js networking({\n  ignoreContentTypes: /^(image)\\/.*$/i,\n  ignoreUrls: /\\/(logs|symbolicate)$/,\n})\n```\n\n\n#### Error \n参数类型：\n```js\nexport interface TrackGlobalErrorsOptions {\n    veto?: (frame: any) => boolean;\n}\n```\n`veto`函数，我们可以通过它指定我们不想看到的堆栈信息.这里的frame指stack frame.\n\n比如： 如下忽略报错时所有react-native module里头的stack frame.\n```js\nReactotron\n  .configure()\n  .use(trackGlobalErrors({\n    veto: frame => frame.fileName.indexOf('/node_modules/react-native/') >= 0\n   }))\n  .connect()\n```\n### 3. improt\n\n 在`App.js` 或者`index.js`文件头中引入：\n \n```js\nif(__DEV__) {\n  import('./ReactotronConfig').then(() => console.log('Reactotron Configured'))\n}\n```\n\n### 4. 打点\n\n像用`console.log`一样，调用 `Reactotron.log`\n\nReactNative项目跑起来后，可以在Reactotron面板上看到： \n\n![9b1dbee4.png](https://github.com/infinitered/reactotron/raw/master/docs/images/quick-start-react-native/hello-1.jpg)\n\n其他API： \n```js\nReactotron.log({ numbers: [1, 2, 3], boolean: false, nested: { here: 'we go' } })\n\nReactotron.warn('*glares*')\nReactotron.error('Now you\\'ve done it.')\nReactotron.display({\n  name: 'KNOCK KNOCK',\n  preview: 'Who\\'s there?',\n  value: 'Orange.'\n})\n\nReactotron.display({\n  name: 'ORANGE',\n  preview: 'Who?',\n  value: 'Orange you glad you don\\'t know me in real life?',\n  important: true\n})\n\n```\n\n## Redux的数据信息\n[reactotron/plugin-redux.md at master · infinitered/reactotron · GitHub](https://github.com/infinitered/reactotron/blob/master/docs/plugin-redux.md)\n![](https://github.com/infinitered/reactotron/raw/master/docs/images/redux/redux-keys-values.jpg)\n\n[YouTube](https://www.youtube.com/watch?v=UiPo9A9k7xc)\n\n\n","tags":["React Native Dev"],"categories":["React Native"]},{"title":"LeetCode:542. 01 Matrix-DP","url":"/2019/05/23/LeetCode-542-01-Matrix-DP/","content":"Given a matrix consists of 0 and 1, find the distance of the nearest 0 for each cell.\n\n<!--more-->\n \n\n## 题目: [01-matrix](https://leetcode.com/problems/01-matrix/)\nGiven a matrix consists of 0 and 1, find the distance of the nearest 0 for each cell.\n\nThe distance between two adjacent cells is 1.\n```\nExample:\nInput:\n[[0,0,0],\n [0,1,0],\n [1,1,1]]\n\nOutput:\n[[0,0,0],\n [0,1,0],\n [1,2,1]]\n```\n## 分析： \n题目有点没讲明白，这道题，求值为1的cell到最近的0的最短距离。\n\n这道题，我的第一想法是BFS，后来看到DP写法更优雅。[Simple-Java-solution](https://leetcode.com/problems/01-matrix/discuss/101051/Simple-Java-solution-beat-99-(use-DP))\n\n可以发现规律。对matrix[i][j], 如果知道它上下左右四个cell到0的最短距离，那么\n$$matrix[i][j] = min(left, top, right, bottom) + 1$$\n\n1. 遍历matrix矩阵，matrix[i][j]不为0，计算 leftCell 跟 topCell最小值，再加1. \n2. 再倒叙遍历matrix, matrix[i][j]不为0, 先计算rightCell 跟 topCell的最小值，再跟min(left, top)的值比较\n\n```c++\n vector<vector<int>> updateMatrix(vector<vector<int>>& matrix) {\n     if (matrix.empty()) return {};\n     int n = (int)matrix.size(), m = (int)matrix[0].size(), MAX_LEN = 10002;\n     for (int i = 0; i < n; ++i) {\n         for (int j = 0; j < m; ++j) {\n             if (matrix[i][j] != 0) {\n                 int top = (i - 1 < 0) ? MAX_LEN : matrix[i-1][j];\n                 int left = (j - 1 < 0) ? MAX_LEN : matrix[i][j-1];\n                 matrix[i][j] = 1 + min(top, left);\n             }\n         }\n    \n     for (int i = n - 1; i >= 0; i--) {\n         for (int j = m - 1; j >= 0; j--) {\n             if(matrix[i][j] != 0) {\n                 int right = (j + 1 >= m) ? MAX_LEN: matrix[i][j+1];\n                 int bottom = (i + 1 >= n) ? MAX_LEN: matrix[i+1][j];\n                 matrix[i][j] = min(min(right, bottom) + 1, matrix[i][j]);\n             }\n         }\n     }\n     return matrix;\n }\n```\n### 时间复杂度 $o(n^2)$\n### 空间复杂度 $o(1)$\n\n```\nRuntime: 184 ms, faster than 96.53% of C++ online submissions for 01 Matrix.\nMemory Usage: 20.9 MB, less than 91.39% of C++ online submissions for 01 Matrix.\n```\n有人问，为啥要两次遍历？ 不能像下面这么写吗？\n\n```c++\n// 错误的写法\n vector<vector<int>> updateMatrix(vector<vector<int>>& matrix) {\n       if (matrix.empty()) return {};\n       int n = (int)matrix.size(), m = (int)matrix[0].size();\n       for (int i = 0; i < n; ++i) {\n           for (int j = 0; j < m; ++j) {\n               if (matrix[i][j] != 0) {\n                   int top = (i - 1 < 0) ? INT32_MAX : matrix[i-1][j];\n                   int left = (j - 1 < 0) ? INT32_MAX : matrix[i][j-1];\n                   int right = (j + 1 >= m) ? INT32_MAX : matrix[i][j+1];\n                   int bottom = (i + 1 >= n) ? INT32_MAX : matrix[i+1][j];\n                   matrix[i][j] = 1 + min(min(top, left), min(right, bottom));\n               }\n           }\n       }\n       return matrix;\n   }\n```\n问题在于，顺序遍历时候，bottom跟right还没更新为正确的值。比如下图，遍历到matrix[3][0]的时候，matrix[3, 1] 还是1， 而matrix[2][0] == 2; 结果就出错了。\n```\n0 0 0 0 0 \n1 0 0 0 0 \n1 1 1 0 0 \n1 1 1 1 0 \n```\n","tags":["Algorithm"],"categories":["Algorithm"]},{"title":"LeetCode:650. 2 Keys Keyboard","url":"/2019/05/20/LeetCode-650-2-Keys-Keyboard/","content":"\n## 题意: \nnotepad里只有一个'A'字符串。 只能允许两个操作: \n\n1. Copy All: 把notepad里所有的字符串copy\n2. Paste: 复制上次copy的内容\n\n问，最少的步骤（copy & paste) 能生成n个'A'\n\n## 分析\n\n可以发现规律: \n\n\n| n | op | cur char |\n| --- | --- | --- |\n| 2 | c | A |\n|  | p | AA |\n| 3 | c | A |\n|  | p | AA |\n|  | p | AAA |\n| 4 | c | A |\n|  | p | AA |\n|  | c | AA |\n|  | p | AAAA |\n| 5 | c | A |\n|  | p | AA |\n|  | p | AAA |\n|  | p | AAAA |\n|  | p | AAAAA |\n| 6 | c | A |\n|  | p | AA |\n|  | c | AA |\n|  | p | AAAAA |\n|  | p | AAAAAA |\n\n当n为质数， 所需最少步骤为n; 当n不是质数， 所需步骤为 n的质因数相加之和。比如6 = 2 x 3;它所需最小步骤 2+3 = 5\n\n## Solution 1： 质因数分解\n```c++\nint minSteps(int n) {\n    int ans = 0, d = 2;\n    while (n > 1) {\n        while (n % d == 0)  {\n            ans += d;\n            n /= d;\n        }\n        d++;\n    }\n\n    return ans;\n}\n```\n\n## Solution 2: \n\n```c++\nint minSteps(int n) {\n    if (n <= 1) return 0;\n    if (n <= 5) return n;\n    // n>1的操作，前两步骤都是copy & paste, 从'A'变成 'AA', 所以 cur_len == 2, res == 2, 上次copy的字符数量 == 1, 如果下一次要copy & paste, 要一次copy'AA' 2个字符  \n    int cur_len = 2, res = 2, next_cp_num = 2, copy_num = 1;\n    while (cur_len < n) {\n        if ((n - cur_len) % next_cp_num == 0) {\n           // copy + paste\n           cur_len += next_cp_num;\n           copy_num = next_cp_num;\n           // copy + paste; 2 steps\n           res += 2;\n        } else {\n            // paste the characters copied last time \n            cur_len += copy_num;\n            // only paste, 1 step\n            res += 1;\n        }\n\n        // 题目要求：Copy操作要Copy所有字符\n        next_cp_num = cur_len;\n    }\n\n    return res;\n}\n```\n","tags":["Algorithm"],"categories":["Algorithm"]},{"title":"小白读论文:Semantic Image Synthesis with Spatially-Adaptive Normalization","url":"/2019/05/18/Semantic-Image-Synthesis-with-Spatially-Adaptive-Normalization/","content":"[GauGAN: Changing Sketches into Photorealistic Masterpieces](https://www.youtube.com/watch?v=p5U4NgVGAwg&feature=youtu.be) 3月的时候，英伟达发布了一个视频挺火的： 你只要粗略勾勒简单的线条，AI就能生成逼真的写实图片。\n<!--more-->\n[GauGAN: Changing Sketches into Photorealistic Masterpieces](https://www.youtube.com/watch?v=p5U4NgVGAwg&feature=youtu.be) 3月的时候，英伟达发布了一个视频挺火的： 你只要粗略勾勒简单的线条，AI就能生成逼真的写实图片。\n\n![68747470733a2f2f6e766c6162732e6769746875622e696f2f53504144452f2f696d616765732f6f6365616e2e676966](https://camo.githubusercontent.com/a295a79daea9d1dd0cb16b48055607d0f17258b2/68747470733a2f2f6e766c6162732e6769746875622e696f2f53504144452f2f696d616765732f6f6365616e2e676966)\n[GitHub地址](https://github.com/NVlabs/SPADE)\n\n## 任务： \n**学习任务** : 输入semantic segmentation mask, 合/img成 photorealistic images。 \n\n`Semantic Image` 是啥叻？ 直观上理解，如下图： \n\n![31085460.png](/img/7c2b5608-840f-411f-bcd4-024df194b0de/31085460.png)\n\n`Image segmentation`呢？ \n```\nImage segmentation is a computer vision task in which we label specific regions of an image according to what's being shown. \nthe goal of semantic image segmentation is to label each pixel of an image with a corresponding class of what is being represented.\n```\n如下图里的每个像素都被分类归属到不同的class\n![Screen-Shot-2018-05-17-at-9.02.15-PM.png](https://www.jeremyjordan.me/content/images/2018/05/Screen-Shot-2018-05-17-at-9.02.15-PM.png)\n[图片来源](https://www.jeremyjordan.me/semantic-segmentation/#representing)\n\n## SPADE:  SPatially-Adaptive (DE)normalization\n\n### [Normalizaing training sets](https://mooc.study.163.com/learn/2001281003?tid=2001391036&_trace_c_p_k2_=5c39b3d9b1544824a0675bd3f4ed78d5#/learn/content?type=detail&id=2001701046)\n首先，要了解一下Normalization的处理跟好处。\n\n**处理**： 以逻辑回归为例, 它的输入特征$X$,权重$W$, map函数如下\n$$f(x) = \\sum_{i=1}^{n}x_i*w_i$$\n\n1. 先求输入的特征$x$的期望\n$$\\mu=\\frac{1}{n}\\sum_{i=1}^{n}x_i$$\n\n2. 再求$x$的方差\n\n$$\\sigma^2 = \\frac{1}{n} \\sum_{i=1}^{n}(x_i - \\mu)^2$$\n\n3. 再对输入特征做Normalization: \n$$\\frac{x}{\\sigma^2}$$\n\n**好处**是，经过处理的input特征值分布更集中均匀， 如下图的第三个坐标系， \n![826f032b.png](/img/7c2b5608-840f-411f-bcd4-024df194b0de/826f032b.png)\n\n对于损失函数，\n$$J(w, x) = \\frac{1}{m}\\sum_{i=1}^{m}L(\\hat{y}, y)$$\n用梯度下降训练W，B的时候，Normalization后，形状更圆一些，更容易优化。无论初始从哪个位置开始，你都可以用较大的步长,比较容易找到适合的w,b的值，使得J（w,b)的值最小。\n![6ad7add2.png](/img/7c2b5608-840f-411f-bcd4-024df194b0de/6ad7add2.png)\n\n### [Batch Normalization](https://mooc.study.163.com/learn/2001281003?tid=2001391036&_trace_c_p_k2_=f3e0afd9612c439a9f25d08040d39eab#/learn/content?type=detail&id=2001701055) \n[改善深层神经网络：超参数调试、正则化以及优化 - 网易云课堂](https://mooc.study.163.com/learn/2001281003?tid=2001391036&_trace_c_p_k2_=f3e0afd9612c439a9f25d08040d39eab#/learn/content?type=detail&id=2001701055)\n\nBatch Norm不止normailize input feature;也可将normalization process应用在神经网络中的hidden layer上。\n\n![747a0d26.png](/img/7c2b5608-840f-411f-bcd4-024df194b0de/747a0d26.png)\n\n比如对隐藏层$a^{[2]}$的输出进行正则化处理，加速下一层的参数$w^{[3]}$,$b^{[3]}$的训练速度。比如$a^{[2]}$层的神经单元分别是 $z^{(1)}, z^{(2)}...z^{(m)}$\n\n对它的处理是\n1. 求期望:\n$$\\mu = \\frac{1}{m}\\sum_{i=1}^{m}z_i$$\n2. 求方差:\n$$\\sigma^2 = \\frac{1}{m}\\sum_{i=1}^{m}(z_i - u)^2$$\n3. norimal\n$$z_i = \\frac{z_i-u}{\\sqrt{\\sigma^2 + \\varepsilon}}$$\n加上$\\varepsilon$是防止$\\sigma^2$为0\n4. 加上 $\\gamma$ 跟 $\\beta$； `scale and shift the normalized value`\n$$\\hat{z} = \\gamma z_i + \\beta$$\n \n\n$\\gamma$ 跟 $\\beta$ 也是参数，跟`w, b`一样在训练过程中迭代学习。 神经网络中他们也常在激活层之前进行Batch Normalization处理。 \n\n### (Spatially-Adaptive normalization)SPADE\n这篇论文提出自己的normalization思路，$h^i$是 i-th层的激活函数输出。\n正则化处理:\n$$\\gamma_{c, y, x}^i (m)\\frac{h_{n, c, y, x}^i - \\mu_c^i}{\\sigma_c^i} + \\beta_{c, y, x}^{i}(m)$$\n\nc: $c \\epsilon C^i, C^i$是i-th层的channel个数\nx: $x \\epsilon W^i, W^i$是i-th层的宽\ny: $y \\epsilon H^i$, 高\nm: segmentation mask m\n$\\gamma_{c, y, x}^i$跟$\\beta_{c, y, x}^{i}$ 是函数，用卷积网络实现\n\n**结构图**： \n\n![2f3fe4e8.png](/img/7c2b5608-840f-411f-bcd4-024df194b0de/1ec7011c.png)\n- `3x3-Conv-k`是 3x3卷积层，有k个卷积filter, filter size 3x3\n- `ReLU` 激活函数 \n- 这里的`Resize`用的是`nearest-neighbor downsampling`，不细说了。\n\n它的处理流程是这样，对sematic image 进行resize、卷积、ReLU激活处理， 即$\\gamma_{c, y, x}^i(m)$跟$\\beta_{c, y, x}^{i}(m)$， 乘、加上`Batch Normalization`的输出数据$\\frac{h_{n, c, y, x}^i - \\mu_c^i}{\\sigma_c^i}$ ， \n![ab4c46cb.png](/img/7c2b5608-840f-411f-bcd4-024df194b0de/ad9094aa.png)\n\n比起传统Batch Normal,SPADE的$\\gamma_{c, y, x}^i(m)$跟$\\beta_{c, y, x}^{i}(m)$是对sematic image做卷积操作，它在normalization过程中保存更多semantic的信息。论文中也认为这是SPADE效果更好的原因。\n\n#### 相关代码： \n`normalization.py`\n\n```python\n//  用传统的normalization method正则化激活函数输出\n  if param_free_norm_type == 'instance':\n      self.param_free_norm = nn.InstanceNorm2d(norm_nc, affine=False)\n  elif param_free_norm_type == 'syncbatch':\n      self.param_free_norm = SynchronizedBatchNorm2d(norm_nc, affine=False)\n  elif param_free_norm_type == 'batch':\n      self.param_free_norm = nn.BatchNorm2d(norm_nc, affine=False)\n  else:\n      raise ValueError('%s is not a recognized param-free norm type in SPADE'\n                             % param_free_norm_type)\n\n \n```\n```python\n   // 构建gamma,beta函数, 卷积层实现\n   self.mlp_gamma = nn.Conv2d(nhidden, norm_nc, kernel_size=ks, padding=pw)\n   self.mlp_beta = nn.Conv2d(nhidden, norm_nc, kernel_size=ks, padding=pw)\n```\n\n```python\n  def forward(self, x, segmap):\n\n        # Part 1. generate parameter-free normalized activations\n        normalized = self.param_free_norm(x)\n\n        # ✨✨✨ Part 2. produce scaling and bias conditioned on semantic map\n        segmap = F.interpolate(segmap, size=x.size()[2:], mode='nearest')\n        actv = self.mlp_shared(segmap)\n        gamma = self.mlp_gamma(actv)\n        beta = self.mlp_beta(actv)\n\n        # apply scale and bias\n        out = normalized * (1 + gamma) + beta\n\n        return out\n```\n\n\n## 模型架构 GANs\n\nGANs由两部分组成： \n\n1. generator：负责合成写实风格的图片\n2. discriminator: 负责找茬。认出这是张合成图片， 而不是真实的照片（or 写实图片）\n### generator 架构\n\n首先\n\n![d3313a9e.png](/img/7c2b5608-840f-411f-bcd4-024df194b0de/d3313a9e.png)\n\n这幅图里好多SPADE ResBlk啊，啥是SPADE ResBlk? 下面是它的结构图： \n\n![630b2d2a.png](/img/7c2b5608-840f-411f-bcd4-024df194b0de/630b2d2a.png)\n\n- `3x3-Conv-k`是 3x3卷积层，有k个卷积filter, filter size 3x3\n- `ReLU` 激活函数\n- SPADE激活见上文分析\n\n\n那`ResBlk`呢？ \n这要从大名鼎鼎的残差网络说起 [Residual block](https://mooc.study.163.com/learn/2001281004?tid=2001392030&_trace_c_p_k2_=5c60eb2c1e0d4adbb2516471e9ebb431#/learn/content?type=detail&id=2001728692) （强烈推荐Andrew Ng公开课; 弄明白几个点： 1. Residual Block要解决什么问题;  2. 它的设计;  3. 为啥有效。 再回来看SPADE ResBlk)\n\n![fd021761.png](/img/7c2b5608-840f-411f-bcd4-024df194b0de/fd021761.png)\n```python\n    def __init__(self, fin, fout, opt):\n        super().__init__()\n        # Attributes\n        self.learned_shortcut = (fin != fout)\n        fmiddle = min(fin, fout)\n\n        # create conv layers\n        self.conv_0 = nn.Conv2d(fin, fmiddle, kernel_size=3, padding=1)\n        self.conv_1 = nn.Conv2d(fmiddle, fout, kernel_size=3, padding=1)\n        if self.learned_shortcut:\n            self.conv_s = nn.Conv2d(fin, fout, kernel_size=1, bias=False)\n\n        # apply spectral norm if specified\n        if 'spectral' in opt.norm_G:\n            self.conv_0 = spectral_norm(self.conv_0)\n            self.conv_1 = spectral_norm(self.conv_1)\n            if self.learned_shortcut:\n                self.conv_s = spectral_norm(self.conv_s)\n\n        # ✨✨✨ define normalization layers\n        spade_config_str = opt.norm_G.replace('spectral', '')\n        self.norm_0 = SPADE(spade_config_str, fin, opt.semantic_nc)\n        self.norm_1 = SPADE(spade_config_str, fmiddle, opt.semantic_nc)\n        if self.learned_shortcut:\n            self.norm_s = SPADE(spade_config_str, fin, opt.semantic_nc)\n```\n## Discriminator \n\ndiscriminator架构图。 (segmentation image,  image)作为输入， 任务是识别image是不是假的。\n![c5347e81.png](/img/7c2b5608-840f-411f-bcd4-024df194b0de/c5347e81.png)\n\nimage encoder将图片encode生成均值向量跟方差向量， 计算出noise input输入给generator, segmentation mask也会通过SPADE ResBlks输入给generator。 generator生成image跟segmentation image contact后，再输入给discriminator, discriminator来辨别真伪。 \n![f4341bd9.png](/img/7c2b5608-840f-411f-bcd4-024df194b0de/f4341bd9.png)\n\n### Training Data \n\n成对的segmentation masks跟真实图片。 (segmentation mask, real image) \n\n### Test \n\n1.安装:\n\n```sh\ngit clone https://github.com/NVlabs/SPADE.git\ncd SPADE/\n```\n2.这个项目依赖PyTorch 1.0跟python3.0+. 还依赖Synchronized-BatchNorm-PyTorch仓库。\n\n```\n// SPADE目录下\ncd models/networks/\ngit clone https://github.com/vacancy/Synchronized-BatchNorm-PyTorch\ncp -rf Synchronized-BatchNorm-PyTorch/sync_batchnorm .\ncd ../../\n```\n3.用PyCharm打开这个项目, Preference -> Project Interpreter -> Project -> Project Interpreter; 选python3.+的解释器, PyCharm会提示安装依赖的package。依赖包安装好后，如下图: \n\n![ed349b19.png](/img/7c2b5608-840f-411f-bcd4-024df194b0de/ed349b19.png)\n\n4.下载提前训练好的模型\n[checkpoints.tar.gz - Google 云端硬盘](https://drive.google.com/file/d/12gvlTbMvUcJewQlSEaZdeb2CdOB-b8kQ/view)\n\n```\ncd checkpoints\ntar xvf checkpoints.tar.gz\ncd ../\n\nls\n// checkpoints目录如下:\nade20k_pretrained     checkpoints.tar.gz    cityscapes_pretrained coco_pretrained\n```\n5.编辑Configuration, 运行test.py脚本。\n```sh\npython test.py --name [type]_pretrained --dataset_mode [dataset] --dataroot [path_to_dataset]\n```\n\n参数： \n- `[type]_pretrained` 先渲染好的模型，coco_pretrained， ade20k_pretrained， cityscapes_pretrained中任选一个。\n- `[dataset]` 填coco, ade20k, 或者cityscapes \n- `[path_to_dataset]` 数据，比如./datasets/coco_stuff\n\n比如，我的参数: \n```\n--name\ncoco_pretrained\n--dataset_mode\ncoco\n--dataroot\n./datasets/coco_stuff\n--gpu_ids\n-1\n```\n输出的路径： `./results/[type]_pretrained/` 我的是`./results/coco_pretrained/`\n\n![412b71cb.png](/img/7c2b5608-840f-411f-bcd4-024df194b0de/412b71cb.png)\n\n这几张图片真是看的我有点失望，再看看下图论文的图片。 果然论文的图片都是精挑细选, 套路满满。\n\n![b037261d.png](/img/7c2b5608-840f-411f-bcd4-024df194b0de/b037261d.png)\n\n- [An overview of semantic image segmentation.](https://www.jeremyjordan.me/semantic-segmentation/)","tags":["Image Segment"],"categories":["Neural Network"]},{"title":"React Native调试:Expo + WebStorm","url":"/2019/05/14/React-Native调试-Expo-WebStorm/"},{"title":"The Weights of the YOLO Neural Network","url":"/2019/05/12/The-Weights-of-the-YOLO-Neural-Network/","content":"\n## Load Weights\n\nFirst, see this C library function:  \n```c\nsize_t fread ( void * ptr, size_t size, size_t count, FILE * stream );\n```\n**Parameters**\n- **ptr** − Pointer to a block of memory with a size of at least (size*count) bytes, converted to a void*.\n\n- **size** − This is the size in bytes of each element to be read.\n\n- **count** − This is the number of elements, each one with a size of size bytes.\n\n- **stream** − This is the pointer to a FILE object that specifies an input stream.\n\nThen, in the `load_weights_upto` function in `parser.c`, it begins to load weights for layers from xxx.weights. \n```c\nvoid load_weights_upto(network *net, char *filename, int start, int cutoff) {\n ...\n     // Begin to load weights for layers\n    for(i = start; i < net->n && i < cutoff; ++i){\n        layer l = net->layers[i];\n        if (l.dontload) continue;\n        if(l.type == CONVOLUTIONAL || l.type == DECONVOLUTIONAL){\n            load_convolutional_weights(l, fp);\n        }\n  ...\n}\n```\n\n### Convolutional Layer\nIn `load_convolutional_weights` function, it loads values of biases for filters. One bias for one filter. \n\n```c\n    fread(l.biases, sizeof(float), l.n, fp);\n```\n`l.n` is the number of filter in this layer. \n\nAssign the values to scales, rolling_mean and rooling_variance \n```\n if (l.batch_normalize && (!l.dontloadscales)){\n        fread(l.scales, sizeof(float), l.n, fp);\n        fread(l.rolling_mean, sizeof(float), l.n, fp);\n        fread(l.rolling_variance, sizeof(float), l.n, fp);\n```\n        \nAnd load weights for filters in this layer. The default value of `l.groups` is 1.\n```c\n    int num = l.c/l.groups*l.n*l.size*l.size;\n    fread(l.weights, sizeof(float), num, fp);\n```\n\n`l.c` is input channel. The number of input channel equal to the number of channel of a filter in this layer. Thus, `l.size` is the size of a filter.\n\nFor a 3x3x3 filter (size=3, channel=3), it has 3x3x3=27 parameters as follow  \n\n![-w208](/img/15576478323378/15576531132966.jpg)\n\nIf a convolutional layer has 3 such filters, it will have 3 values for bias, 3x3x3x3 .Its weight layout in memory is like this: \n\n![-w746](/img/15576478323378/15576535368751.jpg)\n\n## Write Weights \n\n`save_weights_upto` and `save_convolutional_weights`functions show how to save weights into a xxx.weights file. It's just a reverse process. \n\n```c\nvoid save_convolutional_weights(layer l, FILE *fp)\n{\n    if(l.binary){\n        //save_convolutional_weights_binary(l, fp);\n        //return;\n    }\n    int num = l.nweights;\n    fwrite(l.biases, sizeof(float), l.n, fp);\n    if (l.batch_normalize){\n        fwrite(l.scales, sizeof(float), l.n, fp);\n        fwrite(l.rolling_mean, sizeof(float), l.n, fp);\n        fwrite(l.rolling_variance, sizeof(float), l.n, fp);\n    }\n    fwrite(l.weights, sizeof(float), num, fp);\n}\n```\n\n```\nsize_t fwrite ( const void * ptr, size_t size, size_t count, FILE * stream );\n\n```\n\n**Parameters**\n- **ptr**\nPointer to the array of elements to be written, converted to a const void*.\n- **size**\nSize in bytes of each element to be written.\nsize_t is an unsigned integral type.\n- **count**\n Number of elements, each one with a size of size bytes.\nsize_t is an unsigned integral type.\n- **stream**\nPointer to a FILE object that specifies an output stream.\n","tags":["YOLO"],"categories":["Neural Network"]},{"title":"LeetCode:237. Delete Node in a Linked List","url":"/2019/05/12/LeetCode-237-Delete-Node-in-a-Linked-List/","content":"\nWrite a function to delete a node (except the tail) in a singly linked list, given only access to that node.\n\n<!--more-->\n\n## [题目](https://leetcode.com/problems/delete-node-in-a-linked-list/)\n\nWrite a function to delete a node (except the tail) in a singly linked list, given only access to that node.\n\nGiven linked list -- head = [4,5,1,9], which looks like following:\n\n![237_example.png](https://assets.leetcode.com/uploads/2018/12/28/237_example.png)\n\n## 分析： \n\n如果我们有一个如下的Linked List，想删除值是5的节点. 这道题要求 ，`only access to that node`。\n\n```\n4 -> 5 -> 1\n```\n\n![48d29b19.png](/img/f394f304-a25b-4128-bcaa-779a974c8c4a/48d29b19.png)\n留意图中，要删除的对象的地址是0x7ff07ae00090\n\n```c++\n    void deleteNode(ListNode* node) {\n        *node = *(node->next);\n    }\n```\n\n`*node`对node指针取内容，返回是一个对象, 对象地址0x7ff07ae00090\n\n![f94bba4f.png](/img/f394f304-a25b-4128-bcaa-779a974c8c4a/f94bba4f.png)\n\n`*node->next`对node指针取内容，返回是一个对象， 对象地址0x7ff07ae000a0\n\n![69411ad8.png](/img/f394f304-a25b-4128-bcaa-779a974c8c4a/69411ad8.png)\n\n执行\n```\n*node = *(node->next);\n```\n结果如下： \n\n![83d8670d.png](/img/f394f304-a25b-4128-bcaa-779a974c8c4a/83d8670d.png)\n\nnode指针所执行的对象地址不变，但是对象内容发生变化。就像三个房子，位置没变， 但是第三个房子里的住户搬到了第二个房子里住了。 node指针指向的对象的地址依旧是0x7ff07ae00090, val不再是5而是1， next指针也执向NULL。但是我们也丢失了对0x7ff07ae000a0对象的指针引用。\n\n![e8798a20.png](/img/f394f304-a25b-4128-bcaa-779a974c8c4a/e8798a20.png)","tags":["Algorithm"]},{"title":"LeetCode  Flatten a Multilevel Doubly Linked List","url":"/2019/05/12/LeetCode-Flatten-a-Multilevel-Doubly-Linked-List/","content":"Flatten the list so that all the nodes appear in a single-level, doubly linked list. You are given the head of the first level of the list.\n\n<!--more-->\n\n题目： [430. Flatten a Multilevel Doubly Linked List]([Loading...](https://leetcode.com/problems/flatten-a-multilevel-doubly-linked-list/)\n)\n\n分析： \n![da80f35a.png](/img/ed6ee62a-3dcb-4189-9404-14b91692d436/da80f35a.png)\n\n 当遇到有child的Node，先用`*next`存cur->next; 把cur->next指针指向child, child->pre指向cur； 接着以child为起点找到该曾最后一个Node，让它指向`*next`的节点。 接着以原来的child为cur Node重新开始一轮。 \n\n```c++\n    class Node {\n    public:\n        int val;\n        Node *prev;\n        Node *next;\n        Node *child;\n\n        Node() {}\n\n        Node(int _val, Node *_prev, Node *_next, Node *_child) {\n            val = _val;\n            prev = _prev;\n            next = _next;\n            child = _child;\n        }\n    };\n\n    Node *flatten(Node *head) {\n        Node *cur = head;\n        while (cur) {\n            if (cur->child) {\n                Node *next = cur->next;\n                cur->next = cur->child;\n                cur->child = nullptr;\n                cur->next->prev = cur;\n\n                // iter the children \n                Node *p = cur->next;\n                while (p->next) p = p->next;\n                  \n                p->next = next;\n                if (next) next->prev = p;\n            }\n            cur = cur->next;\n        }\n\n        return head;\n    }\n```\n\n时间复杂度： $O(n)$","tags":["Algorithm"],"categories":["Algorithm"]},{"title":"The Architecture of YOLO-Tiny Neural Network","url":"/2019/05/08/The-Implementation-of-Convolutional-and-MaxPool-layer/","content":" Now, let's see how Darknet construct a nerual network. See at `detector.c` `test_detector` function, it construct a network by parsing  the `xxx.cfg` file and `xxx.weights` file. In my case, they are yolo3-tiny.cfg and yolo3-tiny.weights \n <!-- more --> \n\n\nI am trying to understand [Darknet source code](https://pjreddie.com/darknet/yolov2/) that implements YOLO algorithm. First, I run the detector.\n\n```\n./darknet detect cfg/yolov3-tiny.cfg yolov3-tiny.weights data/dog.jpg\n```\n## Parse the argumenets \n\nIn `main` function, it goes to function `test_detector` according to the first argument`detect`. \n\n```c\nif (0 == strcmp(argv[1], \"detect\")){\n   float thresh = find_float_arg(argc, argv, \"-thresh\", .5);\n   char *filename = (argc > 4) ? argv[4]: 0;\n   char *outfile = find_char_arg(argc, argv, \"-out\", 0);\n   int fullscreen = find_arg(argc, argv, \"-fullscreen\");\n   test_detector(\"cfg/coco.data\", argv[2], argv[3], filename, thresh, .5, outfile, fullscreen);\n   }   \n```\n\nHere is the architecture of neural network defined by yolov3-tiny.cfg\n\n```\n\nlayer     filters    size              input                output\n    0 conv     16  3 x 3 / 1   416 x 416 x   3   ->   416 x 416 x  16  0.150 BFLOPs\n    1 max          2 x 2 / 2   416 x 416 x  16   ->   208 x 208 x  16\n    2 conv     32  3 x 3 / 1   208 x 208 x  16   ->   208 x 208 x  32  0.399 BFLOPs\n    3 max          2 x 2 / 2   208 x 208 x  32   ->   104 x 104 x  32\n    4 conv     64  3 x 3 / 1   104 x 104 x  32   ->   104 x 104 x  64  0.399 BFLOPs\n    5 max          2 x 2 / 2   104 x 104 x  64   ->    52 x  52 x  64\n    6 conv    128  3 x 3 / 1    52 x  52 x  64   ->    52 x  52 x 128  0.399 BFLOPs\n    7 max          2 x 2 / 2    52 x  52 x 128   ->    26 x  26 x 128\n    8 conv    256  3 x 3 / 1    26 x  26 x 128   ->    26 x  26 x 256  0.399 BFLOPs\n    9 max          2 x 2 / 2    26 x  26 x 256   ->    13 x  13 x 256\n   10 conv    512  3 x 3 / 1    13 x  13 x 256   ->    13 x  13 x 512  0.399 BFLOPs\n   11 max          2 x 2 / 1    13 x  13 x 512   ->    13 x  13 x 512\n   12 conv   1024  3 x 3 / 1    13 x  13 x 512   ->    13 x  13 x1024  1.595 BFLOPs\n   13 conv    256  1 x 1 / 1    13 x  13 x1024   ->    13 x  13 x 256  0.089 BFLOPs\n   14 conv    512  3 x 3 / 1    13 x  13 x 256   ->    13 x  13 x 512  0.399 BFLOPs\n   15 conv    255  1 x 1 / 1    13 x  13 x 512   ->    13 x  13 x 255  0.044 BFLOPs\n   16 yolo\n   17 route  13\n   18 conv    128  1 x 1 / 1    13 x  13 x 256   ->    13 x  13 x 128  0.011 BFLOPs\n   19 upsample            2x    13 x  13 x 128   ->    26 x  26 x 128\n   20 route  19 8\n   21 conv    256  3 x 3 / 1    26 x  26 x 384   ->    26 x  26 x 256  1.196 BFLOPs\n   22 conv    255  1 x 1 / 1    26 x  26 x 256   ->    26 x  26 x 255  0.088 BFLOPs\n   23 yolo\n```\nNow, let's see how Darknet construct a nerual network. See  `detector.c` `test_detector` function, it construct a network by parsing  the `xxx.cfg` file and `xxx.weights` file. In my case, they are yolo3-tiny.cfg and yolo3-tiny.weights \n\n\n## Parse the configuration file\n\n### Sections in the file \n\nparse the yolo.cfg file here \n\n```c\nlist *read_cfg(char *filename)\n{\n    FILE *file = fopen(filename, \"r\");\n    if(file == 0) file_error(filename);\n    char *line;\n    int nu = 0;\n    list *options = make_list();\n    section *current = 0;\n    while((line=fgetl(file)) != 0){\n        ++ nu;\n        strip(line);\n        switch(line[0]){\n            case '[':\n                current = malloc(sizeof(section));\n                list_insert(options, current);\n                current->options = make_list();\n                current->type = line;\n                break;\n            case '\\0':\n            case '#':\n            case ';':\n                free(line);\n                break;\n            default:\n                if(!read_option(line, current->options)){\n                    fprintf(stderr, \"Config file error line %d, could parse: %s\\n\", nu, line);\n                    free(line);\n                }\n                break;\n        }\n    }\n    fclose(file);\n    return options;\n}\n```\n\n\nfor exmaple: \n\n```js\n[net]              // '[' is a tag for a section, the type of current setion is '[net]'\n# Testing          // ignore\nbatch=1         \nsubdivisions=1\n# Training\n# batch=64\n# subdivisions=2\nwidth=416\nheight=416\nchannels=3\nmomentum=0.9\ndecay=0.0005\nangle=0\nsaturation = 1.5\nexposure = 1.5\nhue=.1\n                 // ignore\nlearning_rate=0.001\n...\n\n[convolutional]    // [convoltional] \n...\n\n[maxpool]      // [maxpool] \n\n...\n[yolo]\n...\n\n[route]\n...\n\n```\n\n#### `[net]`\n\nIn section '[net]', `batch=1` is a option stored in `kvp`(option_list.c line 70) struct. Its key is batch, value is 1. Then this kvp object will be inserted into a node list (see it at option_list.c line76 & list.c line 40).\nAfter parsing the yolo3-tiny.cfg file, We will get a section list; its size is 25. Because there are 25 \\'[\\' tags in yolo3-tiny.cfg\n\n\nIn `parse_network_cfg` function, it parses the `[net]` section to get the params for the whole network. \n\n```c\nnetwork *parse_network_cfg(char *filename)\n{\n    list *sections = read_cfg(filename);\n    node *n = sections->front;\n    if(!n) error(\"Config file has no sections\");\n    network *net = make_network(sections->size - 1);\n    // other codes ...\n    \n}\n```\n\n#### `[convolutional]`\n\nThen parse the different sections. \n\n```c\n        s = (section *)n->val;\n        options = s->options;\n        layer l = {0};\n        LAYER_TYPE lt = string_to_layer_type(s->type);\n        if(lt == CONVOLUTIONAL){\n            l = parse_convolutional(options, params);\n        }else if(lt == DECONVOLUTIONAL){\n            l = parse_deconvolutional(options, params);\n        }else if(lt == LOCAL){\n            l = parse_local(options, params);\n        }else if(lt == ACTIVE){\n            l = parse_activation(options, params);\n        // other code here ...\n       \n```\n\n\nFor the first `[convolutional]` section in the yolo3-tiny.cfg as follow, the darknet will construct a `convolutional_layer` using thess params (see function `parse_convolutional` in parse.c and  function `make_convolutional_layer` in convolutional_layer.c)\n\n```js\n[convolutional]\nbatch_normalize=1\nfilters=16\nsize=3\nstride=1\npad=1\nactivation=leaky\n```\n\nIn this layer, there are 16 filters; the size of each filter is 3X3Xnum_channel; what is num_channel? well, `the number of channels in a filter must match the number of channels in input volume`, so here num_channel is equal to 3. The stride value for filters is 1, padding value is 1. \n\n\nLet's see how darknet calculate the output size of convolutional_layer by the input size(`l.h`) and filter params (`l.size`, `l.pad`, `l.stride`). There is a formula that shows how size of input volume relates to the one of output volume\n \n\n```c\n\nint convolutional_out_height(convolutional_layer l)\n{\n    return (l.h + 2*l.pad - l.size) / l.stride + 1;\n}\n\nint convolutional_out_width(convolutional_layer l)\n{\n    return (l.w + 2*l.pad - l.size) / l.stride + 1;\n}\n\n```\n\n As for yolo3-tiny.cfg, for this first convolutional_layer, its input size is 416 x 416 and channel is 3. So its ouput height is (416+2x1 - 3)/1 + 1 = 416, its output width is 416 too. `What about its output channel? It equals to the number of filters (16)`. \n \n ```c\n \n  l.out_c = n    // in func make_convolutional_layer\n  \n ```\n So its output volume size is 416 X 416 X 16.\n \n \n ![02b028d9.png](/img/995676c2-24ed-4165-8224-0bc01148242a/9b76325f.png)\n \n For a beginner, I strongly recommend these courses: [Strided Convolutions - Foundations of Convolutional Neural Networks \\| Coursera](https://www.coursera.org/lecture/convolutional-neural-networks/strided-convolutions-wfUhx) and  [One Layer of a Convolutional Network - Foundations of Convolutional Neural Networks \\| Coursera](https://www.coursera.org/lecture/convolutional-neural-networks/one-layer-of-a-convolutional-network-nsiuW)\n  \nNow, we have 16 filters that are 3X3X3 in this layer, `how many parameters does this layer have`?  Each filter is a 3X3X3 volume, so it's 27 numbers tp be learned, and then plus the bias, so that was the b parameters. it's 28 parameters. There are 16 filters so that would be 448 parameters to be learned in this layer. \n \n```c\n\n    // c: the number of channels; n: the number of filters; \n    // size: the number of filter width or height; groups: default is 1 \n    l.weights = calloc(c/groups*n*size*size, sizeof(float));\n    l.weight_updates = calloc(c/groups*n*size*size, sizeof(float));\n\n    l.biases = calloc(n, sizeof(float));\n    l.bias_updates = calloc(n, sizeof(float));\n\n    l.nweights = c/groups*n*size*size;\n    l.nbiases = n;\n\n```\n \n \n#### Activation \n \n In this convolution layer, it choose leaky ReLU as activation function. The function is defined as follow  where α is a small constant.\n \n $$\nf(x)=\\begin{cases}\nαx,\\quad x\\leq 0 \\\\\\\\ \nx,\\quad x>0\n\\end{cases}\n$$\n\n \n Still, I recommend this course for a beginner. [Activation functions - Shallow neural networks \\| Coursera](https://www.coursera.org/lecture/neural-networks-deep-learning/activation-functions-4dDC1)\n\n \nThere are `forward_activation_layer` and `backward_activation_layer` in Darknet. Both of them handle batch inputs. \n\nFor forward activation layer, leaky_activate is to computes f(x)\n\n ```c\n static inline float leaky_activate(float x){return (x>0) ? x : .1*x;}\n ```\n For backward activation layer, leaky_gradient returns the slop of the function \n\n```c\nstatic inline float leaky_gradient(float x){return (x>0) ? 1 : .1;}\n```\n\n\n \n \n#### [maxpool]\n \n Maxpool layer is used to reduce the size of representation to speed up computation as well as to make some of the features it detects a bit more robust. Look at the `tiny-yolo3.cfg`\n \n ```js\n [maxpool]\nsize=2\nstride=2\n\n ```\n ```c\n maxpool_layer make_maxpool_layer(int batch, int h, int w, int c, int size, int stride, int padding)\n{\n    maxpool_layer l = {0};\n    l.type = MAXPOOL;\n    l.batch = batch;\n    l.h = h;\n    l.w = w;\n    l.c = c;         // output channel equals to input one \n    l.pad = padding;  // default value is size - 1\n    l.out_w = (w + padding - size)/stride + 1;\n    l.out_h = (h + padding - size)/stride + 1;\n    l.out_c = c;\n    l.outputs = l.out_h * l.out_w * l.out_c;\n    // other codes ...\n    return l;\n}\n\n \n ```\n This `[maxpool]` sections comes after the `[convolutional]` section. Its input size(416 x 416 x 16) equal to the ouput size of the former layer (416 x 416 x  16). The filter size is 2 x 2, stride is 2. Each time, the filter would move 2 steps, for a 4x4x1 input volume, its output is 2x2x1 volume. \n![e65fb56d.png](/img/995676c2-24ed-4165-8224-0bc01148242a/e65fb56d.png)\n```\n9 == max(1, 3, 2, 9)\n2 == max(2, 1, 1, 1)\n6 == max(1, 3, 5, 6)\n3 == max(2, 3, 1, 2)\n```\nSo in this layer, its ouput width equals to (int)((416+ 1 - 2)/2 + 1), 208. And the number of its output channels equals to the number of input channels. Now, we know its output volume size is 208 X 208 X 16. There is no parameter to be learned. \n\n**input volume size**: \n\n$$ n_H . n_W . n_c$$\n\n  $n_c$ : the number of channels\n\n**output volume size**: \n\n$$(\\frac{n_H + pading-f}{stride} + 1) . (\\frac{n_W + padding-f}{stride} +1) . n_c$$\n \n$f$: the width or height of a filter\n \n [Pooling Layers - Foundations of Convolutional Neural Networks \\| Coursera](https://www.coursera.org/lecture/convolutional-neural-networks/pooling-layers-hELHk)\n \n #### Why does 1 x 1 convolution do? \n \n [Networks in Networks and 1x1 Convolutions - Deep convolutional models: case studies \\| Coursera](https://www.coursera.org/lecture/convolutional-neural-networks/networks-in-networks-and-1x1-convolutions-ZTb8x)\n \n \n For example, in this picture, the number of input volume channels ,192, has gotten too big, we can shrink it to a 28x28x32 dimension volume using 32 filters that are 1x1x192. So this is a way to shrink the number of channels .\n \n ![a085e0e4.png](/img/995676c2-24ed-4165-8224-0bc01148242a/a085e0e4.png)\n \n \n In YOLO, it implements fully connected layer by two convolutional layer. \n \n ```\n[convolutional]\nbatch_normalize=1\nfilters=256\nsize=3\nstride=1\npad=1\nactivation=leaky\n\n[convolutional]\nsize=1\nstride=1\npad=1\nfilters=255\nactivation=linear\n ```\n \n [Convolutional Implementation of Sliding Windows - Object detection \\| Coursera](https://www.coursera.org/lecture/convolutional-neural-networks/convolutional-implementation-of-sliding-windows-6UnU4)\n \n","tags":["YOLO"],"categories":["Neural Network"]},{"title":"LeetCode Unique Paths 1-2","url":"/2019/05/08/Leetcode-Unique-Paths-1-2/","content":"Leetcode Unique Paths 1-2 \n<!-- more --> \n\n# Unique Paths 1-2\n\n## 题目1： [Unique Paths 1](https://leetcode.com/problems/unique-paths/)\n\n![e2ca2848.png](/img//c5619f25-13a6-4e38-b7f8-d87ff624f5b5/e2ca2848.png)\n\n### 动态规划解题步骤要点: \n\n1. 找到最优解的结构\n2. 递归方案\n3. bottom-up 或者 top-down方式求最优解\n4. 优化，空间换时间\n\n### 分析\n\n这道题很简单。\n1. 定义一个 mxn 的二维数组grides[m][n]， 对应格子地图。对应途中grides[2][6]\n\n![e594b650.png](/img//c5619f25-13a6-4e38-b7f8-d87ff624f5b5/e594b650.png)\n比如，我们想知道从(0,0)到(1, 2)有几条路。根据题目要求，只能往右走或者下走一个格子。\n我们先看从(1, 1)到（1，2），两种走法： \n- (2, 0) -> (1, 2)\n- (1, 1) -> (1, 2)\n\n再看从(0, 0)到(2， 0) 只有一条路: (0, 0) -> (1, 1) -> (2, 0)； grides[2][0] = 1。\n\n从(0, 0)格子到(1,1)格子，有两种路: \n- (0,0) -> (0, 1)-> (1, 1)\n- (0,0) -> (1, 0)-> (1, 1)\n那么grides(1, 1) = 2. \n \n很容易发现规律， grids[m][n] = grids[m - 1][n] + grides[m][n -1]; 可用递归求解。但是纯碎的递归有很多重复计算。 如下图的递归树： \n![72a3d4ef.png](/img//c5619f25-13a6-4e38-b7f8-d87ff624f5b5/72a3d4ef.png)\n所以我们引入一个record数组，记录已经计算的结果，省去重复计算。\n\n时间复杂度: \no(m* n)\n\n```c++\nint inner_path(int i, int j, int m, int n, vector<vector<int>>& record) {\n    if (i < 0 || j < 0) {\n        return 0;\n    }\n\n    if (record[i][j]) {\n        return record[i][j];\n    }\n\n    if ((i == 0) && (j == 0)) {\n        return 1;\n    }\n\n    record[i][j] = inner_path(i-1, j, m, n, record) + inner_path(i, j-1, m, n, record);\n    return record[i][j];\n}\n\nint uniquePaths(int m, int n) {\n    vector<vector<int>> res(m, vector<int>(n, 0));\n    return inner_path(m-1, n-1, m, n, res);\n}\n```\n\n### [Unique Paths 2](https://leetcode.com/problems/unique-paths-ii/)\n\n分析： \n跟Unique Paths 1比起来，多了障碍物。如果(i, j)是障碍物，那么grid(i, j) = 0, 表示我们无法经由(i, j) 到达终点。\n\n\n\n```c++\nint path_helper(int i, int j, int m, int n, vector<vector<int>>& record, vector<vector<int>> &obstacleGrid) {\n        if (i < 0 || j < 0 || obstacleGrid[i][j] == 1) {\n            return 0;\n        }\n\n        if (record[i][j]) {\n            return record[i][j];\n        }\n\n        if ((i == 0) && (j == 0)) {\n            return 1;\n        }\n\n        record[i][j] = path_helper(i - 1, j, m, n, record, obstacleGrid) + path_helper(i, j - 1, m, n, record, obstacleGrid);\n        return record[i][j];\n    }\n\n    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {\n        if (obstacleGrid.empty()) return 0;\n        int m = (int)obstacleGrid.size();\n        int n = (int)obstacleGrid[0].size();\n\n        vector<vector<int>> res(m, vector<int>(n, 0));\n        return path_helper(m - 1, n - 1, m, n, res, obstacleGrid);\n    }\n```\n\n自底向上的写法： \n\n```c++\n   int uniquePathsWithObstacles(vector<vector<int>>& grid) {\n        int rows = grid.size();\n        if(rows == 0) return 0;\n        int cols = grid[0].size();\n        vector<vector<long>> res(rows+1, vector<long>(cols+1, 0));\n        for(int i=rows-1; i>=0;i--){\n            for(int j=cols-1; j>=0;j--){\n                if(grid[i][j] == 1) res[i][j] = 0;\n                else if(i == rows-1 && j == cols-1) res[i][j] = 1;\n                else res[i][j] = res[i][j+1] + res[i+1][j];\n            }\n        }\n        return res[0][0];\n    }\n```","tags":["Algorithm"],"categories":["Algorithm"]},{"title":"LeetCode 959. Regions Cut By Slashes 笔记","url":"/2019/04/23/Leetcode-959-Regions-Cut-By-Slashes/","content":"\n题目：https://leetcode.com/problems/regions-cut-by-slashes/description/\n\n## Solution1: DFS \n\nTime Complexity::  $O(n^2)$\n\n### 分析： \n[这个神奇的思路](https://leetcode.com/problems/regions-cut-by-slashes/discuss/205674/C++-with-picture-DFS-on-upscaled-grid)分割格子，转化为图的DFS问题。\n```json\nInput:\n[\n  \"\\\\/\",\n  \"/\\\\\"\n]\n```\n\n把`\\\\`，`/`或者` `分别分割成3*3的格子。图转化为: \n\n```json\n[\n 1,0,0,0,0,1,\n 0,1,0,0,1,0,\n 0,0,1,1,0,0\n 0,0,1,1,0,0\n 0,1,0,0,1,0\n 1,0,0,0,0,1\n]\n```\n\n问题就变成： 计算被1分割开的区域的数量。\n\n类似的[孤岛数量问题](https://www.geeksforgeeks.org/find-number-of-islands/) 都是同一个问题的变种：[Counting the number of connected components in an undirected graph](https://www.geeksforgeeks.org/connected-components-in-an-undirected-graph/)\n\n```c++\nvoid dfs(vector<vector<int>>& board, int i, int j ) {\n    // index out of range\n    if (i < 0 || j < 0 || i >= board.size() || j >= board[0].size()) return;\n    // this grid has been visited or it was part of a slash character\n    if (board[i][j] == 1) return;\n\n    // mark this grid visited\n    board[i][j] = true;\n\n    dfs(board, i - 1, j);\n    dfs(board, i + 1, j);\n    dfs(board, i, j - 1);\n    dfs(board, i, j + 1);\n}\n\nint regionsBySlashes(vector<string>& grid) {\n    if (grid.empty())\n        return 0;\n    int row = (int)grid.size(), col = (int)grid[0].size();\n    vector<vector<int>> board (row * 3, vector<int>(col * 3, 0));\n\n    // n*n graph represented as 3n*3n graph\n    for (int i = 0; i < row; ++i) {\n        for (int j = 0; j < col; ++j) {\n            if (grid[i][j] == '/') board[i * 3][j * 3 + 2] = board[i * 3 + 1][j * 3 + 1] = board[i * 3 + 2][j * 3] = 1;\n            if (grid[i][j] == '\\\\') board[i * 3][j * 3] = board[i * 3 + 1][j * 3 + 1] = board[i * 3 + 2][j * 3 + 2] = 1;\n        }\n    }\n\n    int cnt = 0;\n    for (int i = 0; i < row * 3; ++i) {\n        for (int j = 0; j < col * 3; ++j) {\n            // only count components connected by space\n            if (!board[i][j]) {\n               dfs(board, i, j);\n               cnt++;\n            }\n        }\n    }\n\n    return cnt;\n}\n\n```\n\n如果分割为2*2的格子，会遇到这个问题:\n```\nInput:\n[\n  \"//\",\n  \"/ \"\n]\nOutput: 5\nExpected: 3\n\n0101\n1010\n0100\n1000\n```\n01**0**1\n1**0**10\n**0**100\n1000\n\n加粗的这三个0，被分割开了。题意要求是连在一起的。\n\n\n## Solution2: DSU\n\nTime Complexity:  $O(n^2*\\alpha(n))$\nSpace Complexity: $O(n^2)$\n\n### 分析： \n\n#### DSU: \nhttps://www.youtube.com/watch?v=YKE4Vd1ysPI\nhttps://www.youtube.com/watch?v=gpmOaSBcbYA\n\nDSU中用数组来表示树， 如下： \n\n| idx | 0 |  1 | 2 |\n| --- | --- | --- | --- |\n| parent | 1 | -1 | 1 |\n\n \nparent[0] = 1, 代表node 0的parent是1； parent[2] = 1代表node 2的parent是1; parent[1] = -1, 代表它是root。 \n\n```\n   1\n /  \\\n0    2\n```\n\n两个operation： \n**find(x)**: find root of cluster in which x is \n\n```\n   1                   5\n  / \\                 / \\\n 0   2               6   7\n    / \\                   \\\n   3   4                  8\n```\n比如： 我们想找3跟8所在cluster的root， find(3) == 1,  find(8) == 5\n\n```c\n/*递归查找root*/\nint find(int x, int parent[]) {\n    int x_root = x; \n    while (parent[x_root]!= -1) {\n        x_root = parent[x_root];\n    }\n    return x_root;\n}\n```\n**union(x, y)**: union two cluster where x, y are in \n\n比如： 我们想union(3, 8),  就要先找到3的x_root， 跟8的y_root，然后合并两个root.\n\n```c\nint union(int x, int y, int parent[]) {\n    int x_root = find(x, parent);\n    int y_root = find(y, parent); \n    if (x_root == y_root) {\n        return 0; \n    } else {\n        // y_root 变成 x_root的根\n        parent[x_root] = y_root;\n        return 1\n    }\n}\n```\n\n```\n              5\n         /   / \\\n        1   6   7\n       / \\       \\\n      0   2       8\n         / \\ \n        3   4 \n```\n\n                                \nDSU腻害的一点是优化后，用$O(1)$的average time cost, 检测图里有咩有环\n\n两种优化： \n- Make tree flat \n- Union by rank\n\nhttps://www.youtube.com/watch?v=VJnUwsE4fWA\n\n\n### 分割成4个三角形， 上下左右\n每个格子分割成上下左右四个三角形。\nhttps://assets.leetcode.com/uploads/2018/12/15/3.png\n\n每个三角形给个idx: 0, 1, 2, 3分别对应 top, right, bottom, left\n```\n\\ 0 /\n3 \\ 1\n/ 2 \\\n```\nn*n的图；变成 4*n*n的数组。 初始化时数组parent的每个值都是-1, 代表每个点都是独立的。我们遍历grid中的每个点, grid[i][j]， 分别进行如下操作： \n\n'/':  上、左连接； 下、右连接\n'\\\\': 上、右连接； 左、下连接\n' ': 四个部分连接\n\n对每个grid[i][j], 合并grid[i-1][j]的bottom三角形根grid[i][j]的top 三角形；合并grid[i][j-1]的right三角形跟grid[i][j]的left三角形。\n\n最终代码如下:\n\n```c++\nclass DSU {\nprivate:\n    // use array represents a graph\n    vector<int> parent;\n    int row = 0;\npublic:\n    // num of root of independent cluster\n    int num_root = 0;\n\n    DSU(int n) {\n        parent = vector<int>(n * n * 4, -1);\n        num_root = n * n * 4;\n        row = n;\n    }\n\n    int find(int x) {\n        // find the root of the cluster where x is iteratively\n        while (parent[x] != -1) {\n            x = parent[x];\n        }\n        return x;\n    }\n\n    /**\n    * return: 1: successfully; 0: failed\n    */\n    int union_cluster(int x, int y) {\n        int x_root = find(x);\n        int y_root = find(y);\n        if (x_root == y_root) {\n            return 0;\n        } else {\n            int min_ = min(x_root, y_root);\n            int max_ = max(x_root, y_root);\n            parent[min_] = max_;\n            \n            num_root--;\n            return 1;\n        };\n    }\n\n    /**\n     * 将图中（i,j)位置的点，映射到数组的idx\n     * @param i\n     * @param j\n     * @param part\n     * @param n\n     * @return\n     */\n    int idx(int i, int j, int part) {\n        return (i * row + j) * 4 + part;\n    }\n};\n\n\n// https://leetcode.com/problems/regions-cut-by-slashes/discuss/205680/JavaC%2B%2BPython-Split-4-parts-and-Union-Find\nint regionsBySlashes(vector<string> &grid) {\n    if (grid.empty()) return 0;\n    int n = (int) grid.size();\n\n    DSU dsu = DSU(n);\n\n    for (int i = 0; i < n; ++i) {\n        for (int j = 0; j < n; ++j) {\n            // merge the bottom part of the (i-1, j) grid and the top part of the grid (i, j)\n            if (i > 0) dsu.union_cluster(dsu.idx(i - 1, j, 2), dsu.idx(i, j, 0));\n            // merge the right part of the (i, j-1) grid and the left part of the grid(i,j)\n            if (j > 0) dsu.union_cluster(dsu.idx(i, j - 1, 1), dsu.idx(i, j, 3));\n\n            if (grid[i][j] == '/') {\n                // union the top and the left part of this cell\n                dsu.union_cluster(dsu.idx(i, j, 3), dsu.idx(i, j, 0));\n                // union the right and the bottom of this cell\n                dsu.union_cluster(dsu.idx(i, j, 2), dsu.idx(i, j, 1));\n            }\n\n            if (grid[i][j] == '\\\\') {\n                dsu.union_cluster(dsu.idx(i, j, 0), dsu.idx(i, j, 1));\n                dsu.union_cluster(dsu.idx(i, j, 2), dsu.idx(i, j, 3));\n            }\n\n            if (grid[i][j] == ' ') {\n                dsu.union_cluster(dsu.idx(i, j, 0), dsu.idx(i, j, 2));\n                dsu.union_cluster(dsu.idx(i, j, 1), dsu.idx(i, j, 3));\n                dsu.union_cluster(dsu.idx(i, j, 1), dsu.idx(i, j, 2));\n            }\n        }\n    }\n\n    return dsu.num_root;\n}\n\n```\n\nhttps://leetcode.com/problems/regions-cut-by-slashes/discuss/205680/JavaC%2B%2BPython-Split-4-parts-and-Union-Find\n","tags":["Algorithm"],"categories":["Algorithm"]},{"title":"XMPP(6):XMPP-消息存储与拉取历史消息","url":"/2019/04/10/XMPP-6-XMPP-消息存储与拉取历史消息/","content":"\n\nXEP-0313定义了XMPP消息存储的规则。\n\n### 场景需求\n0313协议主要有这些场景： \n- 同账号多客户端之间的历史消息同步\n- 客户端拉取历史消息，按日期排序展示（想想我们在微信的历史消息）\n- 分页拉取消息\n\n### 存储\n\n1. 单条消息存储包括： \n- 消息发送跟接收的时间戳\n- from 跟 to 的JID\n- server-assigned UID\n- message stanza \n\n2. 消息的顺序要保存： 依赖timestamp要小心，因为多条消息可能共享时间戳\n3. 超过一定数量，可删除旧信息\n4. 群聊记录用MAM服务\n5. archive id ` <stanza-id/>`\n被archived过的消息，server要给它加上stanza-id\nExample 1. Client receives a message that has been archived\n\n```xml\n<message to='juliet@capulet.lit/balcony'\n         from='romeo@montague.lit/orchard'\n         type='chat'>\n  <body>Call me but love, and I'll be new baptized; Henceforth I never will be Romeo.</body>\n  <stanza-id xmlns='urn:xmpp:sid:0' by='juliet@capulet.lit' id='28482-98726-73623' />\n</message>\n\n```\nstanza-id: archive ID \n\n### 查询\n\n#### 1. A user queries their archive for messages\n用消息UID查询\n\n'urn:xmpp:mam:2' namespace, indicating the UID of the first and last message of the (possibly limited) result set. \n\n```xml\n<iq type='set' id='juliet1'>\n  <query xmlns='urn:xmpp:mam:2' queryid='f27' />\n</iq>\n```\n\n#### 2. Their server sends the matching messages\n\n\n\n```xml\n<message id='aeb213' to='juliet@capulet.lit/chamber'>\n  <result xmlns='urn:xmpp:mam:2' queryid='f27' id='28482-98726-73623'>\n    <forwarded xmlns='urn:xmpp:forward:0'>\n      <delay xmlns='urn:xmpp:delay' stamp='2010-07-10T23:08:25Z'/>\n      <message xmlns='jabber:client' from=\"witch@shakespeare.lit\" to=\"macbeth@shakespeare.lit\">\n        <body>Hail to thee</body>\n      </message>\n    </forwarded>\n  </result>\n</message>\n\n```\n\n#### 3. Server returns the result IQ to signal the end\n\n\n```xml\n<iq type='result' id='juliet1'>\n  <fin xmlns='urn:xmpp:mam:2'>\n    <set xmlns='http://jabber.org/protocol/rsm'>\n      <first index='0'>28482-98726-73623</first>\n      <last>09af3-cc343-b409f</last>\n    </set>\n  </fin>\n</iq>\n```\n\nserver的这条iq stanza标记查询结果结束。\n\n### 过滤器\n\n#### 1. 根据JID过滤\n\n`with` 字段 + JID(Bare JID)： 会拿到to或from地址匹配JID的信息; 如果没有with, 服务端返回query指定的时间段内的消息。 \n\n```xml \nExample 6. Querying for all messages to/from a particular JID¶\n<iq type='set' id='juliet1'>\n  <query xmlns='urn:xmpp:mam:2'>\n    <x xmlns='jabber:x:data' type='submit'>\n      <field var='FORM_TYPE' type='hidden'>\n        <value>urn:xmpp:mam:2</value>\n      </field>\n      <field var='with'>\n        <value>juliet@capulet.lit</value>\n      </field>\n    </x>\n  </query>\n</iq>\n```\n\n**使用场景：**\nA想查询跟B的聊天记录，with字段的value设为B, 服务端返回的messages中，既有B发送给A的msg，也有A发送给B的msg。 \n\n![3c4760c7.png](/img/f3eaaed1-370f-4abc-93b2-a3312d3ebcd4/3c4760c7.png)\n#### 2. 根据接收时间过滤\n\n`start` 跟 `end` 字段标记时间戳。 时间戳格式见https://xmpp.org/extensions/xep-0082.html\n\n```xml\nExample 7. Querying the archive for all messages in a certain timespan¶\n<iq type='set' id='juliet1'>\n  <query xmlns='urn:xmpp:mam:2'>\n    <x xmlns='jabber:x:data' type='submit'>\n      <field var='FORM_TYPE' type='hidden'>\n        <value>urn:xmpp:mam:2</value>\n      </field>\n      <field var='start'>\n         // UTC格式\n        <value>2010-06-07T00:00:00Z</value>\n      </field>\n      <field var='end'>\n        <value>2010-07-07T13:23:54Z</value>\n      </field>\n    </x>\n  </query>\n</iq>\n```\n如果`end` 缺失， server会自动认为是最近的消息的存储时间\n\n``` xml\nExample 8. Querying the archive for all messages after a certain time¶\n<iq type='set' id='juliet1'>\n  <query xmlns='urn:xmpp:mam:2'>\n    <x xmlns='jabber:x:data' type='submit'>\n      <field var='FORM_TYPE' type='hidden'>\n        <value>urn:xmpp:mam:2</value>\n      </field>\n      <field var='start'>\n        <value>2010-08-07T00:00:00Z</value>\n      </field>\n    </x>\n  </query>\n</iq>   \n```\n\n#### 3. 限定results的数量\n\n[Result Set Management (XEP-0059)](https://xmpp.org/extensions/xep-0059.html) \n\n```xml\nExample 9. A query using Result Set Management¶\n<iq type='set' id='q29302'>\n  <query xmlns='urn:xmpp:mam:2'>\n    <x xmlns='jabber:x:data' type='submit'>\n      <field var='FORM_TYPE' type='hidden'>\n        <value>urn:xmpp:mam:2</value>\n      </field>\n      <field var='start'>\n        <value>2010-08-07T00:00:00Z</value>\n      </field>\n    </x>\n    <set xmlns='http://jabber.org/protocol/rsm'>\n      <max>10</max>\n    </set>\n  </query>\n</iq>\n```\n\n这个请求，指定客户端最多只能收到10条stanzas。但服务端的返回结果可能回改变`set`的内容，返回自己限定的数量，比如： 这是返回`start`时间跟`end`时间段内的20条消息。\n\n```xml\nExample 10. Server responds to client with limited results using RSM¶\n<!-- result messages -->\n<iq type='result' id='q29302'>\n  <fin xmlns='urn:xmpp:mam:2'>\n    <set xmlns='http://jabber.org/protocol/rsm'>\n      <first index='0'>28482-98726-73623</first>\n      <last>09af3-cc343-b409f</last>\n      <count>20</count>\n    </set>\n  </fin>\n</iq>\n```\n\n#### 4. 分页拉取消息\n\n如果之前已经获取了m条消息，客户端可以再发送同样的请求，拉取下一页消息。`set`中要带上`after`(上次拉取到的最后一条消息的UID)\n\n```xml\nExample 11. A page query using Result Set Management¶\n<iq type='set' id='q29303'>\n  <query xmlns='urn:xmpp:mam:2'>\n      <x xmlns='jabber:x:data' type='submit'>\n        <field var='FORM_TYPE' type='hidden'><value>urn:xmpp:mam:2</value></field>\n        <field var='start'><value>2010-08-07T00:00:00Z</value></field>\n      </x>\n      <set xmlns='http://jabber.org/protocol/rsm'>\n         <max>10</max>\n         <after>09af3-cc343-b409f</after>\n      </set>\n  </query>\n</iq>\n```\n\nserver返回最后一页消息，会在 fin里头带上`complete`属性，值为`ture`\n\n```xml\nExample 12. Server completes a result with the last page of messages¶\n<!-- result messages -->\n<iq type='result' id='u29303'>\n  <fin xmlns='urn:xmpp:mam:2' complete='true'>\n    <set xmlns='http://jabber.org/protocol/rsm'>\n      <first index='0'>23452-4534-1</first>\n      <last>390-2342-22</last>\n      <count>16</count>\n    </set>\n  </fin>\n</iq>\n    \n```\n\n**使用场景：**\n\nA客户端本地存储跟B的聊天信息， 最后一条message的id是`09af3-cc343-b409f`。 现在A想看看最近的消息（`09af3-cc343-b409f`后的message，可以发送iq请求中带上`<after>09af3-cc343-b409f</after>`。差量请求最新消息，基于游标的分页。\n#### 5.其他字段的筛选\n\n客户端查询服务端支持的其他字段\n```xml\nExample 13. Client requests supported query fields¶\n<iq type='get' id='form1'>\n  <query xmlns='urn:xmpp:mam:2'/>\n</iq>\n```\n\n```xml\nExample 14. Server returns supported fields¶\n<iq type='result' id='form1'>\n  <query xmlns='urn:xmpp:mam:2'>\n    <x xmlns='jabber:x:data' type='form'>\n      <field type='hidden' var='FORM_TYPE'>\n        <value>urn:xmpp:mam:2</value>\n      </field>\n      <field type='jid-single' var='with'/>\n      // 按消息received时间查询\n      <field type='text-single' var='start'/>\n      <field type='text-single' var='end'/>\n      // 按文本查询\n      <field type='text-single' var='urn:example:xmpp:free-text-search'/>\n      // stanza内容\n      <field type='text-single' var='urn:example:xmpp:stanza-content'/>\n    </x>\n  </query>\n</iq>\n```\n### 返回的message stanza 结构\n\n- `message`被封装在`forwarded`元素中。 [XEP-0297: Stanza Forwarding](https://xmpp.org/extensions/xep-0297.html)\n- 带`result` 元素， 其属性id是这条message的UID\n- delay元素 [XEP-0203: Delayed Delivery](https://xmpp.org/extensions/xep-0203.html) message被收到的时间, UTC时间戳格式\n\n\n```xml\nExample 16. Server returns two matching messages¶\n<message id='aeb213' to='juliet@capulet.lit/chamber'>\n  <result xmlns='urn:xmpp:mam:2' queryid='f27' id='28482-98726-73623'>\n    <forwarded xmlns='urn:xmpp:forward:0'>\n      <delay xmlns='urn:xmpp:delay' stamp='2010-07-10T23:08:25Z'/>\n      <message xmlns='jabber:client'\n        to='juliet@capulet.lit/balcony'\n        from='romeo@montague.lit/orchard'\n        type='chat'>\n        <body>Call me but love, and I'll be new baptized; Henceforth I never will be Romeo.</body>\n      </message>\n    </forwarded>\n  </result>\n</message>\n\n<message id='aeb214' to='juliet@capulet.lit/chamber'>\n  <result xmlns='urn:xmpp:mam:2' queryid='f27' id='5d398-28273-f7382'>\n    <forwarded xmlns='urn:xmpp:forward:0'>\n      <delay xmlns='urn:xmpp:delay' stamp='2010-07-10T23:09:32Z'/>\n      <message xmlns='jabber:client'\n         to='romeo@montague.lit/orchard'\n         from='juliet@capulet.lit/balcony'\n         type='chat' id='8a54s'>\n        <body>What man art thou that thus bescreen'd in night so stumblest on my counsel?</body>\n      </message>\n    </forwarded>\n  </result>\n</message>\n    \n```\n\n## MUC Archive\n\n- 存储所有发送给roomJid的message\n- 不包含`private message`\n- user需要权限查询群历史聊天记录\n- `forward` stanza中带有`to`属性,值是roomJid，`from`值是userJid \n- `x`里有该消息的发送者Jid\n```xml\nExample 17. Server returns MUC messages¶\n<message id='iasd207' from='coven@chat.shakespeare.lit' to='hag66@shakespeare.lit/pda'>\n  <result xmlns='urn:xmpp:mam:2' queryid='g27' id='34482-21985-73620'>\n    <forwarded xmlns='urn:xmpp:forward:0'>\n      <delay xmlns='urn:xmpp:delay' stamp='2002-10-13T23:58:37Z'/>\n      <message xmlns=\"jabber:client\"\n        from='coven@chat.shakespeare.lit/firstwitch'\n        id='162BEBB1-F6DB-4D9A-9BD8-CFDCC801A0B2'\n        type='groupchat'>\n        <body>Thrice the brinded cat hath mew'd.</body>\n        <x xmlns='http://jabber.org/protocol/muc#user'>\n          <item affiliation='none'\n                jid='witch1@shakespeare.lit'\n                role='participant' />\n        </x>\n      </message>\n    </forwarded>\n  </result>\n</message>\n\n<message id='iasd207' from='coven@chat.shakespeare.lit' to='hag66@shakespeare.lit/pda'>\n  <result xmlns='urn:xmpp:mam:2' queryid='g27' id='34482-21985-73620'>\n    <forwarded xmlns='urn:xmpp:forward:0'>\n      <delay xmlns='urn:xmpp:delay' stamp='2002-10-13T23:58:43Z'/>\n      <message xmlns=\"jabber:client\"\n        from='coven@chat.shakespeare.lit/secondwitch'\n        id='90057840-30FD-4141-AA44-103EEDF218FC'\n        type='groupchat'>\n        <body>Thrice and once the hedge-pig whined.</body>\n        <x xmlns='http://jabber.org/protocol/muc#user'>\n          <item affiliation='none'\n                jid='witch2@shakespeare.lit'\n                role='participant' />\n        </x>\n      </message>\n    </forwarded>\n  </result>\n</message>\n```\n[XEP-0313: Message Archive Management](https://xmpp.org/extensions/xep-0313.html#intro)","tags":["XMPP"],"categories":["XMPP"]},{"title":"XMPP(5): 消息","url":"/2019/04/09/XMPP-5-消息/","content":"\n \n## Message消息体构造\n\n属性： \n1. to ：接收方地址， JID \n2. from ： 发送方， JID\n3. type \n  - chat: 一对一聊天\n  - error: 出错\n  - groupchat: 群聊\n  - headline: 通知、临时消息这种不需要回复的系统消息\n  - normal: 之前没有聊天的记录， 客户端可以回复的消息\n\n子元素\n1. body: 消息内容\n\n```xml\n<message\n    from='juliet@example.com/balcony'\n    id='b4vs9km4'\n    to='romeo@example.net'\n    type='chat'\n    xml:lang='en'>\n  <body>Wherefore art thou, Romeo?</body>\n</message>\n\n```\n2. Subject: 聊天的话题\n\n```xml\n\n<message\n    from='juliet@example.com/balcony'\n    id='c8xg3nf8'\n    to='romeo@example.net'\n    type='chat'\n    xml:lang='en'>\n  <subject>I implore you!</subject>\n  <body>Wherefore art thou, Romeo?</body>\n</message>\n```\n\n3. Thread: 聊天会话的唯一标识\n\n## Example \n\n对话： \n\n```xml\nCC: <message\n        from='juliet@example.com/balcony'\n        to='romeo@example.net'\n        type='chat'\n        xml:lang='en'>\n      <body>My ears have not yet drunk a hundred words</body>\n      <thread>e0ffe42b28561960c6b12b944a092794b9683a38</thread>\n    </message>\n\nCC: <message\n        from='juliet@example.com/balcony'\n        to='romeo@example.net'\n        type='chat'\n        xml:lang='en'>\n      <body>Of that tongue's utterance, yet I know the sound:</body>\n      <thread>e0ffe42b28561960c6b12b944a092794b9683a38</thread>\n    </message>\n\nCC: <message\n        from='juliet@example.com/balcony'\n        to='romeo@example.net'\n        type='chat'\n        xml:lang='en'>\n      <body>Art thou not Romeo, and a Montague?</body>\n      <thread>e0ffe42b28561960c6b12b944a092794b9683a38</thread>\n    </message>\n\nUC: <message\n        from='romeo@example.net/orchard'\n        to='juliet@example.com/balcony'\n        type='chat'\n        xml:lang='en'>\n      <body>Neither, fair saint, if either thee dislike.</body>\n      <thread>e0ffe42b28561960c6b12b944a092794b9683a38</thread>\n    </message>\n\nCC: <message\n        from='juliet@example.com/balcony'\n        to='romeo@example.net/orchard'\n        type='chat'\n        xml:lang='en'>\n      <body>How cam'st thou hither, tell me, and wherefore?</body>\n      <thread>e0ffe42b28561960c6b12b944a092794b9683a38</thread>\n    </message>\n\n```\n\n在[xmpp.js](https://github.com/xmppjs/xmpp.js/)中，客户端与服务端建立了WebSocket长链接后，发消息，需要自己构造消息体\n\n``` js \nconst {client, xml} = require('@xmpp/client')\n\nconst xmpp = client({\n  service: 'ws://localhost:5280/xmpp-websocket',\n  domain: 'localhost',\n  resource: 'example',\n  username: 'username',\n  password: 'password',\n})\n\n const message = xml(\n    'message',\n    {type: 'chat', to: address},\n    xml('body', 'hello world')\n  )\n  await xmpp.send(message)\n\n```\n\n如果收到消息会走到一个回调里, chat-sdk就可以根据type字段来分发。\n\n\n```js \nself.xmppClient.on('stanza', function (stanza: any) {\n    Utils.DLog('[Chat] RECV:', stanza.toString());\n    /**\n     * Detect typeof incoming stanza\n     * and fire the Listener\n     */\n    if (stanza.is('presence')) {\n        self._onPresence(stanza);\n    } else if (stanza.is('iq')) {\n        self._onIQ(stanza);\n    } else if (stanza.is('message')) {\n        if (stanza.attrs.type === 'headline') {\n            self._onSystemMessageListener(stanza);\n        } else if (stanza.attrs.type === 'error') {\n            self._onMessageErrorListener(stanza);\n        } else {\n            self._onMessage(stanza);\n        }\n    }\n});\n```\n\n- ref: https://xmpp.org/rfcs/rfc6121.html#message","tags":["XMPP"],"categories":["XMPP"]},{"title":"JWT 入门","url":"/2019/04/03/JWT-入门/","content":"\n\n## 什么是JSON Web Tokens (JWT)？ \n\n\n```\n  JSON Web Token (JWT) is a compact, URL-safe means of representing\n   claims to be transferred between two parties.  The claims in a JWT\n   are encoded as a JSON object that is used as the payload of a JSON\n   Web Signature (JWS) structure or as the plaintext of a JSON Web\n   Encryption (JWE) structure, enabling the claims to be digitally\n   signed or integrity protected with a Message Authentication Code\n   (MAC) and/or encrypted.\n   \n\n```\n\n## 怎么用？ \n\nauthentication时，当user成功登录，server生成access token, 发送给user；user请求server时带上JWT，server通过JWT验证是否是可信任的客户端请求了。\n\n\n![1*SSXUQJ1dWjiUrDoKaaiGLA.png](https://cdn-images-1.medium.com/max/1600/1*SSXUQJ1dWjiUrDoKaaiGLA.png)\n\n## 结构\n\n在客户端看来JWT是一串encode加密过的字符串,`header.payload.signature`，如下图左边。但它decode后其实是下图右边的JSON结构体\n\n![legacy-app-auth-5.png](https://cdn.auth0.com/blog/legacy-app-auth/legacy-app-auth-5.png)\n\n#### 1. 生成header\n\ne.g.\n```json\n{\n  \"alg\": \"HS256\",\n  \"typ\": \"JWT\"\n}\n```\n\n这里，alg的值指定用HMAC-SHA256算法签名\n\n#### 2. 生成payload\n\n包含用户相关的信息\n```\nThe second part of the token is the payload, which contains the claims. \nClaims are statements about an entity (typically, the user) and additional data. \n```\n有三种[claims](https://tools.ietf.org/html/rfc7519#section-4.1): registered, public, and private claims.\n\ne.g.\n```json\n\n{\n  \"sub\": \"1234567890\",\n  \"name\": \"John Doe\",\n  \"iat\": 1516239022\n}\n```\n\n#### 3.生成signature\n\n```js\n\nHMACSHA256(\n  base64UrlEncode(header) + \".\" +\n  base64UrlEncode(payload),\n  your-256-bit-secret\n) \n```\n把header跟payload encode结构后，用'.'连接，生成: <span style=\"color:#fb015b\"> eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9</span><span>.</span>\n<span style=\"color:#d63aff\"> eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ</span>\n\n再用指定的hash算法(例子是HS256),用私钥（服务端的）生成签名:<span style=\"color:#00b9f1\">SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c<span>\n\n\n## 验证\n\n如图1， JWT由Authentication server生成， 在client认证后发给client； client请求application server的时候带上JWT，application server在认证阶段从Authentiation server那儿拿到scret key；用同样算法生成signature， 跟client发来的JWT的signature做比较，看是否match。\n\n\n\n\n\n\n\n\n\n\n\n\n[5 Easy Steps to Understanding JSON Web Tokens (JWT)](https://medium.com/vandium-software/5-easy-steps-to-understanding-json-web-tokens-jwt-1164c0adfcec)\n[JSON Web Token Introduction - jwt.io](https://jwt.io/introduction/) \n[RFC 7519 - JSON Web Token (JWT)](https://tools.ietf.org/html/rfc7519)","tags":["Auth"],"categories":["NetWork"]},{"title":"XMPP(4):Search 和 vCard","url":"/2019/03/31/XMPP-4-Search-vCard/","content":"`jabber:iq:search`协议用来查找用户信息。\n\n1. 我们先查询可以用哪些字段查找用户\n<!-- more -->\n\n# XMPP Search \n\n`jabber:iq:search`协议用来查找用户信息。\n\n1. 我们先查询可以用哪些字段查找用户\n\n```xml\n// Requesting Search Fields\n\n<iq type='get'\n    from='romeo@montague.net/home'\n    to='characters.shakespeare.lit'\n    id='search1'\n    xml:lang='en'>\n  <query xmlns='jabber:iq:search'/>\n</iq>\n```\n\n2. service 返回\n\n```xml\n// Receiving Search Fields\n<iq type='result'\n    from='characters.shakespeare.lit'\n    to='romeo@montague.net/home'\n    id='search1'\n    xml:lang='en'>\n  <query xmlns='jabber:iq:search'>\n    <instructions>\n      Fill in one or more fields to search\n      for any matching Jabber users.\n    </instructions>\n    <first/>\n    <last/>\n    <nick/>\n    <email/>\n  </query>\n</iq>\n```\n3. 服务端返回，可以用`first` `last` `nick` `email` 这几个字段找人。接着就用last查人.\n\n```xml\n// Submitting a Search Request\n\n<iq type='set'\n    from='romeo@montague.net/home'\n    to='characters.shakespeare.lit'\n    id='search2'\n    xml:lang='en'>\n  <query xmlns='jabber:iq:search'>\n    <last>Capulet</last>\n  </query>\n</iq>\n```\n\n服务端可以能会返回好多个last匹配的item\n```xml\n<iq type='result'\n    from='characters.shakespeare.lit'\n    to='romeo@montague.net/home'\n    id='search2'\n    xml:lang='en'>\n  <query xmlns='jabber:iq:search'>\n    <item jid='juliet@capulet.com'>\n      <first>Juliet</first>\n      <last>Capulet</last>\n      <nick>JuliC</nick>\n      <email>juliet@shakespeare.lit</email>\n    </item>\n    <item jid='tybalt@shakespeare.lit'>\n      <first>Tybalt</first>\n      <last>Capulet</last>\n      <nick>ty</nick>\n      <email>tybalt@shakespeare.lit</email>\n    </item>\n  </query>\n</iq>\n```\n没有结果的话，query就没有子元素\n\n```xml\n<iq type='result'\n    from='characters.shakespeare.lit'\n    to='romeo@montague.net/home'\n    id='search2'\n    xml:lang='en'>\n  <query xmlns='jabber:iq:search'/>\n</iq>\n```\n\nXMPP Search \n\n`jabber:iq:search`协议用来查找用户信息。\n\n我们先查询可以用哪些字段查找用户\n\n```xml\n// Requesting Search Fields\n\n<iq type='get'\n    from='romeo@montague.net/home'\n    to='characters.shakespeare.lit'\n    id='search1'\n    xml:lang='en'>\n  <query xmlns='jabber:iq:search'/>\n</iq>\n```\n\nservice 返回\n\n```xml\n// Receiving Search Fields\n<iq type='result'\n    from='characters.shakespeare.lit'\n    to='romeo@montague.net/home'\n    id='search1'\n    xml:lang='en'>\n  <query xmlns='jabber:iq:search'>\n    <instructions>\n      Fill in one or more fields to search\n      for any matching Jabber users.\n    </instructions>\n    <first/>\n    <last/>\n    <nick/>\n    <email/>\n  </query>\n</iq>\n```\n服务端返回，可以用`first` `last` `nick` `email` 这几个字段找人。接着就用last查人.\n\n```xml\n// Submitting a Search Request\n\n<iq type='set'\n    from='romeo@montague.net/home'\n    to='characters.shakespeare.lit'\n    id='search2'\n    xml:lang='en'>\n  <query xmlns='jabber:iq:search'>\n    <last>Capulet</last>\n  </query>\n</iq>\n```\n\n服务端可以能会返回好多个last匹配的item\n```xml\n<iq type='result'\n    from='characters.shakespeare.lit'\n    to='romeo@montague.net/home'\n    id='search2'\n    xml:lang='en'>\n  <query xmlns='jabber:iq:search'>\n    <item jid='juliet@capulet.com'>\n      <first>Juliet</first>\n      <last>Capulet</last>\n      <nick>JuliC</nick>\n      <email>juliet@shakespeare.lit</email>\n    </item>\n    <item jid='tybalt@shakespeare.lit'>\n      <first>Tybalt</first>\n      <last>Capulet</last>\n      <nick>ty</nick>\n      <email>tybalt@shakespeare.lit</email>\n    </item>\n  </query>\n</iq>\n```\n没有结果的话，query就没有子元素\n\n```xml\n<iq type='result'\n    from='characters.shakespeare.lit'\n    to='romeo@montague.net/home'\n    id='search2'\n    xml:lang='en'>\n  <query xmlns='jabber:iq:search'/>\n</iq>\n```\n\n# vCard \nvCard协议主要负责用户信息存储，就像个人名片。\n\n1. 查看自己的vCard\n如果客户端想查询自己的vCard, 需要发送IQ-set stanza，注意没有to地址哦。\n\n```xml\n<iq from='stpeter@jabber.org/roundabout'\n    id='v1'\n    type='get'>\n  <vCard xmlns='vcard-temp'/>\n</iq>\n```\n\n2. 返回信息\n接着服务端返回一堆的用户信息\n\n```xml\n\n<iq id='v1'\n    to='stpeter@jabber.org/roundabout'\n    type='result'>\n  <vCard xmlns='vcard-temp'>\n    <FN>Peter Saint-Andre</FN>\n    <N>\n      <FAMILY>Saint-Andre</FAMILY>\n      <GIVEN>Peter</GIVEN>\n      <MIDDLE/>\n    </N>\n    <NICKNAME>stpeter</NICKNAME>\n    <URL>http://www.xmpp.org/xsf/people/stpeter.shtml</URL>\n    <BDAY>1966-08-06</BDAY>\n    <ORG>\n      <ORGNAME>XMPP Standards Foundation</ORGNAME>\n      <ORGUNIT/>\n    </ORG>\n    <TITLE>Executive Director</TITLE>\n    <ROLE>Patron Saint</ROLE>\n    <TEL><WORK/><VOICE/><NUMBER>303-308-3282</NUMBER></TEL>\n    <TEL><WORK/><FAX/><NUMBER/></TEL>\n    <TEL><WORK/><MSG/><NUMBER/></TEL>\n    <ADR>\n      <WORK/>\n      <EXTADD>Suite 600</EXTADD>\n      <STREET>1899 Wynkoop Street</STREET>\n      <LOCALITY>Denver</LOCALITY>\n      <REGION>CO</REGION>\n      <PCODE>80202</PCODE>\n      <CTRY>USA</CTRY>\n    </ADR>\n    <TEL><HOME/><VOICE/><NUMBER>303-555-1212</NUMBER></TEL>\n    <TEL><HOME/><FAX/><NUMBER/></TEL>\n    <TEL><HOME/><MSG/><NUMBER/></TEL>\n    <ADR>\n      <HOME/>\n      <EXTADD/>\n      <STREET/>\n      <LOCALITY>Denver</LOCALITY>\n      <REGION>CO</REGION>\n      <PCODE>80209</PCODE>\n      <CTRY>USA</CTRY>\n    </ADR>\n    <EMAIL><INTERNET/><PREF/><USERID>stpeter@jabber.org</USERID></EMAIL>\n    <JABBERID>stpeter@jabber.org</JABBERID>\n    <DESC>\n      More information about me is located on my\n      personal website: http://www.saint-andre.com/\n    </DESC>\n  </vCard>\n</iq>\n```\n如果没有相关vCard，会返回error\n```xml\n// item-not-found\n<iq id='v1'\n    to='stpeter@jabber.org/roundabout'\n    type='error'>\n  <vCard xmlns='vcard-temp'/>\n  <error type='cancel'>\n    <item-not-found xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>\n  </error>\n</iq>\n```\n\n```xml\n// empty element\n<iq id='v1'\n    to='stpeter@jabber.org/roundabout'\n    type='result'>\n  <vCard xmlns='vcard-temp'/>\n</iq>\n\n```\n\n3. 查看别人的vCard\n\n用IQ-get stanza, 带上to地址\n\n```xml \n\n<iq from='stpeter@jabber.org/roundabout'\n    id='v3'\n    to='jer@jabber.org'\n    type='get'>\n  <vCard xmlns='vcard-temp'/>\n</iq>\n```\n\n```xml\n<iq from='jer@jabber.org'\n    to='stpeter@jabber.org/roundabout'\n    type='result'\n    id='v3'>\n  <vCard xmlns='vcard-temp'>\n    <FN>JeremieMiller</FN>\n    <N>\n      <GIVEN>Jeremie</GIVEN>\n      <FAMILY>Miller</FAMILY>\n      <MIDDLE/>\n    </N>\n    <NICKNAME>jer</NICKNAME>\n    <EMAIL><INTERNET/><PREF/><USERID>jeremie@jabber.org</USERID></EMAIL>\n    <JABBERID>jer@jabber.org</JABBERID>\n  </vCard>\n</iq>\n\n```\n\n4. 更新vCard\n\n客户端可以用IQ-set stanza 更新自己的vCard信息\n\n```xml\n<iq id='v2' type='set'>\n  <vCard xmlns='vcard-temp'>\n    <FN>Peter Saint-Andre</FN>\n    <N>\n      <FAMILY>Saint-Andre</FAMILY>\n      <GIVEN>Peter</GIVEN>\n      <MIDDLE/>\n    </N>\n    <NICKNAME>stpeter</NICKNAME>\n    <URL>http://www.xmpp.org/xsf/people/stpeter.shtml</URL>\n    <BDAY>1966-08-06</BDAY>\n    <ORG>\n      <ORGNAME>XMPP Standards Foundation</ORGNAME>\n      <ORGUNIT/>\n    </ORG>\n    <TITLE>Executive Director</TITLE>\n    <ROLE>Patron Saint</ROLE>\n    <TEL><WORK/><VOICE/><NUMBER>303-308-3282</NUMBER></TEL>\n    <TEL><WORK/><FAX/><NUMBER/></TEL>\n    <TEL><WORK/><MSG/><NUMBER/></TEL>\n    <ADR>\n      <WORK/>\n      <EXTADD>Suite 600</EXTADD>\n      <STREET>1899 Wynkoop Street</STREET>\n      <LOCALITY>Denver</LOCALITY>\n      <REGION>CO</REGION>\n      <PCODE>80202</PCODE>\n      <CTRY>USA</CTRY>\n    </ADR>\n    <TEL><HOME/><VOICE/><NUMBER>303-555-1212</NUMBER></TEL>\n    <TEL><HOME/><FAX/><NUMBER/></TEL>\n    <TEL><HOME/><MSG/><NUMBER/></TEL>\n    <ADR>\n      <HOME/>\n      <EXTADD/>\n      <STREET/>\n      <LOCALITY>Denver</LOCALITY>\n      <REGION>CO</REGION>\n      <PCODE>80209</PCODE>\n      <CTRY>USA</CTRY>\n    </ADR>\n    <EMAIL><INTERNET/><PREF/><USERID>stpeter@jabber.org</USERID></EMAIL>\n    <JABBERID>stpeter@jabber.org</JABBERID>\n    <DESC>\n      Check out my blog at https://stpeter.im/\n    </DESC>\n  </vCard>\n</iq>\n```\n\n服务端返回结果\n\n```xml\n<iq id='v2'\n    to='stpeter@jabber.org/roundabout'\n    type='result'/>\n```\n\nref: https://xmpp.org/extensions/xep-0054.html#intro\nref: https://xmpp.org/extensions/xep-0055.html#intro","tags":["XMPP"],"categories":["XMPP"]},{"title":"影响曝光的3个因素","url":"/2019/03/31/影响曝光的几个因素/","content":"\n\n\n## 进光量\n\n`曝光`也指单位面积上光子的数量。\n\n- 如果我们没有捕获足够的光，那么相片就会`欠曝`:\n\n<img src=\"/img/15000130641224/15000133443588.jpg\" width = \"368\" height = \"500\" alt=\"图片名称\" align=center />\n\n\n- 如果我们捕获的光太多，图像就会`过曝`:\n\n<img src=\"/img/15000130641224/15000133832576.jpg\" width = \"368\" height = \"500\" alt=\"图片名称\" align=center />\n\n\n\n## 三个要素可以影响曝光的进光量\n\n- 快门速度\n- 光圈\n- 感光度 (ISO)\n\n![](/img/15000130641224/15006272782478.jpg)\n\n想象相机是黑暗房间，有个窗户（光圈）， 有块窗帘（快门），窗户越大进光量越大，窗帘拉开的时间越久。 窗户对面有面镜子（感官元件），捕获光子成像。\n\n## 1.快门速度\n当我们捕捉图片时，图像传感器需要捕捉一段时间的光。 这个时间段曝光时间（也叫快门速度。相机中一般用`1/400、8`这样的形式表示）这个数值越大，快门开启的时间越长，进入相机的光线就越多，但运动的物体很可能模糊.\n\n看下图： \n\n![](/img/15000130641224/15006271573170.jpg)\n\n\n## 2.感光度 (ISO)\n\n它被用来衡量图像传感器对光的`灵敏程度`，以及因此带来的曝光噪音。ISO越大，传感器越灵敏，捕获光能力越强，照片越亮，但噪点也越多。\n\n![](/img/15000130641224/15006272197963.jpg)\n\n####左： ISO 32 和 1/3 秒曝光\n####右： ISO 1600 和 1/180 秒\n![](/img/15000130641224/15000247388896.jpg)\n\n\n**图像传感器**\n这个部分就相当于我们眼睛里的视网膜。图像传感器可以将光或者光子转换为电信号。\n\n**图像传感器是由海量的独个的像素传感器串起来的巨大矩形区域** 我们可以将每个像素传感器想象成一个装电荷的桶。当光子撞击到像素传感器的光二极管时，它们将在这个像素的桶中缓慢地积攒电荷。最后，每个像素都会有它自己的一小桶电子。这些电荷的数量是依赖于光子数量的 -- 或者说是决定于打到这个特定的点上的光的强度。\n\n因为我们有一个像素传感器的二维阵列，我们现在就拥有能够反应出所有这些位置的光的强度的一组二维电荷阵列了。**在 iPhone 6 上，我们有八百万个这样的微小的像素传感器**，以及它们所对应的电荷桶。\n\n\n## 3.光圈\n\n相机的镜头的光圈(Aperture)是用来衡量到达图像感应器的光所通过的`通孔的大小`的\n\n\n#### 曝光值\n\n曝光值（Exposure Value，EV）代表能够给出同样曝光的所有相机光圈快门组合\n\n![](/img/15000130641224/15026013567638.jpg)\n其中N是光圈（f值）；t是曝光时间（快门），单位秒。曝光值0（EV0）对应于曝光时间为1秒而光圈为f/1.0的组合或其等效组合。\n\n`曝光值 != 曝光量`\n\n####曝光量（photometric exposure）\n\n![](/img/15000130641224/15026015278605.jpg)\n其中  H是曝光量， E是影像平面的照度，而  t是曝光时间。照度 E由f值所控制，但也取决于环境亮度。\n\n## 光圈与景深\n\n##### 景深\n\n![](/img/15000130641224/15026018990936.jpg)\n\n![](/img/15000130641224/15026016717518.jpg)\n\n![](/img/15000130641224/15026016975426.jpg)\n\n光圈系数= `镜头焦距/光圈孔径`；常用的镜头的光圈数序列为\n`1， 1.4， 2， 2.8， 4， 5.6， 8， 11， 16， 22， 32， 45， 64，90，128`\n\n\n\n\n","tags":["CV"]},{"title":"XMPP(3):Roster&联系人","url":"/2019/03/31/Roster-联系人/","content":"\n\n\n\nXMPP中联系人模块协议是`jabber:iq:roster`. Roster直接翻译叫花名册，其实它就是联系人列表啦。\n\n## 客户端获取联系人列表\n\n比较简单，发送IQ stanza给server. xmlns=`jabber:iq:roster`;type='get'\n\n```xml\n\n<iq from='user@server.com/balcony'\n       id='bv1bs71f'\n       type='get'>\n    <query xmlns='jabber:iq:roster'/>\n  </iq>\n\n```\n返回结果的item中有联系人Jid\n\n```xml\n<iq id='bv1bs71f'\n       to='user@server.com/balcony'\n       type='result'>\n    <query xmlns='jabber:iq:roster' ver='ver7'>\n      <item jid='contact1@server.com'/>\n      <item jid='contact2@server.com'/>\n    </query>\n  </iq>\n\n```\n\n## 添加联系人(加好友）的流程 \n\n方法有两种，第一种用IQ set, 见[rfc6121](https://xmpp.org/rfcs/rfc6121.html#roster-add).\n\n1. 客户端请求添加联系人\n\nxmlns用`jabber:iq:roster`; 带上想添加的用户jid. name可以不带; `group`分组用。\n\n\n```xml\n<iq from='user@server.com/balcony' type='set' id='roster_2'>\n  <query xmlns='jabber:iq:roster'>\n    <item jid='contact@server.com'\n          name='contact'>\n      <group>Servants</group>\n    </item>\n  </query>\n</iq>\n```\n\n2.1. server通知同一个账户关联的所有客户端: 联系人列表更新了。\n\n```xml\n\n<iq to='user@server.com/balcony'\n    type='set'\n    id='a78b4q6ha463'>\n  <query xmlns='jabber:iq:roster'>\n    <item jid='contact@server.com'\n          name='contact'\n          subscription='none'>\n      <group>Servants</group>\n    </item>\n  </query>\n</iq>\n\n<iq to='user@server.com/chamber'\n    type='set'\n    id='a78b4q6ha464'>\n  <query xmlns='jabber:iq:roster'>\n    <item jid='contact@server.com'\n          name='contact'\n          subscription='none'>\n      <group>Servants</group>\n    </item>\n  </query>\n</iq>\n```\n\nserver回复IQ stanza给请求添加联系人的客户端balcony\n```xml\n<iq to='user@server.com/balcony' type='result' id='roster_2'/>\n```\n\n\n##  删除联系人\n\n给server发送个IQ set， subscription一定是'remove'.\n\n```xml\n\n<iq from='user@server.com/balcony' type='set' id='roster_4'>\n  <query xmlns='jabber:iq:roster'>\n    <item jid='contact@server.com' subscription='remove'/>\n  </query>\n</iq>\n\n```\n\n## Presence\n\n增删联系人的另一种方法是Presence订阅机制.Presence stanza其实有两种功能：\n- 广播online/offline状态, [之前文章](https://suelan.github.io/2019/03/26/XMPP-Overview/#The-Presence-Stanza)提过\n- 控制联系人订阅. 就是增删好友功能咯\n\n我们用type来区分这两种功能。type是`available| unavailable`， presence stanza表达online/offline状态。type若是`subscribe | subscribed | unsubscribe| unsubscribed`，就跟联系人有关啦。\n\n\nsubscribtion有四种状态：\n- NONE :  \n- TO  :  user订阅contact的状态\n- FROM : contact被user订阅\n- BOTH : user跟contact相互subcribe\n\n![flow](https://www.blikoontech.com/wp-content/uploads/2018/03/XMPP_Subscription_Flow.png)\n\n如上图：一开始user跟contact没啥关系，subscription状态都是none。 接着user发送了一条Presence stanza给contact，想subscribe他的状态。如下：\n```xml\n// from user\n<presence to='contact@server.com' type='subscribe'/>\n```\n现在user用`jabber:iq:roster` 查询所有联系人的时候，会发现item多了一条, contact还没确认, 所以 ask='subscribe', subscribtion='none'\n\n```xml\n// user's roster\n<item ask='subscribe' subscription='none' jid='contact@server.com'/>\n```\nserver要将消息转发给contact客户端, contact登录时，会收到一条来自user的presence stanza; type是'subscribe'。 我们可以用这条消息来做“收到来自user添加好友的请求”这样的功能\n```xml\n<presence from='user@server.com' to='contact@server.com' type='subscribe' xmlns='jabber:client'></presence>\n```\n\n同时contact/dev设备会收到Roster更新的信息. \n```xml\n<iq  from='contact@server.com' to='contact@server.com/dev' id='13a99ca5' type='result' xmlns='jabber:client'>\n    <query  xmlns='jabber:iq:roster'>\n         <item  ask='subscribe' subscription='none' jid='user@server.com'/>\n       </query>\n</iq>\n```\n#### 接受请求\n如果contact接受请求，他要发送一条presence给user. type值是'subscribed'\n\n```xml\n<presence to='user@server.com' type='subscribed'/>\n```\n\nuser这边的roster会更新\n```xml\n// user's roster\n<item subscription='to' jid='contact@server.com'/>\n```\n这时在contact的roster列表里，user的subscription是from。 ```xml\n// contact's roster\n<item ask='subscribe' subscription='from' jid='user@server.com'/>\n```\n\n接着contact也请求订阅user \n\n```xml\n<iq from='user@server.com/balcony' type='set' id='roster_2'>\n  <query xmlns='jabber:iq:roster'>\n    <item jid='contact@server.com'\n          name='contact'>\n      <group>Servants</group>\n    </item>\n  </query>\n</iq>\n```\n\nContact同样流程后，他两的subscription都变成了both。\n\n#### 拒绝\n如果contact想拒绝user的请求，也是发送presence \n```xml\n<presence to='user@server.com' type='unsubscribed'/>\n```\n如果user想取消对contact的订阅, 发送presence stanza，type 是unsubscribed\n```xml\n<presence to='contact@server.com' type='unsubscribed'/>\n```\n\n\nref: https://xmpp.org/rfcs/rfc3921.html#roster","tags":["XMPP"],"categories":["XMPP"]},{"title":"XMPP(2):注册账户","url":"/2019/03/29/XMPP-2-注册账户/","content":"\n\n\n## XMPP注册流程\n\n\n#### 1. client发送消息体, 去服务端查询注册需要的字段\n\n\n```xml\n<iq type='get' id='reg1' to='localhost'>\n  <query xmlns='jabber:iq:register'/>\n</iq>\n```\n\nxmlns是 `jabber:iq:register`, type是`get`\n\n#### 2.1. 未注册：返回注册需要的字段\n\n```xml\n<iq type='result' id='reg1'>\n  <query xmlns='jabber:iq:register'>\n    <instructions>\n      Choose a username and password for use with this service.\n      Please also provide your email address.\n    </instructions>\n    <username/>\n    <password/>\n    <email/>\n  </query>\n</iq>\n```\n\n`<instructions/>` element：SHOULD contain an <instructions/> element (whose XML character data MAY be modified to reflect the fact that the entity is currently registered)\n\n#### 2.2. 已注册：服务端的返回结果\n\n```xml\n<iq  xmlns='jabber:client' xml:lang='en' to='olivia@localhost/180244803852118156522754' from='localhost' type='result' id='reg1'>\n    <query  xmlns='jabber:iq:register'>\n        <username>olivia</username>\n        <registered/>\n        <password/>\n        <instructions>Choose a username and password to register with this server</instructions>\n    </query>\n</iq>\n```\n\nhost会根据\"from\"的地址判断entity是否已经注册了，IQ result消息有一个空的`<registered/>`， 标示该entiry已经注册过了。\n\n#### 3.client 注册 \n\niq stanza的type是`set`, xmlns`jabber:iq:register`\n\n```xml\n<iq type='set' id='reg2'>\n  <query xmlns='jabber:iq:register'>\n    <username>bill</username>\n    <password>Calliope</password>\n    <email>bard@shakespeare.lit</email>\n  </query>\n</iq>\n```\n\n#### 4.1 注册成功 \n\n```xml\n<iq type='result' id='reg2'/>\n\n```\n\n#### 4.2 注册失败，命名冲突\n\n```xml\n<iq type='error' id='reg2'>\n  <query xmlns='jabber:iq:register'>\n    <username>bill</username>\n    <password>m1cro$oft</password>\n    <email>billg@bigcompany.com</email>\n  </query>\n  <error code='409' type='cancel'>\n    <conflict xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>\n  </error>\n</iq>\n```\n\n#### 4.3 消息不全 ` <not-acceptable/> `\n\n```xml\n<iq type='error' id='reg2'>\n  <query xmlns='jabber:iq:register'>\n    <username>bill</username>\n    <password>Calliope</password>\n  </query>\n  <error code='406' type='modify'>\n    <not-acceptable xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>\n  </error>\n</iq>\n```\n\n#### 4.4 服务端访问权限问题\n\n```xml\n<iq  xmlns='jabber:client' xml:lang='en' to='olivia@localhost/180244803852118156522754' from='olivia@localhost' type='error' id='reg2'>\n    <query  xmlns='jabber:iq:register'>\n        <email>bard@shakespeare.lit</email>\n        <username>bill</username>\n        <password>Calliope</password>\n    </query>\n    <error  code='403' type='auth'>\n        <forbidden  xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>\n        <text  xmlns='urn:ietf:params:xml:ns:xmpp-stanzas' xml:lang='en'>Access denied by service policy</text>\n    </error>\n</iq>\n```\n\n#### 5.如果用第三方注册的方式，可能需要补充一些额外的信息\n\n客户端查询\n\n```xml\n<iq type='get'\n    from='juliet@capulet.com/balcony'\n    to='contests.shakespeare.lit'\n    id='reg3'>\n  <query xmlns='jabber:iq:register'/>\n</iq>\n```\n\n#### 6.服务端返回消息， 提示需要提供的信息\n\n```xml\n<iq type='result'\n    from='contests.shakespeare.lit'\n    to='juliet@capulet.com/balcony'\n    id='reg3'>\n  <query xmlns='jabber:iq:register'>\n    <instructions>\n      Use the enclosed form to register. If your Jabber client does not\n      support Data Forms, visit http://www.shakespeare.lit/contests.php\n    </instructions>\n    <x xmlns='jabber:x:data' type='form'>\n      <title>Contest Registration</title>\n      <instructions>\n        Please provide the following information\n        to sign up for our special contests!\n      </instructions>\n      <field type='hidden' var='FORM_TYPE'>\n        <value>jabber:iq:register</value>\n      </field>\n      <field type='text-single' label='Given Name' var='first'>\n        <required/>\n      </field>\n      <field type='text-single' label='Family Name' var='last'>\n        <required/>\n      </field>\n      <field type='text-single' label='Email Address' var='email'>\n        <required/>\n      </field>\n      <field type='list-single' label='Gender' var='x-gender'>\n        <option label='Male'><value>M</value></option>\n        <option label='Female'><value>F</value></option>\n      </field>\n    </x>\n  </query>\n</iq>\n```\n\n#### 7.客户端提供信息\n\n```xml\n<iq type='set'\n    from='juliet@capulet.com/balcony'\n    to='contests.shakespeare.lit'\n    id='reg4'>\n  <query xmlns='jabber:iq:register'>\n    <x xmlns='jabber:x:data' type='submit'>\n      <field type='hidden' var='FORM_TYPE'>\n        <value>jabber:iq:register</value>\n      </field>\n      <field type='text-single' label='Given Name' var='first'>\n        <value>Juliet</value>\n      </field>\n      <field type='text-single' label='Family Name' var='last'>\n        <value>Capulet</value>\n      </field>\n      <field type='text-single' label='Email Address' var='email'>\n        <value>juliet@capulet.com</value>\n      </field>\n      <field type='list-single' label='Gender' var='x-gender'>\n        <value>F</value>\n      </field>\n    </x>\n  </query>\n</iq>\n```\n\n## Cancellation of Existing Registration\n\n#### 1. cilent req: \n```xml\n<iq type='set' from='bill@shakespeare.lit/globe' id='unreg1'>\n  <query xmlns='jabber:iq:register'>\n    <remove/>\n  </query>\n</iq>\n```\n跟注册不同的是 `query` 的child多了个`<remove/>`\n\n#### 2.1. 成功注销,server response: \n  \n```xml\n\n<iq type='result' to='bill@shakespeare.lit/globe' id='unreg1'/>\n\n```\n\n#### 2.2.Error Case  \n\n|Condition | Description  |\n| --- | --- |\n| ``<bad-request/>``|\tThe <remove/> element was not the only child element of the <query/> element.|\n|``<forbidden/>``\t| 权限不够|\n|``<not-allowed/>``\t|不允许用户注销账户|\n|``<registration-required/>``|要注销的账户本来就不存在|\n|``<unexpected-request/>``\t| The host is an instant messaging server and the IQ get does not contain a 'from' address because the entity is not registered with the server.|\n\n## 用户修改密码\n\n#### 1. Client:\n```xml\n<iq type='set' to='shakespeare.lit' id='change1'>\n  <query xmlns='jabber:iq:register'>\n    <username>bill</username>\n    <password>newpass</password>\n  </query>\n</iq>\n\n```\n\n这里的密码是明文， 要留意客户端服务端通信是否用SSL或者TLS加密，而且服务端证书可信。\n\n#### 2.1. 成功, Server: \n\n```xml\n<iq type='result' id='change1'/>\n\n```\n\n\n#### 2.2. 失败 Case \n\n\n|Condition | Description  |\n| --- | --- |\n| ``<bad-request/>``| request请求体拼写有问题，比如没带username |\n|``<not-authorized/>`` | 没通过server的安全验证 |\n|``<not-allowed/>`` |\tserver 不允许|\n|``<unexpected-request/>`` | The host is an instant messaging server and the IQ set does not contain a 'from' address because the entity is not registered with the server. |\n\n比如：\n```xml\n// Bad  request\n<iq type='error' from='shakespeare.lit' to='bill@shakespeare.lit/globe' id='change1'>\n  <error code='400' type='modify'>\n    <bad-request xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>\n  </error>\n</iq>\n\n// Not Authorized\n<iq type='error' from='shakespeare.lit' to='bill@shakespeare.lit/globe' id='change1'>\n  <error code='401' type='modify'>\n    <not-authorized xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>\n  </error>\n</iq>\n\n// Not Allowed\n<iq type='error' from='shakespeare.lit' to='bill@shakespeare.lit/globe' id='change1'>\n  <error code='405' type='cancel'>\n    <not-allowed xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>\n  </error>\n</iq>\n```\n\n有时候，服务端需要更多的信息来改密码，这时候它会返回信息提示客户端\n\n```xml\n<iq type='error' from='shakespeare.lit' to='bill@shakespeare.lit/globe' id='change1'>\n  <query xmlns='jabber:iq:register'>\n    <x xmlns='jabber:x:data' type='form'>\n      <title>Password Change</title>\n      <instructions>Use this form to change your password.</instructions>\n      <field type='hidden' var='FORM_TYPE'>\n        <value>jabber:iq:register:changepassword</value>\n      </field>\n      <field type='text-single' label='Username' var='username'>\n        <required/>\n      </field>\n      <field type='text-private' label='Old Password' var='old_password'>\n        <required/>\n      </field>\n      <field type='text-private' label='New Password' var='password'>\n        <required/>\n      </field>\n      <field type='text-single' label='Mother&apos;s Maiden Name' var='x-mmn'>\n        <required/>\n      </field>\n    </x>\n  </query>\n  <error code='401' type='modify'>\n    <not-authorized xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>\n  </error>\n</iq>\n\n```\n\n然后客户端返回相关信息\n\n```xml\n<iq type='set' from='bill@shakespeare.lit/globe' to='shakespeare.lit' id='change2'>\n  <query xmlns='jabber:iq:register'>\n    <x xmlns='jabber:x:data' type='submit'>\n      <field type='hidden' var='FORM_TYPE'>\n        <value>jabber:iq:register:changepassword</value>\n      </field>\n      <field type='text-single' var='username'>\n        <value>bill@shakespeare.lit</value>\n      </field>\n      <field type='text-private' var='old_password'>\n        <value>theglobe</value>\n      </field>\n      <field type='text-private' var='password'>\n        <value>groundlings</value>\n      </field>\n      <field type='text-single' var='x-mmn'>\n        <value>Throckmorton</value>\n      </field>\n    </x>\n  </query>\n</iq>\n```\n\nref: [XEP-0077: In-Band Registration](https://xmpp.org/extensions/xep-0077.html#usecases)\n","tags":["XMPP"],"categories":["XMPP"]},{"title":"XMPP Overview","url":"/2019/03/26/XMPP-Overview/","content":"\n\n\n跟朋友做一个项目，想快速开发，选了XMPP协议。它是一套通信协议。分为两部分，[XMPP Core Services](https://xmpp.org/rfcs/rfc6121.html#A%20Sample%20Session) 和 XMPP Extension Protocols. 核心由基础feature组成，扩展协议就非常丰富，而且一直在发展。Wiki上有张各种IM协议的汇总表，推荐！\n\n- [Comparison of instant messaging protocols - Wikipedia](https://en.wikipedia.org/wiki/Comparison_of_instant_messaging_protocols)\n\n\n## XMPP Addressing \n\n这是一张Client-Server的图，图里的server、client都遵循XMPP协议。叫 XMPP entity. 它们有各自唯一的Address, 格式如'username@server.com', 叫 JID (Jaber ID)\n [RFC 7622 - Extensible Messaging and Presence Protocol (XMPP): Address Format](https://datatracker.ietf.org/doc/rfc7622/)\n \n ![28a215f7.png](/img/32c16f22-9862-45e8-b15f-1b1eceb7b30f/28a215f7.png)\n \n其中resource是拿来做同一账号多客户端标记的， 比如图中`User1` 从 pc ,phone1 和 phone2登录同一账号，resource分别是 `pc`, `iphone1`,`iphone2`\n \n \n ## XMPP Client- Server Streams\n \n 客户端与服务端通过长链接方式通信，现在多用WebSocket。当客户端跟服务端握手成功，它们开始用 XML stream通信。\n \n ![f1565a2e.png](/img/32c16f22-9862-45e8-b15f-1b1eceb7b30f/f1565a2e.png)\\\n\n \nXML stream 总是以  ``<stream>`` 开头， ``</stream>`` tag结尾。是xml消息的容器。\n\n```\nAn XML stream is a container for the exchange of XML elements between any two entities over a network. \nDuring the life of the stream, the entity that initiated it can send an unbounded number of XML elements over the stream, either elements used to negotiate the stream (e.g., to complete TLS negotiation or SASL negotiation) or XML stanzas. \n```\n\n下面是client跟server的一次消息交互， 绿色来自client的，黑色消息来自server\n\n \n  ![f97e583b.png](/img/32c16f22-9862-45e8-b15f-1b1eceb7b30f/65d38868.png)\n\n ### XML stanza\n An XML stanza is the basic unit of meaning in XMPP. A stanza is a first-level element (at depth=1 of the stream) whose element name is \"message\", \"presence\", or \"iq\" and whose qualifying namespace is 'jabber:client' or 'jabber:server'. \n \n \n ### XMPP Communication Primitives\n\nA `stanza` is the smallest piece of XML data a client can send to a server ( server send to client) in one package.\n\nxmpp中，服务端、客户数据交换时，最小XML数据单位 叫 stanza。如上图，绿色的就是一个stanza，黑色的也是一个stanza。Stanza有几种类型: `message`, `iq`, `presence`。 \n\n#### The Message Stanza\n\nThe <message/> stanza is meant to be used to send data between XMPP entities.\n\n![6fe8a15e.png](/img/32c16f22-9862-45e8-b15f-1b1eceb7b30f/6fe8a15e.png)\n\n - from：发送方\n - to： 接收方\n - body: 消息内容\n - type 有几种类型:\n     -`<message type=”chat”/>` ( chat message stanza) \n     - `< message type=”groupchat”/>` ( groupchat message stanza)\n     - `< message type=”error”/>` (error message stanza)\n\n#### The Presence Stanza\n\n用来表示在线状态的\n \n\n![0fbe995b.png](/img/32c16f22-9862-45e8-b15f-1b1eceb7b30f/0fbe995b.png)\n\n`show` 标签里可能会有的几种状态: \n`chat` : online and available for chat ; \n`away` : 暂时离开\n`xa` : 长时间离开\n`dnd`: 请勿打扰\n\n如果你想知道别的状态，需要先发消息给Server，subscribe别人。 \n\n\n#### The IQ stanza\n \n The IQ( Info/Query) stanza is used to get some information from the server ( info about the server or its registered clients) or to apply some settings to the server.\n \n 用来获取消息，或者请求设置\n  \nType属性中的类型 :get ,set ,result or error. \n- `< iq type=”get”/>` stanzas are used to get(ask) some information ( from the server). \n- `<iq type=”set”/>` stanzas are used to apply some settings to the server.When you send get/set IQ stanzas to the server ,\n- it can reply either with an `< iq type=”result”/>` stanza when your request has been successfully processed by the server or \n- `<iq type=”error”/>` stanza when something has gone wrong with your request.The figure below shows an IQ stanza that we send to the server and the reply we get from the server.\n\n\n![30c96f66.png](/img/32c16f22-9862-45e8-b15f-1b1eceb7b30f/30c96f66.png)\n\n\nThe client sends an IQ get stanza to the server to request its contact list.We know it is asking for the contact list because of the `jabber:iq:roster` XML namespace.\n\nThe XMPP engine in the server is programmed to know that when a client sends `jabber:iq:roster` namespaced IQ ,it wants to retrieve its contact list.There are other `namespaces` in XMPP for other uses and you will surely come accross them in your XMPPing journey.\n\nThe server responds with a list of the JID’s contacts wraped within a `jabber:iq:roster` namespaced `<query/>`tag.\n\n\n## 本地搭建 Server \n\n我搭的是ejabberd. 官方安装教程: [Installing ejabberd \\| ejabberd Docs](https://docs.ejabberd.im/admin/installation/#install-on-macos)\n\n#### 启动服务\n\n```\ncd /Applications/ejabberd-19.02\n//开启服务\n./bin/ejabberdctl start  \n//状态\n./bin/ejabberdctl status  \n\n// help 查看更多功能哦\n./bin/ejabberdctl help \n```\n\n#### 注册账户\n\n打开 [admin 页面](http://localhost:5280/admin/), 虚拟主机 -> localhost(可能你的名字不一样) -> 用户。 现在你可以自己创建账户了。\n\n![578b88b6.png](/img/32c16f22-9862-45e8-b15f-1b1eceb7b30f/578b88b6.png)\n\n\n如果有自定义需求,配置教程 [Configuring ejabberd \\| ejabberd Docs](https://docs.ejabberd.im/admin/configuration/#mod-http-ws) \n \n#### 客户端玩起来\n\n客户端有很多[选择](https://xmpp.org/software/clients.html)，不过大多数都是渣。如果是WebSocket，用这个 [GitHub - processone/xmpp-websocket-client: Test XMPP Websocket client](https://github.com/processone/xmpp-websocket-client) 调试可以看到stanza，挺方便的。\n\n如果Mac用户报auth问题，可以打开`vim conf/ejabberd.yml`, `tls`配置成`false`\n![5202ee46.png](/img/32c16f22-9862-45e8-b15f-1b1eceb7b30f/5202ee46.png)\n\n#### 关于js lib\n打算用React Native写，lib选了 [GitHub - xmppjs/xmpp.js: XMPP for JavaScript](https://github.com/xmppjs/xmpp.js) 。当然 Web多用框架 Strophe.js。这儿有个简单比较[How do you compare to strophe.js · Issue #217 · xmppjs/xmpp.js · GitHub](https://github.com/xmppjs/xmpp.js/issues/217)\n\n### 其他资料\n\n- 简单介绍 [A friendly introduction to XMPP – blikoon](https://www.blikoontech.com/xmpp/xmpp-a-soft-friendly-introduction)\n\n- 官方协议很详细，例子也很形象。 [Extensible Messaging and Presence Protocol (XMPP): Core](https://xmpp.org/rfcs/rfc6120.html#tls)\n\n- 如何选择即时通讯应用的数据传输格式 [如何选择即时通讯应用的数据传输格式-其它分享/专项技术区 - 即时通讯开发者社区!](http://www.52im.net/thread-276-1-1.html)\n- 强列建议将Protobuf作为你的即时通讯应用数据传输格式 [强列建议将Protobuf作为你的即时通讯应用数据传输格式-其它分享/专项技术区 - 即时通讯开发者社区!](http://www.52im.net/thread-277-1-1.html) \n\n\n\n\n","tags":["XMPP"],"categories":["NetWork"]}]