[{"title":"JWT 入门","url":"/2019/04/03/JWT-入门/","content":"\n# JWT \n\n## 什么是JSON Web Tokens (JWT)？ \n\n\n```\n  JSON Web Token (JWT) is a compact, URL-safe means of representing\n   claims to be transferred between two parties.  The claims in a JWT\n   are encoded as a JSON object that is used as the payload of a JSON\n   Web Signature (JWS) structure or as the plaintext of a JSON Web\n   Encryption (JWE) structure, enabling the claims to be digitally\n   signed or integrity protected with a Message Authentication Code\n   (MAC) and/or encrypted.\n   \n\n```\n\n## 怎么用？ \n\nauthentication时，当user成功登录，server生成access token, 发送给user；user请求server时带上JWT，server通过JWT验证是否是可信任的客户端请求了。\n\n\n![1*SSXUQJ1dWjiUrDoKaaiGLA.png](https://cdn-images-1.medium.com/max/1600/1*SSXUQJ1dWjiUrDoKaaiGLA.png)\n\n## 结构\n\n在客户端看来JWT是一串encode加密过的字符串，`header.payload.signature`，如下图左边。但它decode后其实是下图右边的JSON结构体\n\n![legacy-app-auth-5.png](https://cdn.auth0.com/blog/legacy-app-auth/legacy-app-auth-5.png)\n\n#### 1. 生成header\n\ne.g.\n```json\n{\n  \"alg\": \"HS256\",\n  \"typ\": \"JWT\"\n}\n```\n\n这里，alg的值指定用HMAC-SHA256算法签名\n\n#### 2. 生成payload\n\n包含用户相关的信息\n```\nThe second part of the token is the payload, which contains the claims. \nClaims are statements about an entity (typically, the user) and additional data. \n```\n有三种[claims](https://tools.ietf.org/html/rfc7519#section-4.1): registered, public, and private claims.\n\ne.g.\n```json\n\n{\n  \"sub\": \"1234567890\",\n  \"name\": \"John Doe\",\n  \"iat\": 1516239022\n}\n```\n\n#### 3.生成signature\n\n```js\n\nHMACSHA256(\n  base64UrlEncode(header) + \".\" +\n  base64UrlEncode(payload),\n  your-256-bit-secret\n) \n```\n把header跟payload encode结构后，用'.'连接，生成\n\n<span style=\"color:#fb015b\"> eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9</span><span>.</span>\n<span style=\"color:#d63aff\"> eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ</span>\n\n\n再用指定的hash算法(例子是HS256),用私钥（服务端的）生成签名.\n\n<span style=\"color:#00b9f1\">SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c<span>\n\n\n## 验证\n\n如图1， JWT由Authentication server生成， 在client认证后发给client； client请求application server的时候带上JWT，application server在认证阶段从Authentiation server那儿拿到scret key；用同样算法生成signature， 跟client发来的JWT的signature做比较，看是否match。\n\n\n\n\n\n\n\n\n\n\n\n\n[5 Easy Steps to Understanding JSON Web Tokens (JWT)](https://medium.com/vandium-software/5-easy-steps-to-understanding-json-web-tokens-jwt-1164c0adfcec)\n[JSON Web Token Introduction - jwt.io](https://jwt.io/introduction/) \n[RFC 7519 - JSON Web Token (JWT)](https://tools.ietf.org/html/rfc7519)","tags":["-- Auth"]},{"title":"XMPP(4):Search 和 vCard","url":"/2019/03/31/XMPP-4-Search-vCard/","content":"\n# XMPP Search \n\n`jabber:iq:search`协议用来查找用户信息。\n\n1. 我们先查询可以用哪些字段查找用户\n\n```xml\n// Requesting Search Fields\n\n<iq type='get'\n    from='romeo@montague.net/home'\n    to='characters.shakespeare.lit'\n    id='search1'\n    xml:lang='en'>\n  <query xmlns='jabber:iq:search'/>\n</iq>\n```\n\n2. service 返回\n\n```xml\n// Receiving Search Fields\n<iq type='result'\n    from='characters.shakespeare.lit'\n    to='romeo@montague.net/home'\n    id='search1'\n    xml:lang='en'>\n  <query xmlns='jabber:iq:search'>\n    <instructions>\n      Fill in one or more fields to search\n      for any matching Jabber users.\n    </instructions>\n    <first/>\n    <last/>\n    <nick/>\n    <email/>\n  </query>\n</iq>\n```\n3. 服务端返回，可以用`first` `last` `nick` `email` 这几个字段找人。接着就用last查人.\n\n```xml\n// Submitting a Search Request\n\n<iq type='set'\n    from='romeo@montague.net/home'\n    to='characters.shakespeare.lit'\n    id='search2'\n    xml:lang='en'>\n  <query xmlns='jabber:iq:search'>\n    <last>Capulet</last>\n  </query>\n</iq>\n```\n\n服务端可以能会返回好多个last匹配的item\n```xml\n<iq type='result'\n    from='characters.shakespeare.lit'\n    to='romeo@montague.net/home'\n    id='search2'\n    xml:lang='en'>\n  <query xmlns='jabber:iq:search'>\n    <item jid='juliet@capulet.com'>\n      <first>Juliet</first>\n      <last>Capulet</last>\n      <nick>JuliC</nick>\n      <email>juliet@shakespeare.lit</email>\n    </item>\n    <item jid='tybalt@shakespeare.lit'>\n      <first>Tybalt</first>\n      <last>Capulet</last>\n      <nick>ty</nick>\n      <email>tybalt@shakespeare.lit</email>\n    </item>\n  </query>\n</iq>\n```\n没有结果的话，query就没有子元素\n\n```xml\n<iq type='result'\n    from='characters.shakespeare.lit'\n    to='romeo@montague.net/home'\n    id='search2'\n    xml:lang='en'>\n  <query xmlns='jabber:iq:search'/>\n</iq>\n```\n\nXMPP Search \n\n`jabber:iq:search`协议用来查找用户信息。\n\n我们先查询可以用哪些字段查找用户\n\n```xml\n// Requesting Search Fields\n\n<iq type='get'\n    from='romeo@montague.net/home'\n    to='characters.shakespeare.lit'\n    id='search1'\n    xml:lang='en'>\n  <query xmlns='jabber:iq:search'/>\n</iq>\n```\n\nservice 返回\n\n```xml\n// Receiving Search Fields\n<iq type='result'\n    from='characters.shakespeare.lit'\n    to='romeo@montague.net/home'\n    id='search1'\n    xml:lang='en'>\n  <query xmlns='jabber:iq:search'>\n    <instructions>\n      Fill in one or more fields to search\n      for any matching Jabber users.\n    </instructions>\n    <first/>\n    <last/>\n    <nick/>\n    <email/>\n  </query>\n</iq>\n```\n服务端返回，可以用`first` `last` `nick` `email` 这几个字段找人。接着就用last查人.\n\n```xml\n// Submitting a Search Request\n\n<iq type='set'\n    from='romeo@montague.net/home'\n    to='characters.shakespeare.lit'\n    id='search2'\n    xml:lang='en'>\n  <query xmlns='jabber:iq:search'>\n    <last>Capulet</last>\n  </query>\n</iq>\n```\n\n服务端可以能会返回好多个last匹配的item\n```xml\n<iq type='result'\n    from='characters.shakespeare.lit'\n    to='romeo@montague.net/home'\n    id='search2'\n    xml:lang='en'>\n  <query xmlns='jabber:iq:search'>\n    <item jid='juliet@capulet.com'>\n      <first>Juliet</first>\n      <last>Capulet</last>\n      <nick>JuliC</nick>\n      <email>juliet@shakespeare.lit</email>\n    </item>\n    <item jid='tybalt@shakespeare.lit'>\n      <first>Tybalt</first>\n      <last>Capulet</last>\n      <nick>ty</nick>\n      <email>tybalt@shakespeare.lit</email>\n    </item>\n  </query>\n</iq>\n```\n没有结果的话，query就没有子元素\n\n```xml\n<iq type='result'\n    from='characters.shakespeare.lit'\n    to='romeo@montague.net/home'\n    id='search2'\n    xml:lang='en'>\n  <query xmlns='jabber:iq:search'/>\n</iq>\n```\n\n# vCard \nvCard协议主要负责用户信息存储，就像个人名片。\n\n1. 查看自己的vCard\n如果客户端想查询自己的vCard, 需要发送IQ-set stanza，注意没有to地址哦。\n\n```xml\n<iq from='stpeter@jabber.org/roundabout'\n    id='v1'\n    type='get'>\n  <vCard xmlns='vcard-temp'/>\n</iq>\n```\n\n2. 返回信息\n接着服务端返回一堆的用户信息\n\n```xml\n\n<iq id='v1'\n    to='stpeter@jabber.org/roundabout'\n    type='result'>\n  <vCard xmlns='vcard-temp'>\n    <FN>Peter Saint-Andre</FN>\n    <N>\n      <FAMILY>Saint-Andre</FAMILY>\n      <GIVEN>Peter</GIVEN>\n      <MIDDLE/>\n    </N>\n    <NICKNAME>stpeter</NICKNAME>\n    <URL>http://www.xmpp.org/xsf/people/stpeter.shtml</URL>\n    <BDAY>1966-08-06</BDAY>\n    <ORG>\n      <ORGNAME>XMPP Standards Foundation</ORGNAME>\n      <ORGUNIT/>\n    </ORG>\n    <TITLE>Executive Director</TITLE>\n    <ROLE>Patron Saint</ROLE>\n    <TEL><WORK/><VOICE/><NUMBER>303-308-3282</NUMBER></TEL>\n    <TEL><WORK/><FAX/><NUMBER/></TEL>\n    <TEL><WORK/><MSG/><NUMBER/></TEL>\n    <ADR>\n      <WORK/>\n      <EXTADD>Suite 600</EXTADD>\n      <STREET>1899 Wynkoop Street</STREET>\n      <LOCALITY>Denver</LOCALITY>\n      <REGION>CO</REGION>\n      <PCODE>80202</PCODE>\n      <CTRY>USA</CTRY>\n    </ADR>\n    <TEL><HOME/><VOICE/><NUMBER>303-555-1212</NUMBER></TEL>\n    <TEL><HOME/><FAX/><NUMBER/></TEL>\n    <TEL><HOME/><MSG/><NUMBER/></TEL>\n    <ADR>\n      <HOME/>\n      <EXTADD/>\n      <STREET/>\n      <LOCALITY>Denver</LOCALITY>\n      <REGION>CO</REGION>\n      <PCODE>80209</PCODE>\n      <CTRY>USA</CTRY>\n    </ADR>\n    <EMAIL><INTERNET/><PREF/><USERID>stpeter@jabber.org</USERID></EMAIL>\n    <JABBERID>stpeter@jabber.org</JABBERID>\n    <DESC>\n      More information about me is located on my\n      personal website: http://www.saint-andre.com/\n    </DESC>\n  </vCard>\n</iq>\n```\n如果没有相关vCard，会返回error\n```xml\n// item-not-found\n<iq id='v1'\n    to='stpeter@jabber.org/roundabout'\n    type='error'>\n  <vCard xmlns='vcard-temp'/>\n  <error type='cancel'>\n    <item-not-found xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>\n  </error>\n</iq>\n```\n\n```xml\n// empty element\n<iq id='v1'\n    to='stpeter@jabber.org/roundabout'\n    type='result'>\n  <vCard xmlns='vcard-temp'/>\n</iq>\n\n```\n\n3. 查看别人的vCard\n\n用IQ-get stanza, 带上to地址\n\n```xml \n\n<iq from='stpeter@jabber.org/roundabout'\n    id='v3'\n    to='jer@jabber.org'\n    type='get'>\n  <vCard xmlns='vcard-temp'/>\n</iq>\n```\n\n```xml\n<iq from='jer@jabber.org'\n    to='stpeter@jabber.org/roundabout'\n    type='result'\n    id='v3'>\n  <vCard xmlns='vcard-temp'>\n    <FN>JeremieMiller</FN>\n    <N>\n      <GIVEN>Jeremie</GIVEN>\n      <FAMILY>Miller</FAMILY>\n      <MIDDLE/>\n    </N>\n    <NICKNAME>jer</NICKNAME>\n    <EMAIL><INTERNET/><PREF/><USERID>jeremie@jabber.org</USERID></EMAIL>\n    <JABBERID>jer@jabber.org</JABBERID>\n  </vCard>\n</iq>\n\n```\n\n4. 更新vCard\n\n客户端可以用IQ-set stanza 更新自己的vCard信息\n\n```xml\n<iq id='v2' type='set'>\n  <vCard xmlns='vcard-temp'>\n    <FN>Peter Saint-Andre</FN>\n    <N>\n      <FAMILY>Saint-Andre</FAMILY>\n      <GIVEN>Peter</GIVEN>\n      <MIDDLE/>\n    </N>\n    <NICKNAME>stpeter</NICKNAME>\n    <URL>http://www.xmpp.org/xsf/people/stpeter.shtml</URL>\n    <BDAY>1966-08-06</BDAY>\n    <ORG>\n      <ORGNAME>XMPP Standards Foundation</ORGNAME>\n      <ORGUNIT/>\n    </ORG>\n    <TITLE>Executive Director</TITLE>\n    <ROLE>Patron Saint</ROLE>\n    <TEL><WORK/><VOICE/><NUMBER>303-308-3282</NUMBER></TEL>\n    <TEL><WORK/><FAX/><NUMBER/></TEL>\n    <TEL><WORK/><MSG/><NUMBER/></TEL>\n    <ADR>\n      <WORK/>\n      <EXTADD>Suite 600</EXTADD>\n      <STREET>1899 Wynkoop Street</STREET>\n      <LOCALITY>Denver</LOCALITY>\n      <REGION>CO</REGION>\n      <PCODE>80202</PCODE>\n      <CTRY>USA</CTRY>\n    </ADR>\n    <TEL><HOME/><VOICE/><NUMBER>303-555-1212</NUMBER></TEL>\n    <TEL><HOME/><FAX/><NUMBER/></TEL>\n    <TEL><HOME/><MSG/><NUMBER/></TEL>\n    <ADR>\n      <HOME/>\n      <EXTADD/>\n      <STREET/>\n      <LOCALITY>Denver</LOCALITY>\n      <REGION>CO</REGION>\n      <PCODE>80209</PCODE>\n      <CTRY>USA</CTRY>\n    </ADR>\n    <EMAIL><INTERNET/><PREF/><USERID>stpeter@jabber.org</USERID></EMAIL>\n    <JABBERID>stpeter@jabber.org</JABBERID>\n    <DESC>\n      Check out my blog at https://stpeter.im/\n    </DESC>\n  </vCard>\n</iq>\n```\n\n服务端返回结果\n\n```xml\n<iq id='v2'\n    to='stpeter@jabber.org/roundabout'\n    type='result'/>\n```\n\nref: https://xmpp.org/extensions/xep-0054.html#intro\nref: https://xmpp.org/extensions/xep-0055.html#intro","tags":["XMPP"]},{"title":"影响曝光的3个因素","url":"/2019/03/31/影响曝光的几个因素/","content":"\n\n\n## 进光量\n\n`曝光`也指单位面积上光子的数量。\n\n- 如果我们没有捕获足够的光，那么相片就会`欠曝`:\n\n<img src=\"/img/15000130641224/15000133443588.jpg\" width = \"368\" height = \"500\" alt=\"图片名称\" align=center />\n\n\n- 如果我们捕获的光太多，图像就会`过曝`:\n\n<img src=\"/img/15000130641224/15000133832576.jpg\" width = \"368\" height = \"500\" alt=\"图片名称\" align=center />\n\n\n\n## 三个要素可以影响曝光的进光量\n\n- 快门速度\n- 光圈\n- 感光度 (ISO)\n\n![](/img/15000130641224/15006272782478.jpg)\n\n想象相机是黑暗房间，有个窗户（光圈）， 有块窗帘（快门），窗户越大进光量越大，窗帘拉开的时间越久。 窗户对面有面镜子（感官元件），捕获光子成像。\n\n## 1.快门速度\n当我们捕捉图片时，图像传感器需要捕捉一段时间的光。 这个时间段曝光时间（也叫快门速度。相机中一般用`1/400、8`这样的形式表示）这个数值越大，快门开启的时间越长，进入相机的光线就越多，但运动的物体很可能模糊.\n\n看下图： \n\n![](/img/15000130641224/15006271573170.jpg)\n\n\n## 2.感光度 (ISO)\n\n它被用来衡量图像传感器对光的`灵敏程度`，以及因此带来的曝光噪音。ISO越大，传感器越灵敏，捕获光能力越强，照片越亮，但噪点也越多。\n\n![](/img/15000130641224/15006272197963.jpg)\n\n####左： ISO 32 和 1/3 秒曝光\n####右： ISO 1600 和 1/180 秒\n![](/img/15000130641224/15000247388896.jpg)\n\n\n**图像传感器**\n这个部分就相当于我们眼睛里的视网膜。图像传感器可以将光或者光子转换为电信号。\n\n**图像传感器是由海量的独个的像素传感器串起来的巨大矩形区域** 我们可以将每个像素传感器想象成一个装电荷的桶。当光子撞击到像素传感器的光二极管时，它们将在这个像素的桶中缓慢地积攒电荷。最后，每个像素都会有它自己的一小桶电子。这些电荷的数量是依赖于光子数量的 -- 或者说是决定于打到这个特定的点上的光的强度。\n\n因为我们有一个像素传感器的二维阵列，我们现在就拥有能够反应出所有这些位置的光的强度的一组二维电荷阵列了。**在 iPhone 6 上，我们有八百万个这样的微小的像素传感器**，以及它们所对应的电荷桶。\n\n\n## 3.光圈\n\n相机的镜头的光圈(Aperture)是用来衡量到达图像感应器的光所通过的`通孔的大小`的\n\n\n#### 曝光值\n\n曝光值（Exposure Value，EV）代表能够给出同样曝光的所有相机光圈快门组合\n\n![](/img/15000130641224/15026013567638.jpg)\n其中N是光圈（f值）；t是曝光时间（快门），单位秒。曝光值0（EV0）对应于曝光时间为1秒而光圈为f/1.0的组合或其等效组合。\n\n`曝光值 != 曝光量`\n\n####曝光量（photometric exposure）\n\n![](/img/15000130641224/15026015278605.jpg)\n其中  H是曝光量， E是影像平面的照度，而  t是曝光时间。照度 E由f值所控制，但也取决于环境亮度。\n\n## 光圈与景深\n\n##### 景深\n\n![](/img/15000130641224/15026018990936.jpg)\n\n![](/img/15000130641224/15026016717518.jpg)\n\n![](/img/15000130641224/15026016975426.jpg)\n\n光圈系数= `镜头焦距/光圈孔径`；常用的镜头的光圈数序列为\n`1， 1.4， 2， 2.8， 4， 5.6， 8， 11， 16， 22， 32， 45， 64，90，128`\n\n\n\n\n","tags":["CV"]},{"title":"XMPP(3):Roster&联系人","url":"/2019/03/31/Roster-联系人/","content":"\n\n\n\nXMPP中联系人模块协议是`jabber:iq:roster`. Roster直接翻译叫花名册，其实它就是联系人列表啦。\n\n## 客户端获取联系人列表\n\n比较简单，发送IQ stanza给server. xmlns=`jabber:iq:roster`;type='get'\n\n```xml\n\n<iq from='user@server.com/balcony'\n       id='bv1bs71f'\n       type='get'>\n    <query xmlns='jabber:iq:roster'/>\n  </iq>\n\n```\n返回结果的item中有联系人Jid\n\n```xml\n<iq id='bv1bs71f'\n       to='user@server.com/balcony'\n       type='result'>\n    <query xmlns='jabber:iq:roster' ver='ver7'>\n      <item jid='contact1@server.com'/>\n      <item jid='contact2@server.com'/>\n    </query>\n  </iq>\n\n```\n\n## 添加联系人(加好友）的流程 \n\n方法有两种，第一种用IQ set, 见[rfc6121](https://xmpp.org/rfcs/rfc6121.html#roster-add).\n\n1. 客户端请求添加联系人\n\nxmlns用`jabber:iq:roster`; 带上想添加的用户jid. name可以不带; `group`分组用。\n\n\n```xml\n<iq from='user@server.com/balcony' type='set' id='roster_2'>\n  <query xmlns='jabber:iq:roster'>\n    <item jid='contact@server.com'\n          name='contact'>\n      <group>Servants</group>\n    </item>\n  </query>\n</iq>\n```\n\n2.1. server通知同一个账户关联的所有客户端: 联系人列表更新了。\n\n```xml\n\n<iq to='user@server.com/balcony'\n    type='set'\n    id='a78b4q6ha463'>\n  <query xmlns='jabber:iq:roster'>\n    <item jid='contact@server.com'\n          name='contact'\n          subscription='none'>\n      <group>Servants</group>\n    </item>\n  </query>\n</iq>\n\n<iq to='user@server.com/chamber'\n    type='set'\n    id='a78b4q6ha464'>\n  <query xmlns='jabber:iq:roster'>\n    <item jid='contact@server.com'\n          name='contact'\n          subscription='none'>\n      <group>Servants</group>\n    </item>\n  </query>\n</iq>\n```\n\nserver回复IQ stanza给请求添加联系人的客户端balcony\n```xml\n<iq to='user@server.com/balcony' type='result' id='roster_2'/>\n```\n\n\n##  删除联系人\n\n给server发送个IQ set， subscription一定是'remove'.\n\n```xml\n\n<iq from='user@server.com/balcony' type='set' id='roster_4'>\n  <query xmlns='jabber:iq:roster'>\n    <item jid='contact@server.com' subscription='remove'/>\n  </query>\n</iq>\n\n```\n\n## Presence\n\n增删联系人的另一种方法是Presence订阅机制.Presence stanza其实有两种功能：\n- 广播online/offline状态, [之前文章](https://suelan.github.io/2019/03/26/XMPP-Overview/#The-Presence-Stanza)提过\n- 控制联系人订阅. 就是增删好友功能咯\n\n我们用type来区分这两种功能。type是`available| unavailable`， presence stanza表达online/offline状态。type若是`subscribe | subscribed | unsubscribe| unsubscribed`，就跟联系人有关啦。\n\n\nsubscribtion有四种状态：\n- NONE :  \n- TO  :  user订阅contact的状态\n- FROM : contact被user订阅\n- BOTH : user跟contact相互subcribe\n\n![flow](https://www.blikoontech.com/wp-content/uploads/2018/03/XMPP_Subscription_Flow.png)\n\n如上图：一开始user跟contact没啥关系，subscription状态都是none。 接着user发送了一条Presence stanza给contact，想subscribe他的状态。如下：\n```xml\n// from user\n<presence to='contact@server.com' type='subscribed'/>\n```\n现在user用`jabber:iq:roster` 查询所有联系人的时候，会发现item多了一条, contact还没确认, 所以 ask='subscribe', subscribtion='none'\n\n```xml\n// user's roster\n<item ask='subscribe' subscription='none' jid='contact@server.com'/>\n```\n如果contact接受请求，他要发送一条presence\n\n```xml\n<presence to='user@server.com' type='subscribed'/>\n```\n\nuser这边的roster会更新\n```xml\n// user's roster\n<item subscription='to' jid='contact@server.com'/>\n```\n这时在contact的roster列表里，user的subscription是from。 接着contact也请求订阅user \n```xml\n// contact's roster\n<item ask='subscribe' subscription='from' jid='user@server.com'/>\n```\n同样流程后，他两的subscription都变成了both。\n\n如果contact想拒绝user的请求，也是发送presence \n```xml\n<presence to='user@server.com' type='unsubscribed'/>\n```\n如果user想取消对contact的订阅, 发送presence stanza，type 是unsubscribed\n```xml\n<presence to='contact@server.com' type='unsubscribed'/>\n```\n\n\nref: https://xmpp.org/rfcs/rfc3921.html#roster","tags":["XMPP"]},{"title":"XMPP(2):注册账户","url":"/2019/03/29/XMPP-2-注册账户/","content":"\n\n\n## XMPP注册流程\n\n\n#### 1. client发送消息体, 去服务端查询注册需要的字段\n\n\n```xml\n<iq type='get' id='reg1' to='localhost'>\n  <query xmlns='jabber:iq:register'/>\n</iq>\n```\n\nxmlns是 `jabber:iq:register`, type是`get`\n\n#### 2.1. 未注册：返回注册需要的字段\n\n```xml\n<iq type='result' id='reg1'>\n  <query xmlns='jabber:iq:register'>\n    <instructions>\n      Choose a username and password for use with this service.\n      Please also provide your email address.\n    </instructions>\n    <username/>\n    <password/>\n    <email/>\n  </query>\n</iq>\n```\n\n`<instructions/>` element：SHOULD contain an <instructions/> element (whose XML character data MAY be modified to reflect the fact that the entity is currently registered)\n\n#### 2.2. 已注册：服务端的返回结果\n\n```xml\n<iq  xmlns='jabber:client' xml:lang='en' to='olivia@localhost/180244803852118156522754' from='localhost' type='result' id='reg1'>\n    <query  xmlns='jabber:iq:register'>\n        <username>olivia</username>\n        <registered/>\n        <password/>\n        <instructions>Choose a username and password to register with this server</instructions>\n    </query>\n</iq>\n```\n\nhost会根据\"from\"的地址判断entity是否已经注册了，IQ result消息有一个空的`<registered/>`， 标示该entiry已经注册过了。\n\n#### 3.client 注册 \n\niq stanza的type是`set`, xmlns`jabber:iq:register`\n\n```xml\n<iq type='set' id='reg2'>\n  <query xmlns='jabber:iq:register'>\n    <username>bill</username>\n    <password>Calliope</password>\n    <email>bard@shakespeare.lit</email>\n  </query>\n</iq>\n```\n\n#### 4.1 注册成功 \n\n```xml\n<iq type='result' id='reg2'/>\n\n```\n\n#### 4.2 注册失败，命名冲突\n\n```xml\n<iq type='error' id='reg2'>\n  <query xmlns='jabber:iq:register'>\n    <username>bill</username>\n    <password>m1cro$oft</password>\n    <email>billg@bigcompany.com</email>\n  </query>\n  <error code='409' type='cancel'>\n    <conflict xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>\n  </error>\n</iq>\n```\n\n#### 4.3 消息不全 ` <not-acceptable/> `\n\n```xml\n<iq type='error' id='reg2'>\n  <query xmlns='jabber:iq:register'>\n    <username>bill</username>\n    <password>Calliope</password>\n  </query>\n  <error code='406' type='modify'>\n    <not-acceptable xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>\n  </error>\n</iq>\n```\n\n#### 4.4 服务端访问权限问题\n\n```xml\n<iq  xmlns='jabber:client' xml:lang='en' to='olivia@localhost/180244803852118156522754' from='olivia@localhost' type='error' id='reg2'>\n    <query  xmlns='jabber:iq:register'>\n        <email>bard@shakespeare.lit</email>\n        <username>bill</username>\n        <password>Calliope</password>\n    </query>\n    <error  code='403' type='auth'>\n        <forbidden  xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>\n        <text  xmlns='urn:ietf:params:xml:ns:xmpp-stanzas' xml:lang='en'>Access denied by service policy</text>\n    </error>\n</iq>\n```\n\n#### 5.如果用第三方注册的方式，可能需要补充一些额外的信息\n\n客户端查询\n\n```xml\n<iq type='get'\n    from='juliet@capulet.com/balcony'\n    to='contests.shakespeare.lit'\n    id='reg3'>\n  <query xmlns='jabber:iq:register'/>\n</iq>\n```\n\n#### 6.服务端返回消息， 提示需要提供的信息\n\n```xml\n<iq type='result'\n    from='contests.shakespeare.lit'\n    to='juliet@capulet.com/balcony'\n    id='reg3'>\n  <query xmlns='jabber:iq:register'>\n    <instructions>\n      Use the enclosed form to register. If your Jabber client does not\n      support Data Forms, visit http://www.shakespeare.lit/contests.php\n    </instructions>\n    <x xmlns='jabber:x:data' type='form'>\n      <title>Contest Registration</title>\n      <instructions>\n        Please provide the following information\n        to sign up for our special contests!\n      </instructions>\n      <field type='hidden' var='FORM_TYPE'>\n        <value>jabber:iq:register</value>\n      </field>\n      <field type='text-single' label='Given Name' var='first'>\n        <required/>\n      </field>\n      <field type='text-single' label='Family Name' var='last'>\n        <required/>\n      </field>\n      <field type='text-single' label='Email Address' var='email'>\n        <required/>\n      </field>\n      <field type='list-single' label='Gender' var='x-gender'>\n        <option label='Male'><value>M</value></option>\n        <option label='Female'><value>F</value></option>\n      </field>\n    </x>\n  </query>\n</iq>\n```\n\n#### 7.客户端提供信息\n\n```xml\n<iq type='set'\n    from='juliet@capulet.com/balcony'\n    to='contests.shakespeare.lit'\n    id='reg4'>\n  <query xmlns='jabber:iq:register'>\n    <x xmlns='jabber:x:data' type='submit'>\n      <field type='hidden' var='FORM_TYPE'>\n        <value>jabber:iq:register</value>\n      </field>\n      <field type='text-single' label='Given Name' var='first'>\n        <value>Juliet</value>\n      </field>\n      <field type='text-single' label='Family Name' var='last'>\n        <value>Capulet</value>\n      </field>\n      <field type='text-single' label='Email Address' var='email'>\n        <value>juliet@capulet.com</value>\n      </field>\n      <field type='list-single' label='Gender' var='x-gender'>\n        <value>F</value>\n      </field>\n    </x>\n  </query>\n</iq>\n```\n\n## Cancellation of Existing Registration\n\n#### 1. cilent req: \n```xml\n<iq type='set' from='bill@shakespeare.lit/globe' id='unreg1'>\n  <query xmlns='jabber:iq:register'>\n    <remove/>\n  </query>\n</iq>\n```\n跟注册不同的是 `query` 的child多了个`<remove/>`\n\n#### 2.1. 成功注销,server response: \n  \n```xml\n\n<iq type='result' to='bill@shakespeare.lit/globe' id='unreg1'/>\n\n```\n\n#### 2.2.Error Case  \n\n|Condition | Description  |\n| --- | --- |\n| ``<bad-request/>``|\tThe <remove/> element was not the only child element of the <query/> element.|\n|``<forbidden/>``\t| 权限不够|\n|``<not-allowed/>``\t|不允许用户注销账户|\n|``<registration-required/>``|要注销的账户本来就不存在|\n|``<unexpected-request/>``\t| The host is an instant messaging server and the IQ get does not contain a 'from' address because the entity is not registered with the server.|\n\n## 用户修改密码\n\n#### 1. Client:\n```xml\n<iq type='set' to='shakespeare.lit' id='change1'>\n  <query xmlns='jabber:iq:register'>\n    <username>bill</username>\n    <password>newpass</password>\n  </query>\n</iq>\n\n```\n\n这里的密码是明文， 要留意客户端服务端通信是否用SSL或者TLS加密，而且服务端证书可信。\n\n#### 2.1. 成功, Server: \n\n```xml\n<iq type='result' id='change1'/>\n\n```\n\n\n#### 2.2. 失败 Case \n\n\n|Condition | Description  |\n| --- | --- |\n| ``<bad-request/>``| request请求体拼写有问题，比如没带username |\n|``<not-authorized/>`` | 没通过server的安全验证 |\n|``<not-allowed/>`` |\tserver 不允许|\n|``<unexpected-request/>`` | The host is an instant messaging server and the IQ set does not contain a 'from' address because the entity is not registered with the server. |\n\n比如：\n```xml\n// Bad  request\n<iq type='error' from='shakespeare.lit' to='bill@shakespeare.lit/globe' id='change1'>\n  <error code='400' type='modify'>\n    <bad-request xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>\n  </error>\n</iq>\n\n// Not Authorized\n<iq type='error' from='shakespeare.lit' to='bill@shakespeare.lit/globe' id='change1'>\n  <error code='401' type='modify'>\n    <not-authorized xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>\n  </error>\n</iq>\n\n// Not Allowed\n<iq type='error' from='shakespeare.lit' to='bill@shakespeare.lit/globe' id='change1'>\n  <error code='405' type='cancel'>\n    <not-allowed xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>\n  </error>\n</iq>\n```\n\n有时候，服务端需要更多的信息来改密码，这时候它会返回信息提示客户端\n\n```xml\n<iq type='error' from='shakespeare.lit' to='bill@shakespeare.lit/globe' id='change1'>\n  <query xmlns='jabber:iq:register'>\n    <x xmlns='jabber:x:data' type='form'>\n      <title>Password Change</title>\n      <instructions>Use this form to change your password.</instructions>\n      <field type='hidden' var='FORM_TYPE'>\n        <value>jabber:iq:register:changepassword</value>\n      </field>\n      <field type='text-single' label='Username' var='username'>\n        <required/>\n      </field>\n      <field type='text-private' label='Old Password' var='old_password'>\n        <required/>\n      </field>\n      <field type='text-private' label='New Password' var='password'>\n        <required/>\n      </field>\n      <field type='text-single' label='Mother&apos;s Maiden Name' var='x-mmn'>\n        <required/>\n      </field>\n    </x>\n  </query>\n  <error code='401' type='modify'>\n    <not-authorized xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>\n  </error>\n</iq>\n\n```\n\n然后客户端返回相关信息\n\n```xml\n<iq type='set' from='bill@shakespeare.lit/globe' to='shakespeare.lit' id='change2'>\n  <query xmlns='jabber:iq:register'>\n    <x xmlns='jabber:x:data' type='submit'>\n      <field type='hidden' var='FORM_TYPE'>\n        <value>jabber:iq:register:changepassword</value>\n      </field>\n      <field type='text-single' var='username'>\n        <value>bill@shakespeare.lit</value>\n      </field>\n      <field type='text-private' var='old_password'>\n        <value>theglobe</value>\n      </field>\n      <field type='text-private' var='password'>\n        <value>groundlings</value>\n      </field>\n      <field type='text-single' var='x-mmn'>\n        <value>Throckmorton</value>\n      </field>\n    </x>\n  </query>\n</iq>\n```\n\nref: [XEP-0077: In-Band Registration](https://xmpp.org/extensions/xep-0077.html#usecases)\n","tags":["XMPP"],"categories":["NetWork"]},{"title":"XMPP Overview","url":"/2019/03/26/XMPP-Overview/","content":"\n\n\n跟朋友做一个项目，想快速开发，选了XMPP协议。它是一套通信协议。分为两部分，[XMPP Core Services](https://xmpp.org/rfcs/rfc6121.html#A%20Sample%20Session) 和 XMPP Extension Protocols. 核心由基础feature组成，扩展协议就非常丰富，而且一直在发展。Wiki上有张各种IM协议的汇总表，推荐！\n\n- [Comparison of instant messaging protocols - Wikipedia](https://en.wikipedia.org/wiki/Comparison_of_instant_messaging_protocols)\n\n\n## XMPP Addressing \n\n这是一张Client-Server的图，图里的server、client都遵循XMPP协议。叫 XMPP entity. 它们有各自唯一的Address, 格式如'username@server.com', 叫 JID (Jaber ID)\n [RFC 7622 - Extensible Messaging and Presence Protocol (XMPP): Address Format](https://datatracker.ietf.org/doc/rfc7622/)\n \n ![28a215f7.png](/img/32c16f22-9862-45e8-b15f-1b1eceb7b30f/28a215f7.png)\n \n其中resource是拿来做同一账号多客户端标记的， 比如图中`User1` 从 pc ,phone1 和 phone2登录同一账号，resource分别是 `pc`, `iphone1`,`iphone2`\n \n \n ## XMPP Client- Server Streams\n \n 客户端与服务端通过长链接方式通信，现在多用WebSocket。当客户端跟服务端握手成功，它们开始用 XML stream通信。\n \n ![f1565a2e.png](/img/32c16f22-9862-45e8-b15f-1b1eceb7b30f/f1565a2e.png)\\\n\n \nXML stream 总是以  ``<stream>`` 开头， ``</stream>`` tag结尾。是xml消息的容器。\n\n```\nAn XML stream is a container for the exchange of XML elements between any two entities over a network. \nDuring the life of the stream, the entity that initiated it can send an unbounded number of XML elements over the stream, either elements used to negotiate the stream (e.g., to complete TLS negotiation or SASL negotiation) or XML stanzas. \n```\n\n下面是client跟server的一次消息交互， 绿色来自client的，黑色消息来自server\n\n \n  ![f97e583b.png](/img/32c16f22-9862-45e8-b15f-1b1eceb7b30f/65d38868.png)\n\n ### XML stanza\n An XML stanza is the basic unit of meaning in XMPP. A stanza is a first-level element (at depth=1 of the stream) whose element name is \"message\", \"presence\", or \"iq\" and whose qualifying namespace is 'jabber:client' or 'jabber:server'. \n \n \n ### XMPP Communication Primitives\n\nA `stanza` is the smallest piece of XML data a client can send to a server ( server send to client) in one package.\n\nxmpp中，服务端、客户数据交换时，最小XML数据单位 叫 stanza。如上图，绿色的就是一个stanza，黑色的也是一个stanza。Stanza有几种类型: `message`, `iq`, `presence`。 \n\n#### The Message Stanza\n\nThe <message/> stanza is meant to be used to send data between XMPP entities.\n\n![6fe8a15e.png](/img/32c16f22-9862-45e8-b15f-1b1eceb7b30f/6fe8a15e.png)\n\n - from：发送方\n - to： 接收方\n - body: 消息内容\n - type 有几种类型:\n     -`<message type=”chat”/>` ( chat message stanza) \n     - `< message type=”groupchat”/>` ( groupchat message stanza)\n     - `< message type=”error”/>` (error message stanza)\n\n#### The Presence Stanza\n\n用来表示在线状态的\n \n\n![0fbe995b.png](/img/32c16f22-9862-45e8-b15f-1b1eceb7b30f/0fbe995b.png)\n\n`show` 标签里可能会有的几种状态: \n`chat` : online and available for chat ; \n`away` : 暂时离开\n`xa` : 长时间离开\n`dnd`: 请勿打扰\n\n如果你想知道别的状态，需要先发消息给Server，subscribe别人。 \n\n\n#### The IQ stanza\n \n The IQ( Info/Query) stanza is used to get some information from the server ( info about the server or its registered clients) or to apply some settings to the server.\n \n 用来获取消息，或者请求设置\n  \nType属性中的类型 :get ,set ,result or error. \n- `< iq type=”get”/>` stanzas are used to get(ask) some information ( from the server). \n- `<iq type=”set”/>` stanzas are used to apply some settings to the server.When you send get/set IQ stanzas to the server ,\n- it can reply either with an `< iq type=”result”/>` stanza when your request has been successfully processed by the server or \n- `<iq type=”error”/>` stanza when something has gone wrong with your request.The figure below shows an IQ stanza that we send to the server and the reply we get from the server.\n\n\n![30c96f66.png](/img/32c16f22-9862-45e8-b15f-1b1eceb7b30f/30c96f66.png)\n\n\nThe client sends an IQ get stanza to the server to request its contact list.We know it is asking for the contact list because of the `jabber:iq:roster` XML namespace.\n\nThe XMPP engine in the server is programmed to know that when a client sends `jabber:iq:roster` namespaced IQ ,it wants to retrieve its contact list.There are other `namespaces` in XMPP for other uses and you will surely come accross them in your XMPPing journey.\n\nThe server responds with a list of the JID’s contacts wraped within a `jabber:iq:roster` namespaced `<query/>`tag.\n\n\n## 本地搭建 Server \n\n我搭的是ejabberd. 官方安装教程: [Installing ejabberd \\| ejabberd Docs](https://docs.ejabberd.im/admin/installation/#install-on-macos)\n\n#### 启动服务\n\n```\ncd /Applications/ejabberd-19.02\n//开启服务\n./bin/ejabberdctl start  \n//状态\n./bin/ejabberdctl status  \n\n// help 查看更多功能哦\n./bin/ejabberdctl help \n```\n\n#### 注册账户\n\n打开 [admin 页面](http://localhost:5280/admin/), 虚拟主机 -> localhost(可能你的名字不一样) -> 用户。 现在你可以自己创建账户了。\n\n![578b88b6.png](/img/32c16f22-9862-45e8-b15f-1b1eceb7b30f/578b88b6.png)\n\n\n如果有自定义需求,配置教程 [Configuring ejabberd \\| ejabberd Docs](https://docs.ejabberd.im/admin/configuration/#mod-http-ws) \n \n#### 客户端玩起来\n\n客户端有很多[选择](https://xmpp.org/software/clients.html)，不过大多数都是渣。如果是WebSocket，用这个 [GitHub - processone/xmpp-websocket-client: Test XMPP Websocket client](https://github.com/processone/xmpp-websocket-client) 调试可以看到stanza，挺方便的。\n\n如果Mac用户报auth问题，可以打开`vim conf/ejabberd.yml`, `tls`配置成`false`\n![5202ee46.png](/img/32c16f22-9862-45e8-b15f-1b1eceb7b30f/5202ee46.png)\n\n#### 关于js lib\n打算用React Native写，lib选了 [GitHub - xmppjs/xmpp.js: XMPP for JavaScript](https://github.com/xmppjs/xmpp.js) 。当然 Web多用框架 Strophe.js。这儿有个简单比较[How do you compare to strophe.js · Issue #217 · xmppjs/xmpp.js · GitHub](https://github.com/xmppjs/xmpp.js/issues/217)\n\n### 其他资料\n\n- 简单介绍 [A friendly introduction to XMPP – blikoon](https://www.blikoontech.com/xmpp/xmpp-a-soft-friendly-introduction)\n\n- 官方协议很详细，例子也很形象。 [Extensible Messaging and Presence Protocol (XMPP): Core](https://xmpp.org/rfcs/rfc6120.html#tls)\n\n- 如何选择即时通讯应用的数据传输格式 [如何选择即时通讯应用的数据传输格式-其它分享/专项技术区 - 即时通讯开发者社区!](http://www.52im.net/thread-276-1-1.html)\n- 强列建议将Protobuf作为你的即时通讯应用数据传输格式 [强列建议将Protobuf作为你的即时通讯应用数据传输格式-其它分享/专项技术区 - 即时通讯开发者社区!](http://www.52im.net/thread-277-1-1.html) \n\n\n\n\n","tags":["XMPP"],"categories":["NetWork"]}]