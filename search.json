[{"title":"The Implementation of Convolutional and MaxPool layer","url":"/2019/05/08/The-Implementation-of-Convolutional-and-MaxPool-layer/","content":" \n# The Implementation of Convolutional and MaxPool layer\n\n![16d3896c.png](/img/995676c2-24ed-4165-8224-0bc01148242a/16d3896c.png)\n\n\n## Parse the argumenets \n\nIn `main` function, it goes to function `test_detector` according to the first argument`detect`. \n\n```c\nif (0 == strcmp(argv[1], \"detect\")){\n   float thresh = find_float_arg(argc, argv, \"-thresh\", .5);\n   char *filename = (argc > 4) ? argv[4]: 0;\n   char *outfile = find_char_arg(argc, argv, \"-out\", 0);\n   int fullscreen = find_arg(argc, argv, \"-fullscreen\");\n   test_detector(\"cfg/coco.data\", argv[2], argv[3], filename, thresh, .5, outfile, fullscreen);\n   }   \n```\n\nHere is the architecture of neural network defined by yolov3-tiny.cfg\n\n```\n\nlayer     filters    size              input                output\n    0 conv     16  3 x 3 / 1   416 x 416 x   3   ->   416 x 416 x  16  0.150 BFLOPs\n    1 max          2 x 2 / 2   416 x 416 x  16   ->   208 x 208 x  16\n    2 conv     32  3 x 3 / 1   208 x 208 x  16   ->   208 x 208 x  32  0.399 BFLOPs\n    3 max          2 x 2 / 2   208 x 208 x  32   ->   104 x 104 x  32\n    4 conv     64  3 x 3 / 1   104 x 104 x  32   ->   104 x 104 x  64  0.399 BFLOPs\n    5 max          2 x 2 / 2   104 x 104 x  64   ->    52 x  52 x  64\n    6 conv    128  3 x 3 / 1    52 x  52 x  64   ->    52 x  52 x 128  0.399 BFLOPs\n    7 max          2 x 2 / 2    52 x  52 x 128   ->    26 x  26 x 128\n    8 conv    256  3 x 3 / 1    26 x  26 x 128   ->    26 x  26 x 256  0.399 BFLOPs\n    9 max          2 x 2 / 2    26 x  26 x 256   ->    13 x  13 x 256\n   10 conv    512  3 x 3 / 1    13 x  13 x 256   ->    13 x  13 x 512  0.399 BFLOPs\n   11 max          2 x 2 / 1    13 x  13 x 512   ->    13 x  13 x 512\n   12 conv   1024  3 x 3 / 1    13 x  13 x 512   ->    13 x  13 x1024  1.595 BFLOPs\n   13 conv    256  1 x 1 / 1    13 x  13 x1024   ->    13 x  13 x 256  0.089 BFLOPs\n   14 conv    512  3 x 3 / 1    13 x  13 x 256   ->    13 x  13 x 512  0.399 BFLOPs\n   15 conv    255  1 x 1 / 1    13 x  13 x 512   ->    13 x  13 x 255  0.044 BFLOPs\n   16 yolo\n   17 route  13\n   18 conv    128  1 x 1 / 1    13 x  13 x 256   ->    13 x  13 x 128  0.011 BFLOPs\n   19 upsample            2x    13 x  13 x 128   ->    26 x  26 x 128\n   20 route  19 8\n   21 conv    256  3 x 3 / 1    26 x  26 x 384   ->    26 x  26 x 256  1.196 BFLOPs\n   22 conv    255  1 x 1 / 1    26 x  26 x 256   ->    26 x  26 x 255  0.088 BFLOPs\n   23 yolo\n```\nNow, let's see how Darknet construct a nerual network. See at `detector.c` `test_detector` function, it construct a network by parsing  the `xxx.cfg` file and `xxx.weights` file. In my case, they are yolo3-tiny.cfg and yolo3-tiny.weights \n\n\n## Parser the configuration file\n\n### Sections in the file \n\nparse the yolo.cfg file here \n\n```c\nlist *read_cfg(char *filename)\n{\n    FILE *file = fopen(filename, \"r\");\n    if(file == 0) file_error(filename);\n    char *line;\n    int nu = 0;\n    list *options = make_list();\n    section *current = 0;\n    while((line=fgetl(file)) != 0){\n        ++ nu;\n        strip(line);\n        switch(line[0]){\n            case '[':\n                current = malloc(sizeof(section));\n                list_insert(options, current);\n                current->options = make_list();\n                current->type = line;\n                break;\n            case '\\0':\n            case '#':\n            case ';':\n                free(line);\n                break;\n            default:\n                if(!read_option(line, current->options)){\n                    fprintf(stderr, \"Config file error line %d, could parse: %s\\n\", nu, line);\n                    free(line);\n                }\n                break;\n        }\n    }\n    fclose(file);\n    return options;\n}\n```\n\n\nfor exmaple: \n\n```js\n[net]              // '[' is a tag for a section, the type of current setion is '[net]'\n# Testing          // ignore\nbatch=1         \nsubdivisions=1\n# Training\n# batch=64\n# subdivisions=2\nwidth=416\nheight=416\nchannels=3\nmomentum=0.9\ndecay=0.0005\nangle=0\nsaturation = 1.5\nexposure = 1.5\nhue=.1\n                 // ignore\nlearning_rate=0.001\n...\n\n[convolutional]    // [convoltional] \n...\n\n[maxpool]      // [maxpool] \n\n...\n[yolo]\n...\n\n[route]\n...\n\n```\n\n#### `[net]`\n\nIn section '[net]', `batch=1` is a option stored in `kvp`(option_list.c line 70) struct. Its key is batch, value is 1. Then this kvp object will be inserted into a node list (see it at option_list.c line76 & list.c line 40).\nAfter parsing the yolo3-tiny.cfg file, We will get a section list; its size is 25. Because there are 25 \\'[\\' tags in yolo3-tiny.cfg\n\n\nIn `parse_network_cfg` function, it parses the `[net]` section to get the params for the whole network. \n\n```c\nnetwork *parse_network_cfg(char *filename)\n{\n    list *sections = read_cfg(filename);\n    node *n = sections->front;\n    if(!n) error(\"Config file has no sections\");\n    network *net = make_network(sections->size - 1);\n    // other codes ...\n    \n}\n```\n\n#### `[convolutional]`\n\nThen parse the different sections. \n\n```c\n        s = (section *)n->val;\n        options = s->options;\n        layer l = {0};\n        LAYER_TYPE lt = string_to_layer_type(s->type);\n        if(lt == CONVOLUTIONAL){\n            l = parse_convolutional(options, params);\n        }else if(lt == DECONVOLUTIONAL){\n            l = parse_deconvolutional(options, params);\n        }else if(lt == LOCAL){\n            l = parse_local(options, params);\n        }else if(lt == ACTIVE){\n            l = parse_activation(options, params);\n        // other code here ...\n       \n```\n\n\nFor the first `[convolutional]` section in the yolo3-tiny.cfg as follow, the darknet will construct a `convolutional_layer` using thess params (see function `parse_convolutional` in parse.c and  function `make_convolutional_layer` in convolutional_layer.c)\n\n```js\n[convolutional]\nbatch_normalize=1\nfilters=16\nsize=3\nstride=1\npad=1\nactivation=leaky\n```\n\nIn this layer, there are 16 filters; the size of each filter is 3X3Xnum_channel; what is num_channel? well, `the number of channels in a filter must match the number of channels in input volume`, so here num_channel is equal to 3. The stride value for filters is 1, padding value is 1. \n\n\nLet's see how darknet calculate the output size of convolutional_layer by the input size(`l.h`) and filter params (`l.size`, `l.pad`, `l.stride`). There is a formula that shows how size of input volume relates to the one of output volume\n \n\n```c\n\nint convolutional_out_height(convolutional_layer l)\n{\n    return (l.h + 2*l.pad - l.size) / l.stride + 1;\n}\n\nint convolutional_out_width(convolutional_layer l)\n{\n    return (l.w + 2*l.pad - l.size) / l.stride + 1;\n}\n\n```\n\n As for yolo3-tiny.cfg, for this first convolutional_layer, its input size is 416 x 416 and channel is 3. So its ouput height is (416+2x1 - 3)/1 + 1 = 416, its output width is 416 too. `What about its output channel? It equals to the number of filters (16)`. \n \n ```c\n \n  l.out_c = n    // in func make_convolutional_layer\n  \n ```\n So its output volume size is 416 X 416 X 16.\n \n \n ![02b028d9.png](/img/995676c2-24ed-4165-8224-0bc01148242a/9b76325f.png)\n \n For a beginner, I strongly recommend these courses: [Strided Convolutions - Foundations of Convolutional Neural Networks \\| Coursera](https://www.coursera.org/lecture/convolutional-neural-networks/strided-convolutions-wfUhx) and  [One Layer of a Convolutional Network - Foundations of Convolutional Neural Networks \\| Coursera](https://www.coursera.org/lecture/convolutional-neural-networks/one-layer-of-a-convolutional-network-nsiuW)\n  \nNow, we have 16 filters that are 3X3X3 in this layer, `how many parameters does this layer have`?  Each filter is a 3X3X3 volume, so it's 27 numbers tp be learned, and then plus the bias, so that was the b parameters. it's 28 parameters. There are 16 filters so that would be 448 parameters to be learned in this layer. \n \n```c\n\n    // c: the number of channels; n: the number of filters; \n    // size: the number of filter width or height; groups: default is 1 \n    l.weights = calloc(c/groups*n*size*size, sizeof(float));\n    l.weight_updates = calloc(c/groups*n*size*size, sizeof(float));\n\n    l.biases = calloc(n, sizeof(float));\n    l.bias_updates = calloc(n, sizeof(float));\n\n    l.nweights = c/groups*n*size*size;\n    l.nbiases = n;\n\n```\n \n \n#### Activation \n \n In this convolution layer, it choose leaky ReLU as activation function. The function is defined as follow  where Î± is a small constant.\n \n\n\n![59d0cfbc.png](/img/995676c2-24ed-4165-8224-0bc01148242a/59d0cfbc.png)\n \n Still, I recommend this course for a beginner. [Activation functions - Shallow neural networks \\| Coursera](https://www.coursera.org/lecture/neural-networks-deep-learning/activation-functions-4dDC1)\n\n \nThere are `forward_activation_layer` and `backward_activation_layer` in Darknet. Both of them handle batch inputs. \n\nFor forward activation layer, leaky_activate is to computes f(x)\n\n ```c\n static inline float leaky_activate(float x){return (x>0) ? x : .1*x;}\n ```\n For backward activation layer, leaky_gradient returns the slop of the function \n\n```c\nstatic inline float leaky_gradient(float x){return (x>0) ? 1 : .1;}\n```\n\n\n \n \n#### [maxpool]\n \n Maxpool layer is used to reduce the size of representation to speed up computation as well as to make some of the features it detects a bit more robust. Look at the `tiny-yolo3.cfg`\n \n ```js\n [maxpool]\nsize=2\nstride=2\n\n ```\n ```c\n maxpool_layer make_maxpool_layer(int batch, int h, int w, int c, int size, int stride, int padding)\n{\n    maxpool_layer l = {0};\n    l.type = MAXPOOL;\n    l.batch = batch;\n    l.h = h;\n    l.w = w;\n    l.c = c;         // output channel equals to input one \n    l.pad = padding;  // default value is size - 1\n    l.out_w = (w + padding - size)/stride + 1;\n    l.out_h = (h + padding - size)/stride + 1;\n    l.out_c = c;\n    l.outputs = l.out_h * l.out_w * l.out_c;\n    // other codes ...\n    return l;\n}\n\n \n ```\n This `[maxpool]` sections comes after the `[convolutional]` section. Its input size(416 x 416 x 16) equal to the ouput size of the former layer (416 x 416 x  16). The filter size is 2 x 2, stride is 2. Each time, the filter would move 2 steps, for a 4x4x1 input volume, its output is 2x2x1 volume. \n![e65fb56d.png](/img/995676c2-24ed-4165-8224-0bc01148242a/e65fb56d.png)\n```\n9 == max(1, 3, 2, 9)\n2 == max(2, 1, 1, 1)\n6 == max(1, 3, 5, 6)\n3 == max(2, 3, 1, 2)\n```\nSo in this layer, its ouput width equals to (int)((416+ 1 - 2)/2 + 1), 208. And the number of its output channels equals to the number of input channels. Now, we know its output volume size is 208 X 208 X 16. There is no parameter to be learned. \n\n**input volume size**: \n\n\n![4e5c00fc.png](/img/995676c2-24ed-4165-8224-0bc01148242a/4e5c00fc.png)\n**output volume size**: \n\n\n![1bd46d76.png](/img/995676c2-24ed-4165-8224-0bc01148242a/1bd46d76.png)\n$f$: the width or height of a filter\n \n [Pooling Layers - Foundations of Convolutional Neural Networks \\| Coursera](https://www.coursera.org/lecture/convolutional-neural-networks/pooling-layers-hELHk)\n \n #### Why does 1 x 1 convolution do? \n \n [Networks in Networks and 1x1 Convolutions - Deep convolutional models: case studies \\| Coursera](https://www.coursera.org/lecture/convolutional-neural-networks/networks-in-networks-and-1x1-convolutions-ZTb8x)\n \n \n For example, in this picture, the number of input volume channels ,192, has gotten too big, we can shrink it to a 28x28x32 dimension volume using 32 filters that are 1x1x192. So this is a way to shrink the number of channels .\n \n ![a085e0e4.png](/img/995676c2-24ed-4165-8224-0bc01148242a/a085e0e4.png)\n \n \n In YOLO, it implements fully connected layer by two convolutional layer. \n ```\n[convolutional]\nbatch_normalize=1\nfilters=256\nsize=3\nstride=1\npad=1\nactivation=leaky\n\n[convolutional]\nsize=1\nstride=1\npad=1\nfilters=255\nactivation=linear\n ```\n [Convolutional Implementation of Sliding Windows - Object detection \\| Coursera](https://www.coursera.org/lecture/convolutional-neural-networks/convolutional-implementation-of-sliding-windows-6UnU4)\n \n","tags":["--- YOLO"]},{"title":"Leetcode Unique Paths 1-2","url":"/2019/05/08/Leetcode-Unique-Paths-1-2/","content":"\n# Unique Paths 1-2\n\n## é¢ç®1ï¼ [Unique Paths 1](https://leetcode.com/problems/unique-paths/)\n\n![e2ca2848.png](/img//c5619f25-13a6-4e38-b7f8-d87ff624f5b5/e2ca2848.png)\n\n### å¨æè§åè§£é¢æ­¥éª¤è¦ç¹: \n\n1. æ¾å°æä¼è§£çç»æ\n2. éå½æ¹æ¡\n3. bottom-up æè top-downæ¹å¼æ±æä¼è§£\n4. ä¼åï¼ç©ºé´æ¢æ¶é´\n\n### åæ\n\nè¿éé¢å¾ç®åã\n1. å®ä¹ä¸ä¸ª mxn çäºç»´æ°ç»grides[m][n]ï¼ å¯¹åºæ ¼å­å°å¾ãå¯¹åºéä¸­grides[2][6]\n\n![e594b650.png](/img//c5619f25-13a6-4e38-b7f8-d87ff624f5b5/e594b650.png)\næ¯å¦ï¼æä»¬æ³ç¥éä»(0,0)å°(1, 2)æå æ¡è·¯ãæ ¹æ®é¢ç®è¦æ±ï¼åªè½å¾å³èµ°æèä¸èµ°ä¸ä¸ªæ ¼å­ã\næä»¬åçä»(1, 1)å°ï¼1ï¼2ï¼ï¼ä¸¤ç§èµ°æ³ï¼ \n- (2, 0) -> (1, 2)\n- (1, 1) -> (1, 2)\n\nåçä»(0, 0)å°(2ï¼ 0) åªæä¸æ¡è·¯: (0, 0) -> (1, 1) -> (2, 0)ï¼ grides[2][0] = 1ã\n\nä»(0, 0)æ ¼å­å°(1,1)æ ¼å­ï¼æä¸¤ç§è·¯: \n- (0,0) -> (0, 1)-> (1, 1)\n- (0,0) -> (1, 0)-> (1, 1)\né£ä¹grides(1, 1) = 2. \n \nå¾å®¹æåç°è§å¾ï¼ grids[m][n] = grids[m - 1][n] + grides[m][n -1]; å¯ç¨éå½æ±è§£ãä½æ¯çº¯ç¢çéå½æå¾å¤éå¤è®¡ç®ã å¦ä¸å¾çéå½æ ï¼ \n![72a3d4ef.png](/img//c5619f25-13a6-4e38-b7f8-d87ff624f5b5/72a3d4ef.png)\næä»¥æä»¬å¼å¥ä¸ä¸ªrecordæ°ç»ï¼è®°å½å·²ç»è®¡ç®çç»æï¼çå»éå¤è®¡ç®ã\n\næ¶é´å¤æåº¦: \no(m* n)\n\n```c++\nint inner_path(int i, int j, int m, int n, vector<vector<int>>& record) {\n    if (i < 0 || j < 0) {\n        return 0;\n    }\n\n    if (record[i][j]) {\n        return record[i][j];\n    }\n\n    if ((i == 0) && (j == 0)) {\n        return 1;\n    }\n\n    record[i][j] = inner_path(i-1, j, m, n, record) + inner_path(i, j-1, m, n, record);\n    return record[i][j];\n}\n\nint uniquePaths(int m, int n) {\n    vector<vector<int>> res(m, vector<int>(n, 0));\n    return inner_path(m-1, n-1, m, n, res);\n}\n```\n\n### [Unique Paths 2](https://leetcode.com/problems/unique-paths-ii/)\n\nåæï¼ \nè·Unique Paths 1æ¯èµ·æ¥ï¼å¤äºéç¢ç©ãå¦æ(i, j)æ¯éç¢ç©ï¼é£ä¹grid(i, j) = 0, è¡¨ç¤ºæä»¬æ æ³ç»ç±(i, j) å°è¾¾ç»ç¹ã\n\n\n\n```c++\nint path_helper(int i, int j, int m, int n, vector<vector<int>>& record, vector<vector<int>> &obstacleGrid) {\n        if (i < 0 || j < 0 || obstacleGrid[i][j] == 1) {\n            return 0;\n        }\n\n        if (record[i][j]) {\n            return record[i][j];\n        }\n\n        if ((i == 0) && (j == 0)) {\n            return 1;\n        }\n\n        record[i][j] = path_helper(i - 1, j, m, n, record, obstacleGrid) + path_helper(i, j - 1, m, n, record, obstacleGrid);\n        return record[i][j];\n    }\n\n    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {\n        if (obstacleGrid.empty()) return 0;\n        int m = (int)obstacleGrid.size();\n        int n = (int)obstacleGrid[0].size();\n\n        vector<vector<int>> res(m, vector<int>(n, 0));\n        return path_helper(m - 1, n - 1, m, n, res, obstacleGrid);\n    }\n```\n\nèªåºåä¸çåæ³ï¼ \n\n```c++\n   int uniquePathsWithObstacles(vector<vector<int>>& grid) {\n        int rows = grid.size();\n        if(rows == 0) return 0;\n        int cols = grid[0].size();\n        vector<vector<long>> res(rows+1, vector<long>(cols+1, 0));\n        for(int i=rows-1; i>=0;i--){\n            for(int j=cols-1; j>=0;j--){\n                if(grid[i][j] == 1) res[i][j] = 0;\n                else if(i == rows-1 && j == cols-1) res[i][j] = 1;\n                else res[i][j] = res[i][j+1] + res[i+1][j];\n            }\n        }\n        return res[0][0];\n    }\n```","tags":["-- Algorithm"]},{"title":"Leetcode 959. Regions Cut By Slashes ç¬è®°","url":"/2019/04/23/Leetcode-959-Regions-Cut-By-Slashes/","content":"\né¢ç®ï¼https://leetcode.com/problems/regions-cut-by-slashes/description/\n\n## Solution1: DFS \n\nTime Complexity::  $O(n^2)$\n\n### åæï¼ \n[è¿ä¸ªç¥å¥çæè·¯](https://leetcode.com/problems/regions-cut-by-slashes/discuss/205674/C++-with-picture-DFS-on-upscaled-grid)åå²æ ¼å­ï¼è½¬åä¸ºå¾çDFSé®é¢ã\n```json\nInput:\n[\n  \"\\\\/\",\n  \"/\\\\\"\n]\n```\n\næ`\\\\`ï¼`/`æè` `åå«åå²æ3*3çæ ¼å­ãå¾è½¬åä¸º: \n\n```json\n[\n 1,0,0,0,0,1,\n 0,1,0,0,1,0,\n 0,0,1,1,0,0\n 0,0,1,1,0,0\n 0,1,0,0,1,0\n 1,0,0,0,0,1\n]\n```\n\né®é¢å°±åæï¼ è®¡ç®è¢«1åå²å¼çåºåçæ°éã\n\nç±»ä¼¼ç[å­¤å²æ°éé®é¢](https://www.geeksforgeeks.org/find-number-of-islands/) é½æ¯åä¸ä¸ªé®é¢çåç§ï¼[Counting the number of connected components in an undirected graph](https://www.geeksforgeeks.org/connected-components-in-an-undirected-graph/)\n\n```c++\nvoid dfs(vector<vector<int>>& board, int i, int j ) {\n    // index out of range\n    if (i < 0 || j < 0 || i >= board.size() || j >= board[0].size()) return;\n    // this grid has been visited or it was part of a slash character\n    if (board[i][j] == 1) return;\n\n    // mark this grid visited\n    board[i][j] = true;\n\n    dfs(board, i - 1, j);\n    dfs(board, i + 1, j);\n    dfs(board, i, j - 1);\n    dfs(board, i, j + 1);\n}\n\nint regionsBySlashes(vector<string>& grid) {\n    if (grid.empty())\n        return 0;\n    int row = (int)grid.size(), col = (int)grid[0].size();\n    vector<vector<int>> board (row * 3, vector<int>(col * 3, 0));\n\n    // n*n graph represented as 3n*3n graph\n    for (int i = 0; i < row; ++i) {\n        for (int j = 0; j < col; ++j) {\n            if (grid[i][j] == '/') board[i * 3][j * 3 + 2] = board[i * 3 + 1][j * 3 + 1] = board[i * 3 + 2][j * 3] = 1;\n            if (grid[i][j] == '\\\\') board[i * 3][j * 3] = board[i * 3 + 1][j * 3 + 1] = board[i * 3 + 2][j * 3 + 2] = 1;\n        }\n    }\n\n    int cnt = 0;\n    for (int i = 0; i < row * 3; ++i) {\n        for (int j = 0; j < col * 3; ++j) {\n            // only count components connected by space\n            if (!board[i][j]) {\n               dfs(board, i, j);\n               cnt++;\n            }\n        }\n    }\n\n    return cnt;\n}\n\n```\n\nå¦æåå²ä¸º2*2çæ ¼å­ï¼ä¼éå°è¿ä¸ªé®é¢:\n```\nInput:\n[\n  \"//\",\n  \"/ \"\n]\nOutput: 5\nExpected: 3\n\n0101\n1010\n0100\n1000\n```\n01**0**1\n1**0**10\n**0**100\n1000\n\nå ç²çè¿ä¸ä¸ª0ï¼è¢«åå²å¼äºãé¢æè¦æ±æ¯è¿å¨ä¸èµ·çã\n\n\n## Solution2: DSU\n\nTime Complexity:  $O(n^2*\\alpha(n))$\nSpace Complexity: $O(n^2)$\n\n### åæï¼ \n\n#### DSU: \nhttps://www.youtube.com/watch?v=YKE4Vd1ysPI\nhttps://www.youtube.com/watch?v=gpmOaSBcbYA\n\nDSUä¸­ç¨æ°ç»æ¥è¡¨ç¤ºæ ï¼ å¦ä¸ï¼ \n\n| idx | 0 |  1 | 2 |\n| --- | --- | --- | --- |\n| parent | 1 | -1 | 1 |\n\n \nparent[0] = 1, ä»£è¡¨node 0çparentæ¯1ï¼ parent[2] = 1ä»£è¡¨node 2çparentæ¯1; parent[1] = -1, ä»£è¡¨å®æ¯rootã \n\n```\n   1\n /  \\\n0    2\n```\n\nä¸¤ä¸ªoperationï¼ \n**find(x)**: find root of cluster in which x is \n\n```\n   1                   5\n  / \\                 / \\\n 0   2               6   7\n    / \\                   \\\n   3   4                  8\n```\næ¯å¦ï¼ æä»¬æ³æ¾3è·8æå¨clusterçrootï¼ find(3) == 1,  find(8) == 5\n\n```c\n/*éå½æ¥æ¾root*/\nint find(int x, int parent[]) {\n    int x_root = x; \n    while (parent[x_root]!= -1) {\n        x_root = parent[x_root];\n    }\n    return x_root;\n}\n```\n**union(x, y)**: union two cluster where x, y are in \n\næ¯å¦ï¼ æä»¬æ³union(3, 8),  å°±è¦åæ¾å°3çx_rootï¼ è·8çy_rootï¼ç¶ååå¹¶ä¸¤ä¸ªroot.\n\n```c\nint union(int x, int y, int parent[]) {\n    int x_root = find(x, parent);\n    int y_root = find(y, parent); \n    if (x_root == y_root) {\n        return 0; \n    } else {\n        // y_root åæ x_rootçæ ¹\n        parent[x_root] = y_root;\n        return 1\n    }\n}\n```\n\n```\n              5\n         /   / \\\n        1   6   7\n       / \\       \\\n      0   2       8\n         / \\ \n        3   4 \n```\n\n                                \nDSUè»å®³çä¸ç¹æ¯ä¼ååï¼ç¨$O(1)$çaverage time cost, æ£æµå¾éæå©æç¯\n\nä¸¤ç§ä¼åï¼ \n- Make tree flat \n- Union by rank\n\nhttps://www.youtube.com/watch?v=VJnUwsE4fWA\n\n\n### åå²æ4ä¸ªä¸è§å½¢ï¼ ä¸ä¸å·¦å³\næ¯ä¸ªæ ¼å­åå²æä¸ä¸å·¦å³åä¸ªä¸è§å½¢ã\nhttps://assets.leetcode.com/uploads/2018/12/15/3.png\n\næ¯ä¸ªä¸è§å½¢ç»ä¸ªidx: 0, 1, 2, 3åå«å¯¹åº top, right, bottom, left\n```\n\\ 0 /\n3 \\ 1\n/ 2 \\\n```\nn*nçå¾ï¼åæ 4*n*nçæ°ç»ã åå§åæ¶æ°ç»parentçæ¯ä¸ªå¼é½æ¯-1, ä»£è¡¨æ¯ä¸ªç¹é½æ¯ç¬ç«çãæä»¬éågridä¸­çæ¯ä¸ªç¹, grid[i][j]ï¼ åå«è¿è¡å¦ä¸æä½ï¼ \n\n'/':  ä¸ãå·¦è¿æ¥ï¼ ä¸ãå³è¿æ¥\n'\\\\': ä¸ãå³è¿æ¥ï¼ å·¦ãä¸è¿æ¥\n' ': åä¸ªé¨åè¿æ¥\n\nå¯¹æ¯ä¸ªgrid[i][j], åå¹¶grid[i-1][j]çbottomä¸è§å½¢æ ¹grid[i][j]çtop ä¸è§å½¢ï¼åå¹¶grid[i][j-1]çrightä¸è§å½¢è·grid[i][j]çleftä¸è§å½¢ã\n\næç»ä»£ç å¦ä¸:\n\n```c++\nclass DSU {\nprivate:\n    // use array represents a graph\n    vector<int> parent;\n    int row = 0;\npublic:\n    // num of root of independent cluster\n    int num_root = 0;\n\n    DSU(int n) {\n        parent = vector<int>(n * n * 4, -1);\n        num_root = n * n * 4;\n        row = n;\n    }\n\n    int find(int x) {\n        // find the root of the cluster where x is iteratively\n        while (parent[x] != -1) {\n            x = parent[x];\n        }\n        return x;\n    }\n\n    /**\n    * return: 1: successfully; 0: failed\n    */\n    int union_cluster(int x, int y) {\n        int x_root = find(x);\n        int y_root = find(y);\n        if (x_root == y_root) {\n            return 0;\n        } else {\n            int min_ = min(x_root, y_root);\n            int max_ = max(x_root, y_root);\n            parent[min_] = max_;\n            \n            num_root--;\n            return 1;\n        };\n    }\n\n    /**\n     * å°å¾ä¸­ï¼i,j)ä½ç½®çç¹ï¼æ å°å°æ°ç»çidx\n     * @param i\n     * @param j\n     * @param part\n     * @param n\n     * @return\n     */\n    int idx(int i, int j, int part) {\n        return (i * row + j) * 4 + part;\n    }\n};\n\n\n// https://leetcode.com/problems/regions-cut-by-slashes/discuss/205680/JavaC%2B%2BPython-Split-4-parts-and-Union-Find\nint regionsBySlashes(vector<string> &grid) {\n    if (grid.empty()) return 0;\n    int n = (int) grid.size();\n\n    DSU dsu = DSU(n);\n\n    for (int i = 0; i < n; ++i) {\n        for (int j = 0; j < n; ++j) {\n            // merge the bottom part of the (i-1, j) grid and the top part of the grid (i, j)\n            if (i > 0) dsu.union_cluster(dsu.idx(i - 1, j, 2), dsu.idx(i, j, 0));\n            // merge the right part of the (i, j-1) grid and the left part of the grid(i,j)\n            if (j > 0) dsu.union_cluster(dsu.idx(i, j - 1, 1), dsu.idx(i, j, 3));\n\n            if (grid[i][j] == '/') {\n                // union the top and the left part of this cell\n                dsu.union_cluster(dsu.idx(i, j, 3), dsu.idx(i, j, 0));\n                // union the right and the bottom of this cell\n                dsu.union_cluster(dsu.idx(i, j, 2), dsu.idx(i, j, 1));\n            }\n\n            if (grid[i][j] == '\\\\') {\n                dsu.union_cluster(dsu.idx(i, j, 0), dsu.idx(i, j, 1));\n                dsu.union_cluster(dsu.idx(i, j, 2), dsu.idx(i, j, 3));\n            }\n\n            if (grid[i][j] == ' ') {\n                dsu.union_cluster(dsu.idx(i, j, 0), dsu.idx(i, j, 2));\n                dsu.union_cluster(dsu.idx(i, j, 1), dsu.idx(i, j, 3));\n                dsu.union_cluster(dsu.idx(i, j, 1), dsu.idx(i, j, 2));\n            }\n        }\n    }\n\n    return dsu.num_root;\n}\n\n```\n\nhttps://leetcode.com/problems/regions-cut-by-slashes/discuss/205680/JavaC%2B%2BPython-Split-4-parts-and-Union-Find\n","tags":["-- Algorithm"]},{"title":"XMPP(6):XMPP-æ¶æ¯å­å¨ä¸æååå²æ¶æ¯","url":"/2019/04/10/XMPP-6-XMPP-æ¶æ¯å­å¨ä¸æååå²æ¶æ¯/","content":"\n\nXEP-0313å®ä¹äºXMPPæ¶æ¯å­å¨çè§åã\n\n### åºæ¯éæ±\n0313åè®®ä¸»è¦æè¿äºåºæ¯ï¼ \n- åè´¦å·å¤å®¢æ·ç«¯ä¹é´çåå²æ¶æ¯åæ­¥\n- å®¢æ·ç«¯æååå²æ¶æ¯ï¼ææ¥ææåºå±ç¤ºï¼æ³æ³æä»¬å¨å¾®ä¿¡çåå²æ¶æ¯ï¼\n- åé¡µæåæ¶æ¯\n\n### å­å¨\n\n1. åæ¡æ¶æ¯å­å¨åæ¬ï¼ \n- æ¶æ¯åéè·æ¥æ¶çæ¶é´æ³\n- from è· to çJID\n- server-assigned UID\n- message stanza \n\n2. æ¶æ¯çé¡ºåºè¦ä¿å­ï¼ ä¾èµtimestampè¦å°å¿ï¼å ä¸ºå¤æ¡æ¶æ¯å¯è½å±äº«æ¶é´æ³\n3. è¶è¿ä¸å®æ°éï¼å¯å é¤æ§ä¿¡æ¯\n4. ç¾¤èè®°å½ç¨MAMæå¡\n5. archive id ` <stanza-id/>`\nè¢«archivedè¿çæ¶æ¯ï¼serverè¦ç»å®å ä¸stanza-id\nExample 1. Client receives a message that has been archived\n\n```xml\n<message to='juliet@capulet.lit/balcony'\n         from='romeo@montague.lit/orchard'\n         type='chat'>\n  <body>Call me but love, and I'll be new baptized; Henceforth I never will be Romeo.</body>\n  <stanza-id xmlns='urn:xmpp:sid:0' by='juliet@capulet.lit' id='28482-98726-73623' />\n</message>\n\n```\nstanza-id: archive ID \n\n### æ¥è¯¢\n\n#### 1. A user queries their archive for messages\nç¨æ¶æ¯UIDæ¥è¯¢\n\n'urn:xmpp:mam:2' namespace, indicating the UID of the first and last message of the (possibly limited) result set. \n\n```xml\n<iq type='set' id='juliet1'>\n  <query xmlns='urn:xmpp:mam:2' queryid='f27' />\n</iq>\n```\n\n#### 2. Their server sends the matching messages\n\n\n\n```xml\n<message id='aeb213' to='juliet@capulet.lit/chamber'>\n  <result xmlns='urn:xmpp:mam:2' queryid='f27' id='28482-98726-73623'>\n    <forwarded xmlns='urn:xmpp:forward:0'>\n      <delay xmlns='urn:xmpp:delay' stamp='2010-07-10T23:08:25Z'/>\n      <message xmlns='jabber:client' from=\"witch@shakespeare.lit\" to=\"macbeth@shakespeare.lit\">\n        <body>Hail to thee</body>\n      </message>\n    </forwarded>\n  </result>\n</message>\n\n```\n\n#### 3. Server returns the result IQ to signal the end\n\n\n```xml\n<iq type='result' id='juliet1'>\n  <fin xmlns='urn:xmpp:mam:2'>\n    <set xmlns='http://jabber.org/protocol/rsm'>\n      <first index='0'>28482-98726-73623</first>\n      <last>09af3-cc343-b409f</last>\n    </set>\n  </fin>\n</iq>\n```\n\nserverçè¿æ¡iq stanzaæ è®°æ¥è¯¢ç»æç»æã\n\n### è¿æ»¤å¨\n\n#### 1. æ ¹æ®JIDè¿æ»¤\n\n`with` å­æ®µ + JID(Bare JID)ï¼ ä¼æ¿å°toæfromå°åå¹éJIDçä¿¡æ¯; å¦ææ²¡æwith, æå¡ç«¯è¿åqueryæå®çæ¶é´æ®µåçæ¶æ¯ã \n\n```xml \nExample 6. Querying for all messages to/from a particular JIDÂ¶\n<iq type='set' id='juliet1'>\n  <query xmlns='urn:xmpp:mam:2'>\n    <x xmlns='jabber:x:data' type='submit'>\n      <field var='FORM_TYPE' type='hidden'>\n        <value>urn:xmpp:mam:2</value>\n      </field>\n      <field var='with'>\n        <value>juliet@capulet.lit</value>\n      </field>\n    </x>\n  </query>\n</iq>\n```\n\n**ä½¿ç¨åºæ¯ï¼**\nAæ³æ¥è¯¢è·Bçèå¤©è®°å½ï¼withå­æ®µçvalueè®¾ä¸ºB, æå¡ç«¯è¿åçmessagesä¸­ï¼æ¢æBåéç»Açmsgï¼ä¹æAåéç»Bçmsgã \n\n![3c4760c7.png](/img/f3eaaed1-370f-4abc-93b2-a3312d3ebcd4/3c4760c7.png)\n#### 2. æ ¹æ®æ¥æ¶æ¶é´è¿æ»¤\n\n`start` è· `end` å­æ®µæ è®°æ¶é´æ³ã æ¶é´æ³æ ¼å¼è§https://xmpp.org/extensions/xep-0082.html\n\n```xml\nExample 7. Querying the archive for all messages in a certain timespanÂ¶\n<iq type='set' id='juliet1'>\n  <query xmlns='urn:xmpp:mam:2'>\n    <x xmlns='jabber:x:data' type='submit'>\n      <field var='FORM_TYPE' type='hidden'>\n        <value>urn:xmpp:mam:2</value>\n      </field>\n      <field var='start'>\n         // UTCæ ¼å¼\n        <value>2010-06-07T00:00:00Z</value>\n      </field>\n      <field var='end'>\n        <value>2010-07-07T13:23:54Z</value>\n      </field>\n    </x>\n  </query>\n</iq>\n```\nå¦æ`end` ç¼ºå¤±ï¼ serverä¼èªå¨è®¤ä¸ºæ¯æè¿çæ¶æ¯çå­å¨æ¶é´\n\n``` xml\nExample 8. Querying the archive for all messages after a certain timeÂ¶\n<iq type='set' id='juliet1'>\n  <query xmlns='urn:xmpp:mam:2'>\n    <x xmlns='jabber:x:data' type='submit'>\n      <field var='FORM_TYPE' type='hidden'>\n        <value>urn:xmpp:mam:2</value>\n      </field>\n      <field var='start'>\n        <value>2010-08-07T00:00:00Z</value>\n      </field>\n    </x>\n  </query>\n</iq>   \n```\n\n#### 3. éå®resultsçæ°é\n\n[Result Set Management (XEP-0059)](https://xmpp.org/extensions/xep-0059.html) \n\n```xml\nExample 9. A query using Result Set ManagementÂ¶\n<iq type='set' id='q29302'>\n  <query xmlns='urn:xmpp:mam:2'>\n    <x xmlns='jabber:x:data' type='submit'>\n      <field var='FORM_TYPE' type='hidden'>\n        <value>urn:xmpp:mam:2</value>\n      </field>\n      <field var='start'>\n        <value>2010-08-07T00:00:00Z</value>\n      </field>\n    </x>\n    <set xmlns='http://jabber.org/protocol/rsm'>\n      <max>10</max>\n    </set>\n  </query>\n</iq>\n```\n\nè¿ä¸ªè¯·æ±ï¼æå®å®¢æ·ç«¯æå¤åªè½æ¶å°10æ¡stanzasãä½æå¡ç«¯çè¿åç»æå¯è½åæ¹å`set`çåå®¹ï¼è¿åèªå·±éå®çæ°éï¼æ¯å¦ï¼ è¿æ¯è¿å`start`æ¶é´è·`end`æ¶é´æ®µåç20æ¡æ¶æ¯ã\n\n```xml\nExample 10. Server responds to client with limited results using RSMÂ¶\n<!-- result messages -->\n<iq type='result' id='q29302'>\n  <fin xmlns='urn:xmpp:mam:2'>\n    <set xmlns='http://jabber.org/protocol/rsm'>\n      <first index='0'>28482-98726-73623</first>\n      <last>09af3-cc343-b409f</last>\n      <count>20</count>\n    </set>\n  </fin>\n</iq>\n```\n\n#### 4. åé¡µæåæ¶æ¯\n\nå¦æä¹åå·²ç»è·åäºmæ¡æ¶æ¯ï¼å®¢æ·ç«¯å¯ä»¥ååéåæ ·çè¯·æ±ï¼æåä¸ä¸é¡µæ¶æ¯ã`set`ä¸­è¦å¸¦ä¸`after`(ä¸æ¬¡æåå°çæåä¸æ¡æ¶æ¯çUID)\n\n```xml\nExample 11. A page query using Result Set ManagementÂ¶\n<iq type='set' id='q29303'>\n  <query xmlns='urn:xmpp:mam:2'>\n      <x xmlns='jabber:x:data' type='submit'>\n        <field var='FORM_TYPE' type='hidden'><value>urn:xmpp:mam:2</value></field>\n        <field var='start'><value>2010-08-07T00:00:00Z</value></field>\n      </x>\n      <set xmlns='http://jabber.org/protocol/rsm'>\n         <max>10</max>\n         <after>09af3-cc343-b409f</after>\n      </set>\n  </query>\n</iq>\n```\n\nserverè¿åæåä¸é¡µæ¶æ¯ï¼ä¼å¨ finéå¤´å¸¦ä¸`complete`å±æ§ï¼å¼ä¸º`ture`\n\n```xml\nExample 12. Server completes a result with the last page of messagesÂ¶\n<!-- result messages -->\n<iq type='result' id='u29303'>\n  <fin xmlns='urn:xmpp:mam:2' complete='true'>\n    <set xmlns='http://jabber.org/protocol/rsm'>\n      <first index='0'>23452-4534-1</first>\n      <last>390-2342-22</last>\n      <count>16</count>\n    </set>\n  </fin>\n</iq>\n    \n```\n\n**ä½¿ç¨åºæ¯ï¼**\n\nAå®¢æ·ç«¯æ¬å°å­å¨è·Bçèå¤©ä¿¡æ¯ï¼ æåä¸æ¡messageçidæ¯`09af3-cc343-b409f`ã ç°å¨Aæ³ççæè¿çæ¶æ¯ï¼`09af3-cc343-b409f`åçmessageï¼å¯ä»¥åéiqè¯·æ±ä¸­å¸¦ä¸`<after>09af3-cc343-b409f</after>`ãå·®éè¯·æ±ææ°æ¶æ¯ï¼åºäºæ¸¸æ çåé¡µã\n#### 5.å¶ä»å­æ®µçç­é\n\nå®¢æ·ç«¯æ¥è¯¢æå¡ç«¯æ¯æçå¶ä»å­æ®µ\n```xml\nExample 13. Client requests supported query fieldsÂ¶\n<iq type='get' id='form1'>\n  <query xmlns='urn:xmpp:mam:2'/>\n</iq>\n```\n\n```xml\nExample 14. Server returns supported fieldsÂ¶\n<iq type='result' id='form1'>\n  <query xmlns='urn:xmpp:mam:2'>\n    <x xmlns='jabber:x:data' type='form'>\n      <field type='hidden' var='FORM_TYPE'>\n        <value>urn:xmpp:mam:2</value>\n      </field>\n      <field type='jid-single' var='with'/>\n      // ææ¶æ¯receivedæ¶é´æ¥è¯¢\n      <field type='text-single' var='start'/>\n      <field type='text-single' var='end'/>\n      // æææ¬æ¥è¯¢\n      <field type='text-single' var='urn:example:xmpp:free-text-search'/>\n      // stanzaåå®¹\n      <field type='text-single' var='urn:example:xmpp:stanza-content'/>\n    </x>\n  </query>\n</iq>\n```\n### è¿åçmessage stanza ç»æ\n\n- `message`è¢«å°è£å¨`forwarded`åç´ ä¸­ã [XEP-0297: Stanza Forwarding](https://xmpp.org/extensions/xep-0297.html)\n- å¸¦`result` åç´ ï¼ å¶å±æ§idæ¯è¿æ¡messageçUID\n- delayåç´  [XEP-0203: Delayed Delivery](https://xmpp.org/extensions/xep-0203.html) messageè¢«æ¶å°çæ¶é´, UTCæ¶é´æ³æ ¼å¼\n\n\n```xml\nExample 16. Server returns two matching messagesÂ¶\n<message id='aeb213' to='juliet@capulet.lit/chamber'>\n  <result xmlns='urn:xmpp:mam:2' queryid='f27' id='28482-98726-73623'>\n    <forwarded xmlns='urn:xmpp:forward:0'>\n      <delay xmlns='urn:xmpp:delay' stamp='2010-07-10T23:08:25Z'/>\n      <message xmlns='jabber:client'\n        to='juliet@capulet.lit/balcony'\n        from='romeo@montague.lit/orchard'\n        type='chat'>\n        <body>Call me but love, and I'll be new baptized; Henceforth I never will be Romeo.</body>\n      </message>\n    </forwarded>\n  </result>\n</message>\n\n<message id='aeb214' to='juliet@capulet.lit/chamber'>\n  <result xmlns='urn:xmpp:mam:2' queryid='f27' id='5d398-28273-f7382'>\n    <forwarded xmlns='urn:xmpp:forward:0'>\n      <delay xmlns='urn:xmpp:delay' stamp='2010-07-10T23:09:32Z'/>\n      <message xmlns='jabber:client'\n         to='romeo@montague.lit/orchard'\n         from='juliet@capulet.lit/balcony'\n         type='chat' id='8a54s'>\n        <body>What man art thou that thus bescreen'd in night so stumblest on my counsel?</body>\n      </message>\n    </forwarded>\n  </result>\n</message>\n    \n```\n\n## MUC Archive\n\n- å­å¨ææåéç»roomJidçmessage\n- ä¸åå«`private message`\n- useréè¦æéæ¥è¯¢ç¾¤åå²èå¤©è®°å½\n- `forward` stanzaä¸­å¸¦æ`to`å±æ§,å¼æ¯roomJidï¼`from`å¼æ¯userJid \n- `x`éæè¯¥æ¶æ¯çåéèJid\n```xml\nExample 17. Server returns MUC messagesÂ¶\n<message id='iasd207' from='coven@chat.shakespeare.lit' to='hag66@shakespeare.lit/pda'>\n  <result xmlns='urn:xmpp:mam:2' queryid='g27' id='34482-21985-73620'>\n    <forwarded xmlns='urn:xmpp:forward:0'>\n      <delay xmlns='urn:xmpp:delay' stamp='2002-10-13T23:58:37Z'/>\n      <message xmlns=\"jabber:client\"\n        from='coven@chat.shakespeare.lit/firstwitch'\n        id='162BEBB1-F6DB-4D9A-9BD8-CFDCC801A0B2'\n        type='groupchat'>\n        <body>Thrice the brinded cat hath mew'd.</body>\n        <x xmlns='http://jabber.org/protocol/muc#user'>\n          <item affiliation='none'\n                jid='witch1@shakespeare.lit'\n                role='participant' />\n        </x>\n      </message>\n    </forwarded>\n  </result>\n</message>\n\n<message id='iasd207' from='coven@chat.shakespeare.lit' to='hag66@shakespeare.lit/pda'>\n  <result xmlns='urn:xmpp:mam:2' queryid='g27' id='34482-21985-73620'>\n    <forwarded xmlns='urn:xmpp:forward:0'>\n      <delay xmlns='urn:xmpp:delay' stamp='2002-10-13T23:58:43Z'/>\n      <message xmlns=\"jabber:client\"\n        from='coven@chat.shakespeare.lit/secondwitch'\n        id='90057840-30FD-4141-AA44-103EEDF218FC'\n        type='groupchat'>\n        <body>Thrice and once the hedge-pig whined.</body>\n        <x xmlns='http://jabber.org/protocol/muc#user'>\n          <item affiliation='none'\n                jid='witch2@shakespeare.lit'\n                role='participant' />\n        </x>\n      </message>\n    </forwarded>\n  </result>\n</message>\n```\n[XEP-0313: Message Archive Management](https://xmpp.org/extensions/xep-0313.html#intro)","tags":["XMPP"]},{"title":"XMPP(5): æ¶æ¯","url":"/2019/04/09/XMPP-5-æ¶æ¯/","content":"\n \n## Messageæ¶æ¯ä½æé \n\nå±æ§ï¼ \n1. to ï¼æ¥æ¶æ¹å°åï¼ JID \n2. from ï¼ åéæ¹ï¼ JID\n3. type \n  - chat: ä¸å¯¹ä¸èå¤©\n  - error: åºé\n  - groupchat: ç¾¤è\n  - headline: éç¥ãä¸´æ¶æ¶æ¯è¿ç§ä¸éè¦åå¤çç³»ç»æ¶æ¯\n  - normal: ä¹åæ²¡æèå¤©çè®°å½ï¼ å®¢æ·ç«¯å¯ä»¥åå¤çæ¶æ¯\n\nå­åç´ \n1. body: æ¶æ¯åå®¹\n\n```xml\n<message\n    from='juliet@example.com/balcony'\n    id='b4vs9km4'\n    to='romeo@example.net'\n    type='chat'\n    xml:lang='en'>\n  <body>Wherefore art thou, Romeo?</body>\n</message>\n\n```\n2. Subject: èå¤©çè¯é¢\n\n```xml\n\n<message\n    from='juliet@example.com/balcony'\n    id='c8xg3nf8'\n    to='romeo@example.net'\n    type='chat'\n    xml:lang='en'>\n  <subject>I implore you!</subject>\n  <body>Wherefore art thou, Romeo?</body>\n</message>\n```\n\n3. Thread: èå¤©ä¼è¯çå¯ä¸æ è¯\n\n## Example \n\nå¯¹è¯ï¼ \n\n```xml\nCC: <message\n        from='juliet@example.com/balcony'\n        to='romeo@example.net'\n        type='chat'\n        xml:lang='en'>\n      <body>My ears have not yet drunk a hundred words</body>\n      <thread>e0ffe42b28561960c6b12b944a092794b9683a38</thread>\n    </message>\n\nCC: <message\n        from='juliet@example.com/balcony'\n        to='romeo@example.net'\n        type='chat'\n        xml:lang='en'>\n      <body>Of that tongue's utterance, yet I know the sound:</body>\n      <thread>e0ffe42b28561960c6b12b944a092794b9683a38</thread>\n    </message>\n\nCC: <message\n        from='juliet@example.com/balcony'\n        to='romeo@example.net'\n        type='chat'\n        xml:lang='en'>\n      <body>Art thou not Romeo, and a Montague?</body>\n      <thread>e0ffe42b28561960c6b12b944a092794b9683a38</thread>\n    </message>\n\nUC: <message\n        from='romeo@example.net/orchard'\n        to='juliet@example.com/balcony'\n        type='chat'\n        xml:lang='en'>\n      <body>Neither, fair saint, if either thee dislike.</body>\n      <thread>e0ffe42b28561960c6b12b944a092794b9683a38</thread>\n    </message>\n\nCC: <message\n        from='juliet@example.com/balcony'\n        to='romeo@example.net/orchard'\n        type='chat'\n        xml:lang='en'>\n      <body>How cam'st thou hither, tell me, and wherefore?</body>\n      <thread>e0ffe42b28561960c6b12b944a092794b9683a38</thread>\n    </message>\n\n```\n\nå¨[xmpp.js](https://github.com/xmppjs/xmpp.js/)ä¸­ï¼å®¢æ·ç«¯ä¸æå¡ç«¯å»ºç«äºWebSocketé¿é¾æ¥åï¼åæ¶æ¯ï¼éè¦èªå·±æé æ¶æ¯ä½\n\n``` js \nconst {client, xml} = require('@xmpp/client')\n\nconst xmpp = client({\n  service: 'ws://localhost:5280/xmpp-websocket',\n  domain: 'localhost',\n  resource: 'example',\n  username: 'username',\n  password: 'password',\n})\n\n const message = xml(\n    'message',\n    {type: 'chat', to: address},\n    xml('body', 'hello world')\n  )\n  await xmpp.send(message)\n\n```\n\nå¦ææ¶å°æ¶æ¯ä¼èµ°å°ä¸ä¸ªåè°é, chat-sdkå°±å¯ä»¥æ ¹æ®typeå­æ®µæ¥ååã\n\n\n```js \nself.xmppClient.on('stanza', function (stanza: any) {\n    Utils.DLog('[Chat] RECV:', stanza.toString());\n    /**\n     * Detect typeof incoming stanza\n     * and fire the Listener\n     */\n    if (stanza.is('presence')) {\n        self._onPresence(stanza);\n    } else if (stanza.is('iq')) {\n        self._onIQ(stanza);\n    } else if (stanza.is('message')) {\n        if (stanza.attrs.type === 'headline') {\n            self._onSystemMessageListener(stanza);\n        } else if (stanza.attrs.type === 'error') {\n            self._onMessageErrorListener(stanza);\n        } else {\n            self._onMessage(stanza);\n        }\n    }\n});\n```\n\n- ref: https://xmpp.org/rfcs/rfc6121.html#message","tags":["XMPP"],"categories":["NetWork"]},{"title":"JWT å¥é¨","url":"/2019/04/03/JWT-å¥é¨/","content":"\n\n## ä»ä¹æ¯JSON Web Tokens (JWT)ï¼ \n\n\n```\n  JSON Web Token (JWT) is a compact, URL-safe means of representing\n   claims to be transferred between two parties.  The claims in a JWT\n   are encoded as a JSON object that is used as the payload of a JSON\n   Web Signature (JWS) structure or as the plaintext of a JSON Web\n   Encryption (JWE) structure, enabling the claims to be digitally\n   signed or integrity protected with a Message Authentication Code\n   (MAC) and/or encrypted.\n   \n\n```\n\n## æä¹ç¨ï¼ \n\nauthenticationæ¶ï¼å½useræåç»å½ï¼serverçæaccess token, åéç»userï¼userè¯·æ±serveræ¶å¸¦ä¸JWTï¼serveréè¿JWTéªè¯æ¯å¦æ¯å¯ä¿¡ä»»çå®¢æ·ç«¯è¯·æ±äºã\n\n\n![1*SSXUQJ1dWjiUrDoKaaiGLA.png](https://cdn-images-1.medium.com/max/1600/1*SSXUQJ1dWjiUrDoKaaiGLA.png)\n\n## ç»æ\n\nå¨å®¢æ·ç«¯çæ¥JWTæ¯ä¸ä¸²encodeå å¯è¿çå­ç¬¦ä¸²,`header.payload.signature`ï¼å¦ä¸å¾å·¦è¾¹ãä½å®decodeåå¶å®æ¯ä¸å¾å³è¾¹çJSONç»æä½\n\n![legacy-app-auth-5.png](https://cdn.auth0.com/blog/legacy-app-auth/legacy-app-auth-5.png)\n\n#### 1. çæheader\n\ne.g.\n```json\n{\n  \"alg\": \"HS256\",\n  \"typ\": \"JWT\"\n}\n```\n\nè¿éï¼algçå¼æå®ç¨HMAC-SHA256ç®æ³ç­¾å\n\n#### 2. çæpayload\n\nåå«ç¨æ·ç¸å³çä¿¡æ¯\n```\nThe second part of the token is the payload, which contains the claims. \nClaims are statements about an entity (typically, the user) and additional data. \n```\næä¸ç§[claims](https://tools.ietf.org/html/rfc7519#section-4.1): registered, public, and private claims.\n\ne.g.\n```json\n\n{\n  \"sub\": \"1234567890\",\n  \"name\": \"John Doe\",\n  \"iat\": 1516239022\n}\n```\n\n#### 3.çæsignature\n\n```js\n\nHMACSHA256(\n  base64UrlEncode(header) + \".\" +\n  base64UrlEncode(payload),\n  your-256-bit-secret\n) \n```\næheaderè·payload encodeç»æåï¼ç¨'.'è¿æ¥ï¼çæ: <span style=\"color:#fb015b\"> eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9</span><span>.</span>\n<span style=\"color:#d63aff\"> eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ</span>\n\nåç¨æå®çhashç®æ³(ä¾å­æ¯HS256),ç¨ç§é¥ï¼æå¡ç«¯çï¼çæç­¾å:<span style=\"color:#00b9f1\">SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c<span>\n\n\n## éªè¯\n\nå¦å¾1ï¼ JWTç±Authentication serverçæï¼ å¨clientè®¤è¯ååç»clientï¼ clientè¯·æ±application serverçæ¶åå¸¦ä¸JWTï¼application serverå¨è®¤è¯é¶æ®µä»Authentiation serveré£å¿æ¿å°scret keyï¼ç¨åæ ·ç®æ³çæsignatureï¼ è·clientåæ¥çJWTçsignatureåæ¯è¾ï¼çæ¯å¦matchã\n\n\n\n\n\n\n\n\n\n\n\n\n[5 Easy Steps to Understanding JSON Web Tokens (JWT)](https://medium.com/vandium-software/5-easy-steps-to-understanding-json-web-tokens-jwt-1164c0adfcec)\n[JSON Web Token Introduction - jwt.io](https://jwt.io/introduction/) \n[RFC 7519 - JSON Web Token (JWT)](https://tools.ietf.org/html/rfc7519)","tags":["-- Auth"]},{"title":"XMPP(4):Search å vCard","url":"/2019/03/31/XMPP-4-Search-vCard/","content":"\n# XMPP Search \n\n`jabber:iq:search`åè®®ç¨æ¥æ¥æ¾ç¨æ·ä¿¡æ¯ã\n\n1. æä»¬åæ¥è¯¢å¯ä»¥ç¨åªäºå­æ®µæ¥æ¾ç¨æ·\n\n```xml\n// Requesting Search Fields\n\n<iq type='get'\n    from='romeo@montague.net/home'\n    to='characters.shakespeare.lit'\n    id='search1'\n    xml:lang='en'>\n  <query xmlns='jabber:iq:search'/>\n</iq>\n```\n\n2. service è¿å\n\n```xml\n// Receiving Search Fields\n<iq type='result'\n    from='characters.shakespeare.lit'\n    to='romeo@montague.net/home'\n    id='search1'\n    xml:lang='en'>\n  <query xmlns='jabber:iq:search'>\n    <instructions>\n      Fill in one or more fields to search\n      for any matching Jabber users.\n    </instructions>\n    <first/>\n    <last/>\n    <nick/>\n    <email/>\n  </query>\n</iq>\n```\n3. æå¡ç«¯è¿åï¼å¯ä»¥ç¨`first` `last` `nick` `email` è¿å ä¸ªå­æ®µæ¾äººãæ¥çå°±ç¨lastæ¥äºº.\n\n```xml\n// Submitting a Search Request\n\n<iq type='set'\n    from='romeo@montague.net/home'\n    to='characters.shakespeare.lit'\n    id='search2'\n    xml:lang='en'>\n  <query xmlns='jabber:iq:search'>\n    <last>Capulet</last>\n  </query>\n</iq>\n```\n\næå¡ç«¯å¯ä»¥è½ä¼è¿åå¥½å¤ä¸ªlastå¹éçitem\n```xml\n<iq type='result'\n    from='characters.shakespeare.lit'\n    to='romeo@montague.net/home'\n    id='search2'\n    xml:lang='en'>\n  <query xmlns='jabber:iq:search'>\n    <item jid='juliet@capulet.com'>\n      <first>Juliet</first>\n      <last>Capulet</last>\n      <nick>JuliC</nick>\n      <email>juliet@shakespeare.lit</email>\n    </item>\n    <item jid='tybalt@shakespeare.lit'>\n      <first>Tybalt</first>\n      <last>Capulet</last>\n      <nick>ty</nick>\n      <email>tybalt@shakespeare.lit</email>\n    </item>\n  </query>\n</iq>\n```\næ²¡æç»æçè¯ï¼queryå°±æ²¡æå­åç´ \n\n```xml\n<iq type='result'\n    from='characters.shakespeare.lit'\n    to='romeo@montague.net/home'\n    id='search2'\n    xml:lang='en'>\n  <query xmlns='jabber:iq:search'/>\n</iq>\n```\n\nXMPP Search \n\n`jabber:iq:search`åè®®ç¨æ¥æ¥æ¾ç¨æ·ä¿¡æ¯ã\n\næä»¬åæ¥è¯¢å¯ä»¥ç¨åªäºå­æ®µæ¥æ¾ç¨æ·\n\n```xml\n// Requesting Search Fields\n\n<iq type='get'\n    from='romeo@montague.net/home'\n    to='characters.shakespeare.lit'\n    id='search1'\n    xml:lang='en'>\n  <query xmlns='jabber:iq:search'/>\n</iq>\n```\n\nservice è¿å\n\n```xml\n// Receiving Search Fields\n<iq type='result'\n    from='characters.shakespeare.lit'\n    to='romeo@montague.net/home'\n    id='search1'\n    xml:lang='en'>\n  <query xmlns='jabber:iq:search'>\n    <instructions>\n      Fill in one or more fields to search\n      for any matching Jabber users.\n    </instructions>\n    <first/>\n    <last/>\n    <nick/>\n    <email/>\n  </query>\n</iq>\n```\næå¡ç«¯è¿åï¼å¯ä»¥ç¨`first` `last` `nick` `email` è¿å ä¸ªå­æ®µæ¾äººãæ¥çå°±ç¨lastæ¥äºº.\n\n```xml\n// Submitting a Search Request\n\n<iq type='set'\n    from='romeo@montague.net/home'\n    to='characters.shakespeare.lit'\n    id='search2'\n    xml:lang='en'>\n  <query xmlns='jabber:iq:search'>\n    <last>Capulet</last>\n  </query>\n</iq>\n```\n\næå¡ç«¯å¯ä»¥è½ä¼è¿åå¥½å¤ä¸ªlastå¹éçitem\n```xml\n<iq type='result'\n    from='characters.shakespeare.lit'\n    to='romeo@montague.net/home'\n    id='search2'\n    xml:lang='en'>\n  <query xmlns='jabber:iq:search'>\n    <item jid='juliet@capulet.com'>\n      <first>Juliet</first>\n      <last>Capulet</last>\n      <nick>JuliC</nick>\n      <email>juliet@shakespeare.lit</email>\n    </item>\n    <item jid='tybalt@shakespeare.lit'>\n      <first>Tybalt</first>\n      <last>Capulet</last>\n      <nick>ty</nick>\n      <email>tybalt@shakespeare.lit</email>\n    </item>\n  </query>\n</iq>\n```\næ²¡æç»æçè¯ï¼queryå°±æ²¡æå­åç´ \n\n```xml\n<iq type='result'\n    from='characters.shakespeare.lit'\n    to='romeo@montague.net/home'\n    id='search2'\n    xml:lang='en'>\n  <query xmlns='jabber:iq:search'/>\n</iq>\n```\n\n# vCard \nvCardåè®®ä¸»è¦è´è´£ç¨æ·ä¿¡æ¯å­å¨ï¼å°±åä¸ªäººåçã\n\n1. æ¥çèªå·±çvCard\nå¦æå®¢æ·ç«¯æ³æ¥è¯¢èªå·±çvCard, éè¦åéIQ-set stanzaï¼æ³¨ææ²¡ætoå°åå¦ã\n\n```xml\n<iq from='stpeter@jabber.org/roundabout'\n    id='v1'\n    type='get'>\n  <vCard xmlns='vcard-temp'/>\n</iq>\n```\n\n2. è¿åä¿¡æ¯\næ¥çæå¡ç«¯è¿åä¸å çç¨æ·ä¿¡æ¯\n\n```xml\n\n<iq id='v1'\n    to='stpeter@jabber.org/roundabout'\n    type='result'>\n  <vCard xmlns='vcard-temp'>\n    <FN>Peter Saint-Andre</FN>\n    <N>\n      <FAMILY>Saint-Andre</FAMILY>\n      <GIVEN>Peter</GIVEN>\n      <MIDDLE/>\n    </N>\n    <NICKNAME>stpeter</NICKNAME>\n    <URL>http://www.xmpp.org/xsf/people/stpeter.shtml</URL>\n    <BDAY>1966-08-06</BDAY>\n    <ORG>\n      <ORGNAME>XMPP Standards Foundation</ORGNAME>\n      <ORGUNIT/>\n    </ORG>\n    <TITLE>Executive Director</TITLE>\n    <ROLE>Patron Saint</ROLE>\n    <TEL><WORK/><VOICE/><NUMBER>303-308-3282</NUMBER></TEL>\n    <TEL><WORK/><FAX/><NUMBER/></TEL>\n    <TEL><WORK/><MSG/><NUMBER/></TEL>\n    <ADR>\n      <WORK/>\n      <EXTADD>Suite 600</EXTADD>\n      <STREET>1899 Wynkoop Street</STREET>\n      <LOCALITY>Denver</LOCALITY>\n      <REGION>CO</REGION>\n      <PCODE>80202</PCODE>\n      <CTRY>USA</CTRY>\n    </ADR>\n    <TEL><HOME/><VOICE/><NUMBER>303-555-1212</NUMBER></TEL>\n    <TEL><HOME/><FAX/><NUMBER/></TEL>\n    <TEL><HOME/><MSG/><NUMBER/></TEL>\n    <ADR>\n      <HOME/>\n      <EXTADD/>\n      <STREET/>\n      <LOCALITY>Denver</LOCALITY>\n      <REGION>CO</REGION>\n      <PCODE>80209</PCODE>\n      <CTRY>USA</CTRY>\n    </ADR>\n    <EMAIL><INTERNET/><PREF/><USERID>stpeter@jabber.org</USERID></EMAIL>\n    <JABBERID>stpeter@jabber.org</JABBERID>\n    <DESC>\n      More information about me is located on my\n      personal website: http://www.saint-andre.com/\n    </DESC>\n  </vCard>\n</iq>\n```\nå¦ææ²¡æç¸å³vCardï¼ä¼è¿åerror\n```xml\n// item-not-found\n<iq id='v1'\n    to='stpeter@jabber.org/roundabout'\n    type='error'>\n  <vCard xmlns='vcard-temp'/>\n  <error type='cancel'>\n    <item-not-found xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>\n  </error>\n</iq>\n```\n\n```xml\n// empty element\n<iq id='v1'\n    to='stpeter@jabber.org/roundabout'\n    type='result'>\n  <vCard xmlns='vcard-temp'/>\n</iq>\n\n```\n\n3. æ¥çå«äººçvCard\n\nç¨IQ-get stanza, å¸¦ä¸toå°å\n\n```xml \n\n<iq from='stpeter@jabber.org/roundabout'\n    id='v3'\n    to='jer@jabber.org'\n    type='get'>\n  <vCard xmlns='vcard-temp'/>\n</iq>\n```\n\n```xml\n<iq from='jer@jabber.org'\n    to='stpeter@jabber.org/roundabout'\n    type='result'\n    id='v3'>\n  <vCard xmlns='vcard-temp'>\n    <FN>JeremieMiller</FN>\n    <N>\n      <GIVEN>Jeremie</GIVEN>\n      <FAMILY>Miller</FAMILY>\n      <MIDDLE/>\n    </N>\n    <NICKNAME>jer</NICKNAME>\n    <EMAIL><INTERNET/><PREF/><USERID>jeremie@jabber.org</USERID></EMAIL>\n    <JABBERID>jer@jabber.org</JABBERID>\n  </vCard>\n</iq>\n\n```\n\n4. æ´æ°vCard\n\nå®¢æ·ç«¯å¯ä»¥ç¨IQ-set stanza æ´æ°èªå·±çvCardä¿¡æ¯\n\n```xml\n<iq id='v2' type='set'>\n  <vCard xmlns='vcard-temp'>\n    <FN>Peter Saint-Andre</FN>\n    <N>\n      <FAMILY>Saint-Andre</FAMILY>\n      <GIVEN>Peter</GIVEN>\n      <MIDDLE/>\n    </N>\n    <NICKNAME>stpeter</NICKNAME>\n    <URL>http://www.xmpp.org/xsf/people/stpeter.shtml</URL>\n    <BDAY>1966-08-06</BDAY>\n    <ORG>\n      <ORGNAME>XMPP Standards Foundation</ORGNAME>\n      <ORGUNIT/>\n    </ORG>\n    <TITLE>Executive Director</TITLE>\n    <ROLE>Patron Saint</ROLE>\n    <TEL><WORK/><VOICE/><NUMBER>303-308-3282</NUMBER></TEL>\n    <TEL><WORK/><FAX/><NUMBER/></TEL>\n    <TEL><WORK/><MSG/><NUMBER/></TEL>\n    <ADR>\n      <WORK/>\n      <EXTADD>Suite 600</EXTADD>\n      <STREET>1899 Wynkoop Street</STREET>\n      <LOCALITY>Denver</LOCALITY>\n      <REGION>CO</REGION>\n      <PCODE>80202</PCODE>\n      <CTRY>USA</CTRY>\n    </ADR>\n    <TEL><HOME/><VOICE/><NUMBER>303-555-1212</NUMBER></TEL>\n    <TEL><HOME/><FAX/><NUMBER/></TEL>\n    <TEL><HOME/><MSG/><NUMBER/></TEL>\n    <ADR>\n      <HOME/>\n      <EXTADD/>\n      <STREET/>\n      <LOCALITY>Denver</LOCALITY>\n      <REGION>CO</REGION>\n      <PCODE>80209</PCODE>\n      <CTRY>USA</CTRY>\n    </ADR>\n    <EMAIL><INTERNET/><PREF/><USERID>stpeter@jabber.org</USERID></EMAIL>\n    <JABBERID>stpeter@jabber.org</JABBERID>\n    <DESC>\n      Check out my blog at https://stpeter.im/\n    </DESC>\n  </vCard>\n</iq>\n```\n\næå¡ç«¯è¿åç»æ\n\n```xml\n<iq id='v2'\n    to='stpeter@jabber.org/roundabout'\n    type='result'/>\n```\n\nref: https://xmpp.org/extensions/xep-0054.html#intro\nref: https://xmpp.org/extensions/xep-0055.html#intro","tags":["XMPP"]},{"title":"å½±åæåç3ä¸ªå ç´ ","url":"/2019/03/31/å½±åæåçå ä¸ªå ç´ /","content":"\n\n\n## è¿åé\n\n`æå`ä¹æåä½é¢ç§¯ä¸åå­çæ°éã\n\n- å¦ææä»¬æ²¡ææè·è¶³å¤çåï¼é£ä¹ç¸çå°±ä¼`æ¬ æ`:\n\n<img src=\"/img/15000130641224/15000133443588.jpg\" width = \"368\" height = \"500\" alt=\"å¾çåç§°\" align=center />\n\n\n- å¦ææä»¬æè·çåå¤ªå¤ï¼å¾åå°±ä¼`è¿æ`:\n\n<img src=\"/img/15000130641224/15000133832576.jpg\" width = \"368\" height = \"500\" alt=\"å¾çåç§°\" align=center />\n\n\n\n## ä¸ä¸ªè¦ç´ å¯ä»¥å½±åæåçè¿åé\n\n- å¿«é¨éåº¦\n- åå\n- æååº¦ (ISO)\n\n![](/img/15000130641224/15006272782478.jpg)\n\næ³è±¡ç¸æºæ¯é»ææ¿é´ï¼æä¸ªçªæ·ï¼ååï¼ï¼ æåçªå¸ï¼å¿«é¨ï¼ï¼çªæ·è¶å¤§è¿åéè¶å¤§ï¼çªå¸æå¼çæ¶é´è¶ä¹ã çªæ·å¯¹é¢æé¢éå­ï¼æå®åä»¶ï¼ï¼æè·åå­æåã\n\n## 1.å¿«é¨éåº¦\nå½æä»¬ææå¾çæ¶ï¼å¾åä¼ æå¨éè¦ææä¸æ®µæ¶é´çåã è¿ä¸ªæ¶é´æ®µæåæ¶é´ï¼ä¹å«å¿«é¨éåº¦ãç¸æºä¸­ä¸è¬ç¨`1/400ã8`è¿æ ·çå½¢å¼è¡¨ç¤ºï¼è¿ä¸ªæ°å¼è¶å¤§ï¼å¿«é¨å¼å¯çæ¶é´è¶é¿ï¼è¿å¥ç¸æºçåçº¿å°±è¶å¤ï¼ä½è¿å¨çç©ä½å¾å¯è½æ¨¡ç³.\n\nçä¸å¾ï¼ \n\n![](/img/15000130641224/15006271573170.jpg)\n\n\n## 2.æååº¦ (ISO)\n\nå®è¢«ç¨æ¥è¡¡éå¾åä¼ æå¨å¯¹åç`çµæç¨åº¦`ï¼ä»¥åå æ­¤å¸¦æ¥çæååªé³ãISOè¶å¤§ï¼ä¼ æå¨è¶çµæï¼æè·åè½åè¶å¼ºï¼ç§çè¶äº®ï¼ä½åªç¹ä¹è¶å¤ã\n\n![](/img/15000130641224/15006272197963.jpg)\n\n####å·¦ï¼ ISO 32 å 1/3 ç§æå\n####å³ï¼ ISO 1600 å 1/180 ç§\n![](/img/15000130641224/15000247388896.jpg)\n\n\n**å¾åä¼ æå¨**\nè¿ä¸ªé¨åå°±ç¸å½äºæä»¬ç¼çéçè§ç½èãå¾åä¼ æå¨å¯ä»¥å°åæèåå­è½¬æ¢ä¸ºçµä¿¡å·ã\n\n**å¾åä¼ æå¨æ¯ç±æµ·éçç¬ä¸ªçåç´ ä¼ æå¨ä¸²èµ·æ¥çå·¨å¤§ç©å½¢åºå** æä»¬å¯ä»¥å°æ¯ä¸ªåç´ ä¼ æå¨æ³è±¡æä¸ä¸ªè£çµè·çæ¡¶ãå½åå­æå»å°åç´ ä¼ æå¨çåäºæç®¡æ¶ï¼å®ä»¬å°å¨è¿ä¸ªåç´ çæ¡¶ä¸­ç¼æ¢å°ç§¯æçµè·ãæåï¼æ¯ä¸ªåç´ é½ä¼æå®èªå·±çä¸å°æ¡¶çµå­ãè¿äºçµè·çæ°éæ¯ä¾èµäºåå­æ°éç -- æèè¯´æ¯å³å®äºæå°è¿ä¸ªç¹å®çç¹ä¸çåçå¼ºåº¦ã\n\nå ä¸ºæä»¬æä¸ä¸ªåç´ ä¼ æå¨çäºç»´éµåï¼æä»¬ç°å¨å°±æ¥æè½å¤ååºåºææè¿äºä½ç½®çåçå¼ºåº¦çä¸ç»äºç»´çµè·éµåäºã**å¨ iPhone 6 ä¸ï¼æä»¬æå«ç¾ä¸ä¸ªè¿æ ·çå¾®å°çåç´ ä¼ æå¨**ï¼ä»¥åå®ä»¬æå¯¹åºççµè·æ¡¶ã\n\n\n## 3.åå\n\nç¸æºçéå¤´çåå(Aperture)æ¯ç¨æ¥è¡¡éå°è¾¾å¾åæåºå¨çåæéè¿ç`éå­çå¤§å°`ç\n\n\n#### æåå¼\n\næåå¼ï¼Exposure Valueï¼EVï¼ä»£è¡¨è½å¤ç»åºåæ ·æåçææç¸æºååå¿«é¨ç»å\n\n![](/img/15000130641224/15026013567638.jpg)\nå¶ä¸­Næ¯ååï¼få¼ï¼ï¼tæ¯æåæ¶é´ï¼å¿«é¨ï¼ï¼åä½ç§ãæåå¼0ï¼EV0ï¼å¯¹åºäºæåæ¶é´ä¸º1ç§èååä¸ºf/1.0çç»åæå¶ç­æç»åã\n\n`æåå¼ != æåé`\n\n####æåéï¼photometric exposureï¼\n\n![](/img/15000130641224/15026015278605.jpg)\nå¶ä¸­  Hæ¯æåéï¼ Eæ¯å½±åå¹³é¢çç§åº¦ï¼è  tæ¯æåæ¶é´ãç§åº¦ Eç±få¼ææ§å¶ï¼ä½ä¹åå³äºç¯å¢äº®åº¦ã\n\n## ååä¸æ¯æ·±\n\n##### æ¯æ·±\n\n![](/img/15000130641224/15026018990936.jpg)\n\n![](/img/15000130641224/15026016717518.jpg)\n\n![](/img/15000130641224/15026016975426.jpg)\n\nååç³»æ°= `éå¤´ç¦è·/ååå­å¾`ï¼å¸¸ç¨çéå¤´çååæ°åºåä¸º\n`1ï¼ 1.4ï¼ 2ï¼ 2.8ï¼ 4ï¼ 5.6ï¼ 8ï¼ 11ï¼ 16ï¼ 22ï¼ 32ï¼ 45ï¼ 64ï¼90ï¼128`\n\n\n\n\n","tags":["CV"]},{"title":"XMPP(3):Roster&èç³»äºº","url":"/2019/03/31/Roster-èç³»äºº/","content":"\n\n\n\nXMPPä¸­èç³»äººæ¨¡ååè®®æ¯`jabber:iq:roster`. Rosterç´æ¥ç¿»è¯å«è±ååï¼å¶å®å®å°±æ¯èç³»äººåè¡¨å¦ã\n\n## å®¢æ·ç«¯è·åèç³»äººåè¡¨\n\næ¯è¾ç®åï¼åéIQ stanzaç»server. xmlns=`jabber:iq:roster`;type='get'\n\n```xml\n\n<iq from='user@server.com/balcony'\n       id='bv1bs71f'\n       type='get'>\n    <query xmlns='jabber:iq:roster'/>\n  </iq>\n\n```\nè¿åç»æçitemä¸­æèç³»äººJid\n\n```xml\n<iq id='bv1bs71f'\n       to='user@server.com/balcony'\n       type='result'>\n    <query xmlns='jabber:iq:roster' ver='ver7'>\n      <item jid='contact1@server.com'/>\n      <item jid='contact2@server.com'/>\n    </query>\n  </iq>\n\n```\n\n## æ·»å èç³»äºº(å å¥½åï¼çæµç¨ \n\næ¹æ³æä¸¤ç§ï¼ç¬¬ä¸ç§ç¨IQ set, è§[rfc6121](https://xmpp.org/rfcs/rfc6121.html#roster-add).\n\n1. å®¢æ·ç«¯è¯·æ±æ·»å èç³»äºº\n\nxmlnsç¨`jabber:iq:roster`; å¸¦ä¸æ³æ·»å çç¨æ·jid. nameå¯ä»¥ä¸å¸¦; `group`åç»ç¨ã\n\n\n```xml\n<iq from='user@server.com/balcony' type='set' id='roster_2'>\n  <query xmlns='jabber:iq:roster'>\n    <item jid='contact@server.com'\n          name='contact'>\n      <group>Servants</group>\n    </item>\n  </query>\n</iq>\n```\n\n2.1. serveréç¥åä¸ä¸ªè´¦æ·å³èçææå®¢æ·ç«¯: èç³»äººåè¡¨æ´æ°äºã\n\n```xml\n\n<iq to='user@server.com/balcony'\n    type='set'\n    id='a78b4q6ha463'>\n  <query xmlns='jabber:iq:roster'>\n    <item jid='contact@server.com'\n          name='contact'\n          subscription='none'>\n      <group>Servants</group>\n    </item>\n  </query>\n</iq>\n\n<iq to='user@server.com/chamber'\n    type='set'\n    id='a78b4q6ha464'>\n  <query xmlns='jabber:iq:roster'>\n    <item jid='contact@server.com'\n          name='contact'\n          subscription='none'>\n      <group>Servants</group>\n    </item>\n  </query>\n</iq>\n```\n\nserveråå¤IQ stanzaç»è¯·æ±æ·»å èç³»äººçå®¢æ·ç«¯balcony\n```xml\n<iq to='user@server.com/balcony' type='result' id='roster_2'/>\n```\n\n\n##  å é¤èç³»äºº\n\nç»serveråéä¸ªIQ setï¼ subscriptionä¸å®æ¯'remove'.\n\n```xml\n\n<iq from='user@server.com/balcony' type='set' id='roster_4'>\n  <query xmlns='jabber:iq:roster'>\n    <item jid='contact@server.com' subscription='remove'/>\n  </query>\n</iq>\n\n```\n\n## Presence\n\nå¢å èç³»äººçå¦ä¸ç§æ¹æ³æ¯Presenceè®¢éæºå¶.Presence stanzaå¶å®æä¸¤ç§åè½ï¼\n- å¹¿æ­online/offlineç¶æ, [ä¹åæç« ](https://suelan.github.io/2019/03/26/XMPP-Overview/#The-Presence-Stanza)æè¿\n- æ§å¶èç³»äººè®¢é. å°±æ¯å¢å å¥½ååè½å¯\n\næä»¬ç¨typeæ¥åºåè¿ä¸¤ç§åè½ãtypeæ¯`available| unavailable`ï¼ presence stanzaè¡¨è¾¾online/offlineç¶æãtypeè¥æ¯`subscribe | subscribed | unsubscribe| unsubscribed`ï¼å°±è·èç³»äººæå³å¦ã\n\n\nsubscribtionæåç§ç¶æï¼\n- NONE :  \n- TO  :  userè®¢écontactçç¶æ\n- FROM : contactè¢«userè®¢é\n- BOTH : userè·contactç¸äºsubcribe\n\n![flow](https://www.blikoontech.com/wp-content/uploads/2018/03/XMPP_Subscription_Flow.png)\n\nå¦ä¸å¾ï¼ä¸å¼å§userè·contactæ²¡å¥å³ç³»ï¼subscriptionç¶æé½æ¯noneã æ¥çuseråéäºä¸æ¡Presence stanzaç»contactï¼æ³subscribeä»çç¶æãå¦ä¸ï¼\n```xml\n// from user\n<presence to='contact@server.com' type='subscribe'/>\n```\nç°å¨userç¨`jabber:iq:roster` æ¥è¯¢ææèç³»äººçæ¶åï¼ä¼åç°itemå¤äºä¸æ¡, contactè¿æ²¡ç¡®è®¤, æä»¥ ask='subscribe', subscribtion='none'\n\n```xml\n// user's roster\n<item ask='subscribe' subscription='none' jid='contact@server.com'/>\n```\nserverè¦å°æ¶æ¯è½¬åç»contactå®¢æ·ç«¯, contactç»å½æ¶ï¼ä¼æ¶å°ä¸æ¡æ¥èªuserçpresence stanza; typeæ¯'subscribe'ã æä»¬å¯ä»¥ç¨è¿æ¡æ¶æ¯æ¥åâæ¶å°æ¥èªuseræ·»å å¥½åçè¯·æ±âè¿æ ·çåè½\n```xml\n<presence from='user@server.com' to='contact@server.com' type='subscribe' xmlns='jabber:client'></presence>\n```\n\nåæ¶contact/devè®¾å¤ä¼æ¶å°Rosteræ´æ°çä¿¡æ¯. \n```xml\n<iq  from='contact@server.com' to='contact@server.com/dev' id='13a99ca5' type='result' xmlns='jabber:client'>\n    <query  xmlns='jabber:iq:roster'>\n         <item  ask='subscribe' subscription='none' jid='user@server.com'/>\n       </query>\n</iq>\n```\n#### æ¥åè¯·æ±\nå¦æcontactæ¥åè¯·æ±ï¼ä»è¦åéä¸æ¡presenceç»user. typeå¼æ¯'subscribed'\n\n```xml\n<presence to='user@server.com' type='subscribed'/>\n```\n\nuserè¿è¾¹çrosterä¼æ´æ°\n```xml\n// user's roster\n<item subscription='to' jid='contact@server.com'/>\n```\nè¿æ¶å¨contactçrosteråè¡¨éï¼userçsubscriptionæ¯fromã ```xml\n// contact's roster\n<item ask='subscribe' subscription='from' jid='user@server.com'/>\n```\n\næ¥çcontactä¹è¯·æ±è®¢éuser \n\n```xml\n<iq from='user@server.com/balcony' type='set' id='roster_2'>\n  <query xmlns='jabber:iq:roster'>\n    <item jid='contact@server.com'\n          name='contact'>\n      <group>Servants</group>\n    </item>\n  </query>\n</iq>\n```\n\nContactåæ ·æµç¨åï¼ä»ä¸¤çsubscriptioné½åæäºbothã\n\n#### æç»\nå¦æcontactæ³æç»userçè¯·æ±ï¼ä¹æ¯åépresence \n```xml\n<presence to='user@server.com' type='unsubscribed'/>\n```\nå¦æuseræ³åæ¶å¯¹contactçè®¢é, åépresence stanzaï¼type æ¯unsubscribed\n```xml\n<presence to='contact@server.com' type='unsubscribed'/>\n```\n\n\nref: https://xmpp.org/rfcs/rfc3921.html#roster","tags":["XMPP"]},{"title":"XMPP(2):æ³¨åè´¦æ·","url":"/2019/03/29/XMPP-2-æ³¨åè´¦æ·/","content":"\n\n\n## XMPPæ³¨åæµç¨\n\n\n#### 1. clientåéæ¶æ¯ä½, å»æå¡ç«¯æ¥è¯¢æ³¨åéè¦çå­æ®µ\n\n\n```xml\n<iq type='get' id='reg1' to='localhost'>\n  <query xmlns='jabber:iq:register'/>\n</iq>\n```\n\nxmlnsæ¯ `jabber:iq:register`, typeæ¯`get`\n\n#### 2.1. æªæ³¨åï¼è¿åæ³¨åéè¦çå­æ®µ\n\n```xml\n<iq type='result' id='reg1'>\n  <query xmlns='jabber:iq:register'>\n    <instructions>\n      Choose a username and password for use with this service.\n      Please also provide your email address.\n    </instructions>\n    <username/>\n    <password/>\n    <email/>\n  </query>\n</iq>\n```\n\n`<instructions/>` elementï¼SHOULD contain an <instructions/> element (whose XML character data MAY be modified to reflect the fact that the entity is currently registered)\n\n#### 2.2. å·²æ³¨åï¼æå¡ç«¯çè¿åç»æ\n\n```xml\n<iq  xmlns='jabber:client' xml:lang='en' to='olivia@localhost/180244803852118156522754' from='localhost' type='result' id='reg1'>\n    <query  xmlns='jabber:iq:register'>\n        <username>olivia</username>\n        <registered/>\n        <password/>\n        <instructions>Choose a username and password to register with this server</instructions>\n    </query>\n</iq>\n```\n\nhostä¼æ ¹æ®\"from\"çå°åå¤æ­entityæ¯å¦å·²ç»æ³¨åäºï¼IQ resultæ¶æ¯æä¸ä¸ªç©ºç`<registered/>`ï¼ æ ç¤ºè¯¥entiryå·²ç»æ³¨åè¿äºã\n\n#### 3.client æ³¨å \n\niq stanzaçtypeæ¯`set`, xmlns`jabber:iq:register`\n\n```xml\n<iq type='set' id='reg2'>\n  <query xmlns='jabber:iq:register'>\n    <username>bill</username>\n    <password>Calliope</password>\n    <email>bard@shakespeare.lit</email>\n  </query>\n</iq>\n```\n\n#### 4.1 æ³¨åæå \n\n```xml\n<iq type='result' id='reg2'/>\n\n```\n\n#### 4.2 æ³¨åå¤±è´¥ï¼å½åå²çª\n\n```xml\n<iq type='error' id='reg2'>\n  <query xmlns='jabber:iq:register'>\n    <username>bill</username>\n    <password>m1cro$oft</password>\n    <email>billg@bigcompany.com</email>\n  </query>\n  <error code='409' type='cancel'>\n    <conflict xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>\n  </error>\n</iq>\n```\n\n#### 4.3 æ¶æ¯ä¸å¨ ` <not-acceptable/> `\n\n```xml\n<iq type='error' id='reg2'>\n  <query xmlns='jabber:iq:register'>\n    <username>bill</username>\n    <password>Calliope</password>\n  </query>\n  <error code='406' type='modify'>\n    <not-acceptable xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>\n  </error>\n</iq>\n```\n\n#### 4.4 æå¡ç«¯è®¿é®æéé®é¢\n\n```xml\n<iq  xmlns='jabber:client' xml:lang='en' to='olivia@localhost/180244803852118156522754' from='olivia@localhost' type='error' id='reg2'>\n    <query  xmlns='jabber:iq:register'>\n        <email>bard@shakespeare.lit</email>\n        <username>bill</username>\n        <password>Calliope</password>\n    </query>\n    <error  code='403' type='auth'>\n        <forbidden  xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>\n        <text  xmlns='urn:ietf:params:xml:ns:xmpp-stanzas' xml:lang='en'>Access denied by service policy</text>\n    </error>\n</iq>\n```\n\n#### 5.å¦æç¨ç¬¬ä¸æ¹æ³¨åçæ¹å¼ï¼å¯è½éè¦è¡¥åä¸äºé¢å¤çä¿¡æ¯\n\nå®¢æ·ç«¯æ¥è¯¢\n\n```xml\n<iq type='get'\n    from='juliet@capulet.com/balcony'\n    to='contests.shakespeare.lit'\n    id='reg3'>\n  <query xmlns='jabber:iq:register'/>\n</iq>\n```\n\n#### 6.æå¡ç«¯è¿åæ¶æ¯ï¼ æç¤ºéè¦æä¾çä¿¡æ¯\n\n```xml\n<iq type='result'\n    from='contests.shakespeare.lit'\n    to='juliet@capulet.com/balcony'\n    id='reg3'>\n  <query xmlns='jabber:iq:register'>\n    <instructions>\n      Use the enclosed form to register. If your Jabber client does not\n      support Data Forms, visit http://www.shakespeare.lit/contests.php\n    </instructions>\n    <x xmlns='jabber:x:data' type='form'>\n      <title>Contest Registration</title>\n      <instructions>\n        Please provide the following information\n        to sign up for our special contests!\n      </instructions>\n      <field type='hidden' var='FORM_TYPE'>\n        <value>jabber:iq:register</value>\n      </field>\n      <field type='text-single' label='Given Name' var='first'>\n        <required/>\n      </field>\n      <field type='text-single' label='Family Name' var='last'>\n        <required/>\n      </field>\n      <field type='text-single' label='Email Address' var='email'>\n        <required/>\n      </field>\n      <field type='list-single' label='Gender' var='x-gender'>\n        <option label='Male'><value>M</value></option>\n        <option label='Female'><value>F</value></option>\n      </field>\n    </x>\n  </query>\n</iq>\n```\n\n#### 7.å®¢æ·ç«¯æä¾ä¿¡æ¯\n\n```xml\n<iq type='set'\n    from='juliet@capulet.com/balcony'\n    to='contests.shakespeare.lit'\n    id='reg4'>\n  <query xmlns='jabber:iq:register'>\n    <x xmlns='jabber:x:data' type='submit'>\n      <field type='hidden' var='FORM_TYPE'>\n        <value>jabber:iq:register</value>\n      </field>\n      <field type='text-single' label='Given Name' var='first'>\n        <value>Juliet</value>\n      </field>\n      <field type='text-single' label='Family Name' var='last'>\n        <value>Capulet</value>\n      </field>\n      <field type='text-single' label='Email Address' var='email'>\n        <value>juliet@capulet.com</value>\n      </field>\n      <field type='list-single' label='Gender' var='x-gender'>\n        <value>F</value>\n      </field>\n    </x>\n  </query>\n</iq>\n```\n\n## Cancellation of Existing Registration\n\n#### 1. cilent req: \n```xml\n<iq type='set' from='bill@shakespeare.lit/globe' id='unreg1'>\n  <query xmlns='jabber:iq:register'>\n    <remove/>\n  </query>\n</iq>\n```\nè·æ³¨åä¸åçæ¯ `query` çchildå¤äºä¸ª`<remove/>`\n\n#### 2.1. æåæ³¨é,server response: \n  \n```xml\n\n<iq type='result' to='bill@shakespeare.lit/globe' id='unreg1'/>\n\n```\n\n#### 2.2.Error Case  \n\n|Condition | Description  |\n| --- | --- |\n| ``<bad-request/>``|\tThe <remove/> element was not the only child element of the <query/> element.|\n|``<forbidden/>``\t| æéä¸å¤|\n|``<not-allowed/>``\t|ä¸åè®¸ç¨æ·æ³¨éè´¦æ·|\n|``<registration-required/>``|è¦æ³¨éçè´¦æ·æ¬æ¥å°±ä¸å­å¨|\n|``<unexpected-request/>``\t| The host is an instant messaging server and the IQ get does not contain a 'from' address because the entity is not registered with the server.|\n\n## ç¨æ·ä¿®æ¹å¯ç \n\n#### 1. Client:\n```xml\n<iq type='set' to='shakespeare.lit' id='change1'>\n  <query xmlns='jabber:iq:register'>\n    <username>bill</username>\n    <password>newpass</password>\n  </query>\n</iq>\n\n```\n\nè¿éçå¯ç æ¯ææï¼ è¦çæå®¢æ·ç«¯æå¡ç«¯éä¿¡æ¯å¦ç¨SSLæèTLSå å¯ï¼èä¸æå¡ç«¯è¯ä¹¦å¯ä¿¡ã\n\n#### 2.1. æå, Server: \n\n```xml\n<iq type='result' id='change1'/>\n\n```\n\n\n#### 2.2. å¤±è´¥ Case \n\n\n|Condition | Description  |\n| --- | --- |\n| ``<bad-request/>``| requestè¯·æ±ä½æ¼åæé®é¢ï¼æ¯å¦æ²¡å¸¦username |\n|``<not-authorized/>`` | æ²¡éè¿serverçå®å¨éªè¯ |\n|``<not-allowed/>`` |\tserver ä¸åè®¸|\n|``<unexpected-request/>`` | The host is an instant messaging server and the IQ set does not contain a 'from' address because the entity is not registered with the server. |\n\næ¯å¦ï¼\n```xml\n// Bad  request\n<iq type='error' from='shakespeare.lit' to='bill@shakespeare.lit/globe' id='change1'>\n  <error code='400' type='modify'>\n    <bad-request xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>\n  </error>\n</iq>\n\n// Not Authorized\n<iq type='error' from='shakespeare.lit' to='bill@shakespeare.lit/globe' id='change1'>\n  <error code='401' type='modify'>\n    <not-authorized xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>\n  </error>\n</iq>\n\n// Not Allowed\n<iq type='error' from='shakespeare.lit' to='bill@shakespeare.lit/globe' id='change1'>\n  <error code='405' type='cancel'>\n    <not-allowed xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>\n  </error>\n</iq>\n```\n\nææ¶åï¼æå¡ç«¯éè¦æ´å¤çä¿¡æ¯æ¥æ¹å¯ç ï¼è¿æ¶åå®ä¼è¿åä¿¡æ¯æç¤ºå®¢æ·ç«¯\n\n```xml\n<iq type='error' from='shakespeare.lit' to='bill@shakespeare.lit/globe' id='change1'>\n  <query xmlns='jabber:iq:register'>\n    <x xmlns='jabber:x:data' type='form'>\n      <title>Password Change</title>\n      <instructions>Use this form to change your password.</instructions>\n      <field type='hidden' var='FORM_TYPE'>\n        <value>jabber:iq:register:changepassword</value>\n      </field>\n      <field type='text-single' label='Username' var='username'>\n        <required/>\n      </field>\n      <field type='text-private' label='Old Password' var='old_password'>\n        <required/>\n      </field>\n      <field type='text-private' label='New Password' var='password'>\n        <required/>\n      </field>\n      <field type='text-single' label='Mother&apos;s Maiden Name' var='x-mmn'>\n        <required/>\n      </field>\n    </x>\n  </query>\n  <error code='401' type='modify'>\n    <not-authorized xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>\n  </error>\n</iq>\n\n```\n\nç¶åå®¢æ·ç«¯è¿åç¸å³ä¿¡æ¯\n\n```xml\n<iq type='set' from='bill@shakespeare.lit/globe' to='shakespeare.lit' id='change2'>\n  <query xmlns='jabber:iq:register'>\n    <x xmlns='jabber:x:data' type='submit'>\n      <field type='hidden' var='FORM_TYPE'>\n        <value>jabber:iq:register:changepassword</value>\n      </field>\n      <field type='text-single' var='username'>\n        <value>bill@shakespeare.lit</value>\n      </field>\n      <field type='text-private' var='old_password'>\n        <value>theglobe</value>\n      </field>\n      <field type='text-private' var='password'>\n        <value>groundlings</value>\n      </field>\n      <field type='text-single' var='x-mmn'>\n        <value>Throckmorton</value>\n      </field>\n    </x>\n  </query>\n</iq>\n```\n\nref: [XEP-0077: In-Band Registration](https://xmpp.org/extensions/xep-0077.html#usecases)\n","tags":["XMPP"],"categories":["NetWork"]},{"title":"XMPP Overview","url":"/2019/03/26/XMPP-Overview/","content":"\n\n\nè·æååä¸ä¸ªé¡¹ç®ï¼æ³å¿«éå¼åï¼éäºXMPPåè®®ãå®æ¯ä¸å¥éä¿¡åè®®ãåä¸ºä¸¤é¨åï¼[XMPP Core Services](https://xmpp.org/rfcs/rfc6121.html#A%20Sample%20Session) å XMPP Extension Protocols. æ ¸å¿ç±åºç¡featureç»æï¼æ©å±åè®®å°±éå¸¸ä¸°å¯ï¼èä¸ä¸ç´å¨åå±ãWikiä¸æå¼ åç§IMåè®®çæ±æ»è¡¨ï¼æ¨èï¼\n\n- [Comparison of instant messaging protocols - Wikipedia](https://en.wikipedia.org/wiki/Comparison_of_instant_messaging_protocols)\n\n\n## XMPP Addressing \n\nè¿æ¯ä¸å¼ Client-Serverçå¾ï¼å¾éçserverãclienté½éµå¾ªXMPPåè®®ãå« XMPP entity. å®ä»¬æåèªå¯ä¸çAddress, æ ¼å¼å¦'username@server.com', å« JID (Jaber ID)\n [RFC 7622 - Extensible Messaging and Presence Protocol (XMPP): Address Format](https://datatracker.ietf.org/doc/rfc7622/)\n \n ![28a215f7.png](/img/32c16f22-9862-45e8-b15f-1b1eceb7b30f/28a215f7.png)\n \nå¶ä¸­resourceæ¯æ¿æ¥ååä¸è´¦å·å¤å®¢æ·ç«¯æ è®°çï¼ æ¯å¦å¾ä¸­`User1` ä» pc ,phone1 å phone2ç»å½åä¸è´¦å·ï¼resourceåå«æ¯ `pc`, `iphone1`,`iphone2`\n \n \n ## XMPP Client- Server Streams\n \n å®¢æ·ç«¯ä¸æå¡ç«¯éè¿é¿é¾æ¥æ¹å¼éä¿¡ï¼ç°å¨å¤ç¨WebSocketãå½å®¢æ·ç«¯è·æå¡ç«¯æ¡ææåï¼å®ä»¬å¼å§ç¨ XML streaméä¿¡ã\n \n ![f1565a2e.png](/img/32c16f22-9862-45e8-b15f-1b1eceb7b30f/f1565a2e.png)\\\n\n \nXML stream æ»æ¯ä»¥  ``<stream>`` å¼å¤´ï¼ ``</stream>`` tagç»å°¾ãæ¯xmlæ¶æ¯çå®¹å¨ã\n\n```\nAn XML stream is a container for the exchange of XML elements between any two entities over a network. \nDuring the life of the stream, the entity that initiated it can send an unbounded number of XML elements over the stream, either elements used to negotiate the stream (e.g., to complete TLS negotiation or SASL negotiation) or XML stanzas. \n```\n\nä¸é¢æ¯clientè·serverçä¸æ¬¡æ¶æ¯äº¤äºï¼ ç»¿è²æ¥èªclientçï¼é»è²æ¶æ¯æ¥èªserver\n\n \n  ![f97e583b.png](/img/32c16f22-9862-45e8-b15f-1b1eceb7b30f/65d38868.png)\n\n ### XML stanza\n An XML stanza is the basic unit of meaning in XMPP. A stanza is a first-level element (at depth=1 of the stream) whose element name is \"message\", \"presence\", or \"iq\" and whose qualifying namespace is 'jabber:client' or 'jabber:server'. \n \n \n ### XMPP Communication Primitives\n\nA `stanza` is the smallest piece of XML data a client can send to a server ( server send to client) in one package.\n\nxmppä¸­ï¼æå¡ç«¯ãå®¢æ·æ°æ®äº¤æ¢æ¶ï¼æå°XMLæ°æ®åä½ å« stanzaãå¦ä¸å¾ï¼ç»¿è²çå°±æ¯ä¸ä¸ªstanzaï¼é»è²çä¹æ¯ä¸ä¸ªstanzaãStanzaæå ç§ç±»å: `message`, `iq`, `presence`ã \n\n#### The Message Stanza\n\nThe <message/> stanza is meant to be used to send data between XMPP entities.\n\n![6fe8a15e.png](/img/32c16f22-9862-45e8-b15f-1b1eceb7b30f/6fe8a15e.png)\n\n - fromï¼åéæ¹\n - toï¼ æ¥æ¶æ¹\n - body: æ¶æ¯åå®¹\n - type æå ç§ç±»å:\n     -`<message type=âchatâ/>` ( chat message stanza) \n     - `< message type=âgroupchatâ/>` ( groupchat message stanza)\n     - `< message type=âerrorâ/>` (error message stanza)\n\n#### The Presence Stanza\n\nç¨æ¥è¡¨ç¤ºå¨çº¿ç¶æç\n \n\n![0fbe995b.png](/img/32c16f22-9862-45e8-b15f-1b1eceb7b30f/0fbe995b.png)\n\n`show` æ ç­¾éå¯è½ä¼æçå ç§ç¶æ: \n`chat` : online and available for chat ; \n`away` : ææ¶ç¦»å¼\n`xa` : é¿æ¶é´ç¦»å¼\n`dnd`: è¯·å¿ææ°\n\nå¦æä½ æ³ç¥éå«çç¶æï¼éè¦ååæ¶æ¯ç»Serverï¼subscribeå«äººã \n\n\n#### The IQ stanza\n \n The IQ( Info/Query) stanza is used to get some information from the server ( info about the server or its registered clients) or to apply some settings to the server.\n \n ç¨æ¥è·åæ¶æ¯ï¼æèè¯·æ±è®¾ç½®\n  \nTypeå±æ§ä¸­çç±»å :get ,set ,result or error. \n- `< iq type=âgetâ/>` stanzas are used to get(ask) some information ( from the server). \n- `<iq type=âsetâ/>` stanzas are used to apply some settings to the server.When you send get/set IQ stanzas to the server ,\n- it can reply either with an `< iq type=âresultâ/>` stanza when your request has been successfully processed by the server or \n- `<iq type=âerrorâ/>` stanza when something has gone wrong with your request.The figure below shows an IQ stanza that we send to the server and the reply we get from the server.\n\n\n![30c96f66.png](/img/32c16f22-9862-45e8-b15f-1b1eceb7b30f/30c96f66.png)\n\n\nThe client sends an IQ get stanza to the server to request its contact list.We know it is asking for the contact list because of the `jabber:iq:roster` XML namespace.\n\nThe XMPP engine in the server is programmed to know that when a client sends `jabber:iq:roster` namespaced IQ ,it wants to retrieve its contact list.There are other `namespaces` in XMPP for other uses and you will surely come accross them in your XMPPing journey.\n\nThe server responds with a list of the JIDâs contacts wraped within a `jabber:iq:roster` namespaced `<query/>`tag.\n\n\n## æ¬å°æ­å»º Server \n\nææ­çæ¯ejabberd. å®æ¹å®è£æç¨: [Installing ejabberd \\| ejabberd Docs](https://docs.ejabberd.im/admin/installation/#install-on-macos)\n\n#### å¯å¨æå¡\n\n```\ncd /Applications/ejabberd-19.02\n//å¼å¯æå¡\n./bin/ejabberdctl start  \n//ç¶æ\n./bin/ejabberdctl status  \n\n// help æ¥çæ´å¤åè½å¦\n./bin/ejabberdctl help \n```\n\n#### æ³¨åè´¦æ·\n\næå¼ [admin é¡µé¢](http://localhost:5280/admin/), èæä¸»æº -> localhost(å¯è½ä½ çåå­ä¸ä¸æ ·) -> ç¨æ·ã ç°å¨ä½ å¯ä»¥èªå·±åå»ºè´¦æ·äºã\n\n![578b88b6.png](/img/32c16f22-9862-45e8-b15f-1b1eceb7b30f/578b88b6.png)\n\n\nå¦ææèªå®ä¹éæ±,éç½®æç¨ [Configuring ejabberd \\| ejabberd Docs](https://docs.ejabberd.im/admin/configuration/#mod-http-ws) \n \n#### å®¢æ·ç«¯ç©èµ·æ¥\n\nå®¢æ·ç«¯æå¾å¤[éæ©](https://xmpp.org/software/clients.html)ï¼ä¸è¿å¤§å¤æ°é½æ¯æ¸£ãå¦ææ¯WebSocketï¼ç¨è¿ä¸ª [GitHub - processone/xmpp-websocket-client: Test XMPP Websocket client](https://github.com/processone/xmpp-websocket-client) è°è¯å¯ä»¥çå°stanzaï¼æºæ¹ä¾¿çã\n\nå¦æMacç¨æ·æ¥authé®é¢ï¼å¯ä»¥æå¼`vim conf/ejabberd.yml`, `tls`éç½®æ`false`\n![5202ee46.png](/img/32c16f22-9862-45e8-b15f-1b1eceb7b30f/5202ee46.png)\n\n#### å³äºjs lib\næç®ç¨React Nativeåï¼libéäº [GitHub - xmppjs/xmpp.js: XMPP for JavaScript](https://github.com/xmppjs/xmpp.js) ãå½ç¶ Webå¤ç¨æ¡æ¶ Strophe.jsãè¿å¿æä¸ªç®åæ¯è¾[How do you compare to strophe.js Â· Issue #217 Â· xmppjs/xmpp.js Â· GitHub](https://github.com/xmppjs/xmpp.js/issues/217)\n\n### å¶ä»èµæ\n\n- ç®åä»ç» [A friendly introduction to XMPP â blikoon](https://www.blikoontech.com/xmpp/xmpp-a-soft-friendly-introduction)\n\n- å®æ¹åè®®å¾è¯¦ç»ï¼ä¾å­ä¹å¾å½¢è±¡ã [Extensible Messaging and Presence Protocol (XMPP): Core](https://xmpp.org/rfcs/rfc6120.html#tls)\n\n- å¦ä½éæ©å³æ¶éè®¯åºç¨çæ°æ®ä¼ è¾æ ¼å¼ [å¦ä½éæ©å³æ¶éè®¯åºç¨çæ°æ®ä¼ è¾æ ¼å¼-å¶å®åäº«/ä¸é¡¹ææ¯åº - å³æ¶éè®¯å¼åèç¤¾åº!](http://www.52im.net/thread-276-1-1.html)\n- å¼ºåå»ºè®®å°Protobufä½ä¸ºä½ çå³æ¶éè®¯åºç¨æ°æ®ä¼ è¾æ ¼å¼ [å¼ºåå»ºè®®å°Protobufä½ä¸ºä½ çå³æ¶éè®¯åºç¨æ°æ®ä¼ è¾æ ¼å¼-å¶å®åäº«/ä¸é¡¹ææ¯åº - å³æ¶éè®¯å¼åèç¤¾åº!](http://www.52im.net/thread-277-1-1.html) \n\n\n\n\n","tags":["XMPP"],"categories":["NetWork"]}]